<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/30/hello-world/"/>
    <url>/2023/07/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux 文件系統</title>
    <link href="/2023/07/30/linux-filesystem/"/>
    <url>/2023/07/30/linux-filesystem/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Linux 中每個目錄都有其各自的作用，有些目錄也有限制訪問權限，所以安裝軟體時還是別隨心所欲地亂放，記得第一次使用時安裝nginx，竟然把它放在<code>/etc</code> 目錄下，因為些權限問題而啟動時遇到困難。今天就整理一下常見目錄的作用，以及常用操作目錄及文件的指令。</p><h1 id="目錄作用"><a href="#目錄作用" class="headerlink" title="目錄作用"></a>目錄作用</h1><ul><li><p><code>/boot</code> : 存放系統開機時必要的文件</p></li><li><p><code>/root</code> : root user 的家目錄，不等同於 “&#x2F;”</p></li><li><p><code>/dev</code> : 硬體設備(keyboard、mouse)的操作文件</p></li><li><p><code>/etc</code> : 存放<font color=#EB5757>配置文件</font>(如:DNS、某個應用的配置檔)</p></li><li><p><code>/bin</code> ⇒ <code>/usr/bin</code> : 這兩個目錄都是存放常見且通用的系統命令，(如 ls（列出目錄內容）、cp（複製文件）、mv（移動文件）等)</p></li><li><p><code>/sbin</code>⇒ <code>/usr/sbin</code> : 存放系統管理員使用的系統級命令，(ifconfig（設置網絡接口）、fdisk（磁盤分割工具）、mount（掛載文件系統）等)</p></li><li><p><code>/opt</code> : (optional)用來存放第三方軟體</p></li><li><p><code>/proc</code> : 是一種虛擬文件系統，<font color=#EB5757>紀錄正在運行中的進程文件</font>，也能查看目前的硬體訊息如CPU，如果停止運行裡面文件就會消失，這些文件只存在於記憶體中</p></li><li><p><code>/lib</code> ⇒ <code>/usr/lib</code> : 所有<font color=#EB5757>C 語言的依賴包</font>都存在這裡，如使用的那些cmd 是用C 語言寫的，他的依賴包就是存在這個資料夾，可以用 strace -e open pwd  就可以看這個指令使用的依賴包有哪些</p></li><li><p><code>/tmp</code> : 檔案暫時存放區</p></li><li><p><code>/home</code> : 用戶的家目錄，裡面會有所有用戶的家目錄(除了root)</p></li><li><p><code>/var</code> : 系統的log 存放區</p></li><li><p><code>/run</code> : 它主要用於存放在系統開機期間需要在運行時創建的臨時運行時檔案（runtime files）。&#x2F;run 目錄通常用於<font color=#EB5757>存放正在運行的系統和服務的狀態資訊、進程檔案、socket 檔案</font>等。這些檔案在系統重新開機後會被清理，因為 &#x2F;run 目錄是一個暫存的文件系統，它存在於記憶體中，而不是永久存儲在硬碟上。裡面有PID 文件，用于存储进程的 PID（Process ID）信息</p></li><li><p><code>/mnt</code> : 可以用來掛載其他的文件系統</p></li><li><p><code>/media</code> : 可以用來<font color=#EB5757>掛載可移動裝置</font>，包括 USB 驅動器、光碟、SD 卡、移動硬碟等</p></li><li><p><code>/usr</code> : 存放使用者相關的應用程式和檔案，通常被稱為 “Unix System Resources” 或 “User System Resources</p><ul><li><p><code>/usr/bin</code> : 存放大部分使用者可執行的命令和應用程式，包括系統自帶的工具和第三方軟體。例如，ls、cp、mv 等常用命令就位於 &#x2F;usr&#x2F;bin 目錄下。</p></li><li><p><code>/usr/local</code> : 通常被用於<font color=#EB5757>安裝本地使用者自己編譯的軟體</font>，目錄下通常包含 bin、lib、include 等子目錄，類似於 &#x2F;usr 目錄的結構。</p></li><li><p><code>/usr/share</code> : 共享的資料檔案，例如文件、幫助檔案、圖示。</p></li><li><p><code>/usr/lib</code> : 存放系統和應用程式所使用的共享庫檔案（shared libraries）</p></li></ul></li></ul><h1 id="檔案屬性"><a href="#檔案屬性" class="headerlink" title="檔案屬性"></a>檔案屬性</h1><table><thead><tr><th>Type</th><th># of links</th><th>Owner</th><th>Group</th><th>Size</th><th>Month</th><th>Day</th><th>Time</th><th>Name</th></tr></thead><tbody><tr><td>drwxr-xr-x.</td><td>21</td><td>root</td><td>root</td><td>4096</td><td>Feb</td><td>27</td><td>13:33</td><td>var</td></tr><tr><td>lrwxrwxrwx.</td><td>1</td><td>root</td><td>root</td><td>7</td><td>Feb</td><td>27</td><td>13:15</td><td>bin</td></tr><tr><td>-rw-r-r–</td><td>1</td><td>root</td><td>root</td><td>0</td><td>Mar</td><td>27</td><td>13:15</td><td>test</td></tr></tbody></table><ul><li><code># of links</code> : 該檔案有幾個硬連結，如果是目錄，就是 (該目錄+其父目錄+其子目錄)</li></ul><h1 id="檔案類型"><a href="#檔案類型" class="headerlink" title="檔案類型"></a>檔案類型</h1><p>使用 <code>ls -l</code> 常可以看到文件屬性前面有一段英文字如<code>-rw-r-r--</code>，其中最前面的字母代表了該檔案的類型，分別為</p><ul><li><code>d</code> : 目錄</li><li><code>l</code> : 連結</li><li><code>-</code> :  一般文件</li><li><code>s</code> : socket</li><li><code>c</code> : 裝置文件(keyboard)</li><li><code>p</code> : Name pipe</li><li><code>b</code> : block device</li></ul><h1 id="硬連結（Hard-Link）、軟連結（Soft-Link）、inode"><a href="#硬連結（Hard-Link）、軟連結（Soft-Link）、inode" class="headerlink" title="硬連結（Hard Link）、軟連結（Soft Link）、inode"></a>硬連結（Hard Link）、軟連結（Soft Link）、inode</h1><ul><li><p>inode :  檔案在磁碟上的<code>指標</code>(實際上的物理位置)，每次檢索檔案時，磁碟都會用到這組數字</p></li><li><p>硬連結（Hard Link） :  直接連到 inode ，不經過檔案，他和檔案共享同一個數據塊，所以檔案刪除或是改名，硬連結不會被影響，不可跨文件系統，當所有硬連結和原始檔案都被刪除時，才會真正釋放檔案的磁碟空間。</p></li><li><p>軟連結（Soft Link） :  像是創建檔案的捷徑，透過檔案(他指向的只是檔案的路徑，而不是真實數據)，再連到 inode， <font color=#EB5757>檔案刪除或是改名，軟連結就GG了</font>，可以跨文件系統</p></li><li><p>指令</p><ul><li><code>ln</code> : 創建硬連結</li><li><code>ln -s</code> : 創建軟連結</li></ul></li><li><p>不要在同一個目錄下創建連結</p></li></ul><p>使用連結時需要小心，以免因刪除原始檔案或連結檔案而丟失資料或引起檔案系統的混亂。同時，避免創建過多的<code>硬連結</code>，以免在刪除硬連結時不小心刪除了原始檔案。</p><h1 id="針對文件、目錄的操作"><a href="#針對文件、目錄的操作" class="headerlink" title="針對文件、目錄的操作"></a>針對文件、目錄的操作</h1><h2 id="創建檔案"><a href="#創建檔案" class="headerlink" title="創建檔案"></a>創建檔案</h2><h3 id="創建文件-touch"><a href="#創建文件-touch" class="headerlink" title="創建文件 (touch)"></a>創建文件 (touch)</h3><p>創建單一文件 <code>touch 檔名</code></p><p>例如: <code>touch test</code></p><p>創建多個文件 <code>touch 檔名1 檔名2 檔名3</code></p><p>例如: <code>touch test1 test2 test3</code></p><p>創建多文件</p><p><code>touch abc&#123;1..9&#125;.xyz</code><br>會新增 abc1.xyz、abc2.xyz … abc9.xyz 的檔案</p><h3 id="創建目錄-mkdir"><a href="#創建目錄-mkdir" class="headerlink" title="創建目錄 (mkdir)"></a>創建目錄 (mkdir)</h3><p><code>mkdir 目錄名</code></p><p>例如: <code>mkdir test-dir</code></p><h2 id="複製檔案-cp"><a href="#複製檔案-cp" class="headerlink" title="複製檔案 (cp)"></a>複製檔案 (cp)</h2><h3 id="複製文件"><a href="#複製文件" class="headerlink" title="複製文件"></a>複製文件</h3><p>複製文件 <code>cp 檔名 新檔名</code><br><code>cp test test-bak</code></p><h3 id="複製目錄"><a href="#複製目錄" class="headerlink" title="複製目錄"></a>複製目錄</h3><p>-R 代表把目錄裡面的文件也都複製一份， 他是把原目錄裡面的檔案都複製一分到新目錄名下面<br><code>cp -R 原目錄 新目錄名</code></p><p>例如: <code>cp -R test-dir test-dir-bak</code></p><h2 id="尋找檔案-find、locate"><a href="#尋找檔案-find、locate" class="headerlink" title="尋找檔案 (find、locate)"></a>尋找檔案 (find、locate)</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p><code>find 查詢的起始目錄 -name &quot;檔名&quot;</code></p><p>從當前目錄開始尋找</p><p><code>find . -name &quot;test&quot;</code></p><p>從根目錄開始尋找</p><p><code>find / -name &quot;test&quot;</code></p><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><p><code>locate 檔名</code></p><p>例如: <code>locate test</code></p><h3 id="locate-、find-差異"><a href="#locate-、find-差異" class="headerlink" title="locate 、find 差異?"></a>locate 、find 差異?</h3><ul><li><p><code>locate</code> 有維護一張表，他會直接去從表查，所以速度會比<code>find</code> 快很多，但是表如果還不是最新版本(該表是系統排程更新)，可能查詢結果不準確 (<code>updatedb</code>指令)</p></li><li><p><code>find</code> 是每次都會去文件系統查，速度較慢，但是準確</p></li></ul><h1 id="通配符-WildCards"><a href="#通配符-WildCards" class="headerlink" title="通配符  (WildCards)"></a>通配符  (WildCards)</h1><p>通配符是用於匹配檔案名或目錄名的特殊字符，常用於需要批量操作一些檔名很類似， abc1、abc2、abc3…abc99，如日誌檔</p><p>可以快速搜尋符合條件的檔案，並執行相對應動作，很大的提高工作效率，常用的通配符有以下幾種</p><ul><li><p><code>*</code>  :  用來匹配0~ 多個字符，如想要找出所有的txt結尾的檔案， 可以用<code>*.txt</code>表示</p></li><li><p><code>?</code> :  匹配1個字符，如想要找出 ab1、ab2、ab3…ab9 等 ab開頭，結果只有一個字符的檔案，可以用<code>ab?</code>表示</p></li><li><p><code>[ ]</code> :  指定一個字符集合 例如含有x或y的檔名，可以用<code>*[xy]*</code>表示</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github 上實用的小技巧</title>
    <link href="/2023/07/27/awesome-skill-in-github/"/>
    <url>/2023/07/27/awesome-skill-in-github/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Github 是一個代碼的存儲庫，上面有許多優秀的開源方案，有時想要搜尋符合自己需求的專案，搜尋結果可能包含多種程式語言，或是代碼庫早已沒有維護。</p><p>就算找到了符合自己需求的代碼庫，每次想要查看他的源代碼都需要下載到本地，本次就來介紹一些實用的技巧，提高查看源代碼時的體驗。</p><h1 id="搜尋代碼庫技巧"><a href="#搜尋代碼庫技巧" class="headerlink" title="搜尋代碼庫技巧"></a>搜尋代碼庫技巧</h1><h2 id="進階搜索"><a href="#進階搜索" class="headerlink" title="進階搜索"></a>進階搜索</h2><p>可以直接搜尋 <code>https://github.com/search/advanced</code>，進入進階搜索的頁面，</p><p>也可以直接使用快捷鍵<code>s</code>，開啟github 高級搜索功能，可以自行輸入語句設定搜索條件，這邊介紹幾個常用的語法</p><h3 id="設定星星數"><a href="#設定星星數" class="headerlink" title="設定星星數"></a>設定星星數</h3><ul><li><code>mitm stars:&gt;500</code> (內容包含mitm)</li></ul><h3 id="設定語言"><a href="#設定語言" class="headerlink" title="設定語言"></a>設定語言</h3><ul><li><code>mitm language:Go</code></li><li><code>mitm language:Go language:JAVA</code>  (使用 JAVA、Go 寫的)</li></ul><h3 id="設定代碼庫更新時間，可以用來看存儲庫是否還有在維護"><a href="#設定代碼庫更新時間，可以用來看存儲庫是否還有在維護" class="headerlink" title="設定代碼庫更新時間，可以用來看存儲庫是否還有在維護"></a>設定代碼庫更新時間，可以用來看存儲庫是否還有在維護</h3><ul><li><code>mitm pushed:&gt;2020-01-01</code></li></ul><h3 id="指定欄位"><a href="#指定欄位" class="headerlink" title="指定欄位"></a>指定欄位</h3><ul><li><code>mitm in:name</code>  (指定倉庫名稱包含mitm)</li></ul><h3 id="同時設定多個條件"><a href="#同時設定多個條件" class="headerlink" title="同時設定多個條件"></a>同時設定多個條件</h3><ul><li><code>mitm in:name stars:&gt;500 language:Go  pushed:&gt;2020-01-01</code></li></ul><h1 id="代碼查看技巧"><a href="#代碼查看技巧" class="headerlink" title="代碼查看技巧"></a>代碼查看技巧</h1><h2 id="存儲庫內常用快捷鍵"><a href="#存儲庫內常用快捷鍵" class="headerlink" title="存儲庫內常用快捷鍵"></a>存儲庫內常用快捷鍵</h2><h3 id="在代碼庫搜尋文件"><a href="#在代碼庫搜尋文件" class="headerlink" title="在代碼庫搜尋文件"></a>在代碼庫搜尋文件</h3><p>使用<code>T</code>快捷鍵，可以在代碼庫進行全文件搜索，在那種目錄包很多層的代碼庫中尤其好用</p><h3 id="快速跳到某一行"><a href="#快速跳到某一行" class="headerlink" title="快速跳到某一行"></a>快速跳到某一行</h3><p>使用<code>L</code> 快捷鍵</p><h3 id="查看某文件的改動紀錄"><a href="#查看某文件的改動紀錄" class="headerlink" title="查看某文件的改動紀錄"></a>查看某文件的改動紀錄</h3><p>使用<code>B</code> 快捷鍵</p><h2 id="線上開啟vscode-編輯器"><a href="#線上開啟vscode-編輯器" class="headerlink" title="線上開啟vscode 編輯器"></a>線上開啟vscode 編輯器</h2><p>使用<code>.</code>快捷鍵，github會開啟一個線上vscode 編輯器，就不用每次都要下載源代碼到本地，還可以在線上安裝plugin，但語言的標準庫就不像本地一樣方便，可以直接查看內容</p><h3 id="使用-alt"><a href="#使用-alt" class="headerlink" title="使用 alt + &lt;- (左方向建) 可以回到上一頁"></a>使用 alt + &lt;- (左方向建) 可以回到上一頁</h3><p>這個是vscode 提供的快捷鍵功能</p><h1 id="線上運行代碼"><a href="#線上運行代碼" class="headerlink" title="線上運行代碼"></a>線上運行代碼</h1><p>在網址前墜加上 <code>gitpod.io/#</code></p><p>如<br><code>https://github.com/owner/repository</code><br>改成<br><code>https://gitpod.io/#/github.com/owner/repository</code></p><p>會開啟gitpod 線上運行環境的功能，自動安裝目前項目需要的依賴包，並可自行輸入command line，在網頁上查看代碼執行的效果，這部分我沒有嘗試，有興趣的可以自行試試看。</p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://www.youtube.com/watch?v=yoRxfPfFOh8&t=20s">5个隐藏的GitHub神技巧，助你秒变大佬！</a><br><a href="https://zhuanlan.zhihu.com/p/347723938">21个GitHub精准搜索的神仙技巧</a><br><a href="https://docs.github.com/en/search-github/github-code-search/understanding-github-code-search-syntax">github搜尋語法官方文檔</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安裝golang (ubuntu 20.04)</title>
    <link href="/2023/07/21/install-golang/"/>
    <url>/2023/07/21/install-golang/</url>
    
    <content type="html"><![CDATA[<h2 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h2><ol><li>到官網連結安裝，(官網連結可以能會修改)，安裝的版本選 amd64</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://go.dev/dl/go1.20.6.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><ol start="2"><li>解壓縮到 <code>/usr/local</code>，解壓縮完會發現  &#96;&#x2F;usr&#x2F;local&#96;&#96; 多了一個go 目錄</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -C 解壓縮的目標目錄</span><br>sudo tar -C /usr/local -xzf go1.20.6.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><ol start="3"><li>在 <code>/etc/profile</code> 檔案 新增 go 的 環境變數</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 編輯 /etc/profile</span><br>sudo vi /etc/profile<br><br><span class="hljs-comment"># 在檔案中新增這行</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/usr/local/go/bin <br></code></pre></td></tr></table></figure><ol start="4"><li>刷新當前shell環境，獲取到&#x2F;etc&#x2F;profile最新的配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><ol start="5"><li>也可以修改~&#x2F;.profile</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi ~/.profile<br><br><span class="hljs-comment"># 在檔案中新增這行</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/usr/local/go/bin <br><br><span class="hljs-comment"># 刷新當前shell環境</span><br><span class="hljs-built_in">source</span> ~/.profile<br></code></pre></td></tr></table></figure><ol start="6"><li>檢查下是否安裝成功<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">go version<br><br><span class="hljs-comment"># 應該會出現</span><br>go version go1.20.6 linux/amd64<br></code></pre></td></tr></table></figure></li></ol><p>關掉 cmd 後可能會出現”無法找到go 指令”，可以重啟VM 試試</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="https://quietbo.com/2022/07/21/golang-%E5%AE%89%E8%A3%9D-windows-ubuntu20-04/">[Golang] 安裝 (Windows &amp; ubuntu20.04)</a></p><p><a href="https://www.linuxprobe.com/linux-source-useful.html">Linux中source命令的使用方式</a></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>將Hexo Blog 部屬到github pages 上</title>
    <link href="/2023/07/17/deploy-to-github-page/"/>
    <url>/2023/07/17/deploy-to-github-page/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>撰寫完文章後，下一步就是將網站部屬到github pages上了，github 除了可以存放代碼之外，還提供讓你免費部屬靜態網站的功能，<br>但還是有一些限制，如respository 容量只能到1G，但在初期文章數量不多時，是個好選擇。</p><p>官方提供了兩種部屬方式</p><h2 id="步驟-使用一鍵部屬"><a href="#步驟-使用一鍵部屬" class="headerlink" title="步驟 (使用一鍵部屬)"></a>步驟 (使用一鍵部屬)</h2><ol><li>創建repository，並將hexo 專案推上去，預設<code>public</code>目錄不會被推上去</li></ol><p>會有兩種域名呈現方式</p><ul><li><username>.github.io</li><li><username>.github.io&#x2F;repositoryName</li></ul><p>如果想要讓blog的域名以 <code>username</code>.github.io 呈現，那在創建repository時，repository名稱要取為 <code>username</code>.github.io ，<code>username</code>為github帳號名 如: austin72905.github.io</p><p>如果是<code>username</code>.github.io&#x2F;repositoryName呈現方式，在創建repository時，名稱任意。</p><ol start="2"><li>將<code>_config.yml</code> 修改:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:austin72905/austin72905.github.io.git</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span> <span class="hljs-comment"># 指定github pages 編譯的分支，不要使用master</span><br><br></code></pre></td></tr></table></figure><p><em><strong>branch分支不要指定master!!</strong></em><br>如果branch指定master，hexo 專案會把<code>public</code>目錄的內容推到master 上，蓋掉你原本推上去的內容，這樣其他的檔案就無法做版本控制了</p><ul><li>master : 未打包的原始碼</li><li>gh-pages : 打包過後的靜態文件</li></ul><p>github pages 編譯時針對gh-pages 上的文件進行編譯</p><ol start="3"><li>下載一鍵部屬套件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><ol start="4"><li>部屬</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>透過 hexo 一鍵部屬套件部屬後，未來更新代碼推上git後，還是需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g <span class="hljs-comment"># 生成靜態文件</span><br>hexo d <span class="hljs-comment"># 部屬</span><br></code></pre></td></tr></table></figure><p>將新代碼部屬上去。</p><p>如果要使用Github Action實現持續部屬(CD)的功能，需要使用Hexo 官方提供的另一種方式。</p><h2 id="步驟-使用Github-Action-部屬到Github-Pages-推薦"><a href="#步驟-使用Github-Action-部屬到Github-Pages-推薦" class="headerlink" title="步驟 (使用Github Action 部屬到Github Pages) (推薦)"></a>步驟 (使用Github Action 部屬到Github Pages) (推薦)</h2><ol><li>創建github repository</li></ol><p>同一鍵部屬步驟1，依照需求調整repository名稱，如: <code>username</code>.github.io</p><ol start="2"><li><p>在hexo 專案中建立<code>.github/workflows/pages.yml</code></p></li><li><p>查看你的node 版本</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node --version  <span class="hljs-comment"># 得到的結果會類似 (v16.5.3)</span><br></code></pre></td></tr></table></figure><ol start="4"><li>將以下內容貼到<code>.github/workflows/pages.yml</code>， (將 <code>16</code> 替換為上個步驟中記下的版本)</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Pages</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span>  <span class="hljs-comment"># default branch，或是master</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">pages:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">permissions:</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">write</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-comment"># If your repository depends on submodule, please see: https://github.com/actions/checkout</span><br>          <span class="hljs-attr">submodules:</span> <span class="hljs-string">recursive</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">16.</span><span class="hljs-string">x</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;16&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">NPM</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.OS</span> <span class="hljs-string">&#125;&#125;-npm-cache</span><br>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">github_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>將hexo 專案推上去，預設<code>public</code>目錄不會被推上去</p></li><li><p>在儲存庫中前往 <strong>Settings</strong> &gt; <strong>Pages</strong> &gt; <strong>Source</strong>，並將 branch 改為 gh-pages</p></li></ol><p>使用此方式，未來只要有新代碼推上去，就會自動觸發Github Action，將Github Pages 上的網站重新編驛更新。</p><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><p><a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/about-github-pages">github pages文檔</a></p><p><a href="https://hexo.io/zh-tw/docs/github-pages">在 GitHub Pages 上部署 Hexo</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 主題修改(Fluid)</title>
    <link href="/2023/07/17/hexo-theme-modify/"/>
    <url>/2023/07/17/hexo-theme-modify/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>配置完hexo 主題後，發現很多地方跟自己想要呈現的方式不太一樣，這邊就要來客製化一下了，介紹常見的修改</p><p>配置文件都在<code>themes</code> 目錄中<code>fluid/_config.yml</code>。</p><h2 id="整個頁面"><a href="#整個頁面" class="headerlink" title="整個頁面"></a>整個頁面</h2><h3 id="修改左上角，blog-的名稱"><a href="#修改左上角，blog-的名稱" class="headerlink" title="修改左上角，blog 的名稱"></a>修改左上角，blog 的名稱</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E5%8D%9A%E5%AE%A2%E6%A0%87%E9%A2%98">博客标题</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">navbar:<br>    blog_title: blog標題<br></code></pre></td></tr></table></figure><h3 id="修改右上角，巡航列的標題"><a href="#修改右上角，巡航列的標題" class="headerlink" title="修改右上角，巡航列的標題"></a>修改右上角，巡航列的標題</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95">巡航菜單</a></p><p>可以看到文檔說明<code>key</code> 用于关联有语言配置，如不存在关联则显示 key 本身的值，<br>在這邊修改key的話，在文章內頁標題的文字不會改變。</p><p>如:我想要把”歸檔”兩個字，修改為”全部文章”，當導覽到全部文章頁面時，標題也要顯示全部文章，要達成此效果<br>要直接修改<code>languages/zh-TW.yml</code><br>修改完如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">archive:</span><br>    <span class="hljs-attr">menu:</span> <span class="hljs-string">&#x27;全部文章&#x27;</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;全部文章&#x27;</span><br>    <span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;全部文章&#x27;</span><br>    <span class="hljs-attr">post_total:</span> <span class="hljs-string">&#x27;共有 %d 篇文章&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="主頁"><a href="#主頁" class="headerlink" title="主頁"></a>主頁</h2><h3 id="修改主頁的slogan"><a href="#修改主頁的slogan" class="headerlink" title="修改主頁的slogan"></a>修改主頁的slogan</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#slogan-%E6%89%93%E5%AD%97%E6%9C%BA">修改slogan</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>    <span class="hljs-attr">slogan:</span><br>        <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">text:</span> <span class="hljs-string">修改成你要的slogan</span><br></code></pre></td></tr></table></figure><h3 id="修改頁面頂部大圖"><a href="#修改頁面頂部大圖" class="headerlink" title="修改頁面頂部大圖"></a>修改頁面頂部大圖</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E9%A1%B5%E9%9D%A2%E9%A1%B6%E9%83%A8%E5%A4%A7%E5%9B%BE">修改頁面頂部大圖</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>    <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span> <span class="hljs-comment"># 修改圖片高度</span><br></code></pre></td></tr></table></figure><h2 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h2><h3 id="footer-文字"><a href="#footer-文字" class="headerlink" title="footer 文字"></a>footer 文字</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">footer:</span><br>    <span class="hljs-attr">content:</span><br>    <span class="hljs-string">`</span><br>    <span class="hljs-string">內容</span><br>    <span class="hljs-string">`</span><br><br></code></pre></td></tr></table></figure><h2 id="文章內頁"><a href="#文章內頁" class="headerlink" title="文章內頁"></a>文章內頁</h2><h3 id="文章頁顯示訊息-字數、日期"><a href="#文章頁顯示訊息-字數、日期" class="headerlink" title="文章頁顯示訊息(字數、日期..)"></a>文章頁顯示訊息(字數、日期..)</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E6%97%A5%E6%9C%9F-%E5%AD%97%E6%95%B0-%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF-%E9%98%85%E8%AF%BB%E6%95%B0">日期&#x2F;字数&#x2F;阅读时长&#x2F;阅读数</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>    <span class="hljs-attr">meta:</span><br>        <span class="hljs-attr">author:</span>  <span class="hljs-comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span><br>            <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">date:</span>  <span class="hljs-comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span><br>            <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;dddd, MMMM Do YYYY, h:mm a&quot;</span>  <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>        <span class="hljs-attr">wordcount:</span>  <span class="hljs-comment"># 字数统计</span><br>            <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 字&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>        <span class="hljs-attr">min2read:</span>  <span class="hljs-comment"># 阅读时间</span><br>            <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 分钟&quot;</span><br>        <span class="hljs-attr">views:</span>  <span class="hljs-comment"># 阅读次数</span><br>            <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>            <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span>  <span class="hljs-comment"># 统计数据来源，可选：leancloud | busuanzi   注意不蒜子会间歇抽风</span><br>            <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br></code></pre></td></tr></table></figure><h3 id="代碼塊不顯示使用語言"><a href="#代碼塊不顯示使用語言" class="headerlink" title="代碼塊不顯示使用語言"></a>代碼塊不顯示使用語言</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E4%BB%A3%E7%A0%81%E5%9D%97">代码块</a></p><p><code>fluid/_config.yml</code>搜尋”代码块的增强配置”</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">code:</span><br>    <span class="hljs-comment"># 是否开启复制代码的按钮</span><br>    <span class="hljs-comment"># Enable copy code button</span><br>    <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 代码语言</span><br><span class="hljs-comment"># Code language</span><br><span class="hljs-attr">language:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 把它關掉</span><br>    <span class="hljs-attr">default:</span> <span class="hljs-string">&quot;TEXT&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="關於"><a href="#關於" class="headerlink" title="關於"></a>關於</h2><h3 id="關於的內容"><a href="#關於的內容" class="headerlink" title="關於的內容"></a>關於的內容</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E4%BF%A1%E6%81%AF">关于信息</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">about:</span><br><span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.png</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">&quot;你的名字&quot;</span><br><span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;你的介紹&quot;</span><br><br></code></pre></td></tr></table></figure><p>至於其他的配置，日後如果有修改的需求，會再持續記錄到此文章</p><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><p><a href="https://hexo.fluid-dev.com/docs/guide/">fluid官方文檔</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 框架介紹</title>
    <link href="/2023/07/17/hexo-introduce/"/>
    <url>/2023/07/17/hexo-introduce/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo 是一個blog 框架，用於快速產生”靜態”網站，基於 node.js，使用markdown 撰寫文章<br>以下為官網連結 <a href="https://hexo.io/zh-tw/">Hexo</a></p><h1 id="安裝流程"><a href="#安裝流程" class="headerlink" title="安裝流程"></a>安裝流程</h1><ol><li><p>首先要先安裝node.js</p></li><li><p>安裝hexo cli，才能使用hexo 指令</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><ol start="3"><li>建立blog 專案</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 沒有加&lt;folder&gt;會在當前資料夾建立hexo 專案</span><br><span class="hljs-comment"># 也可以自行指定資料夾</span><br>hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure><ol start="4"><li>運行 blog 專案</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>看到專案建立起來後，接下來就可以來撰寫文章了，以下就來介紹幾個重要的文件</p><h1 id="目錄結構"><a href="#目錄結構" class="headerlink" title="目錄結構"></a>目錄結構</h1><ul><li>scaffold : 文章的範例模板</li><li>source&#x2F;_post : 文章內容所在</li><li>themes : 可以將網路上下載的主題放入此資料夾</li></ul><h1 id="文章範例"><a href="#文章範例" class="headerlink" title="文章範例"></a>文章範例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: 標題<br><span class="hljs-built_in">date</span>:  日期 <span class="hljs-comment"># 依照文章當下新增的時間，但如果之後不小心資料損毀，就無法知道確切時間，所以建議自己打日期</span><br>tags:      <span class="hljs-comment">## 如果只有單一標籤，直接寫在貿號後面就好</span><br>    -  前端<br>---<br><br><span class="hljs-comment"># 以下開始為內文</span><br><br><span class="hljs-comment"># 這會是一個超連結</span><br>[文字](http連結)<br><br><br>`此為行內程式碼`<br><br>```使用的語言，如html<br>此為段落型程式碼<br>``` <span class="hljs-comment"># 使用兩塊 ``` 包起來</span><br><br><br><br></code></pre></td></tr></table></figure><h1 id="部屬到線上"><a href="#部屬到線上" class="headerlink" title="部屬到線上"></a>部屬到線上</h1><ol><li>編譯 blog 專案，編譯完會出現一個public 目錄</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><ol start="2"><li>只要將生成的public 資料夾，移動到任意web server 裡面，就能夠運行起來</li></ol><h1 id="部屬到github"><a href="#部屬到github" class="headerlink" title="部屬到github"></a>部屬到github</h1><h1 id="調整themes"><a href="#調整themes" class="headerlink" title="調整themes"></a>調整themes</h1><p>到網路上搜尋喜歡的主題，按照指示操作，通常都會是以下步驟</p><ol><li><p>到github 下載該主題的原始碼，下載成zip檔較好操作</p></li><li><p>將壓縮檔解壓縮，裡面的檔案放入blog 專案中 themes 目錄，並將名稱改為<code>$&#123;主題指定的名稱&#125;</code></p></li><li><p>有時會要求額外下載套件</p></li><li><p>到blog 專案根目錄的<font color=#FF2D2D><code>_config.yml</code></font>，將<code>theme</code>屬性修改為<code>$&#123;主題指定的名稱&#125;</code></p></li></ol><h2 id="實際調整範例"><a href="#實際調整範例" class="headerlink" title="實際調整範例"></a>實際調整範例</h2><p>後來看了 <a href="https://ithelp.ithome.com.tw/articles/10242172">【Day 7】如何更換 Hexo 主題</a> 的文章，決定使用<br><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev&#x2F;hexo-theme-fluid</a> 的主題，安裝文檔及修改配置的文檔都寫得很清楚。</p><p>以下是使用文檔提供的下載方式二，<br>下載 <code>最新 release 版本</code> 解壓到 <code>themes</code> 目錄，並將解壓出的文件夾重命名為 <code>fluid</code>。</p><ol><li><p>依照上面步驟建立好blog 專案</p></li><li><p>下載 <code>最新 release 版本</code> 解壓到 <code>themes</code> 目錄，並將解壓出的文件夾重命名為 <code>fluid</code>。</p></li><li><p>修改blog 專案根目錄下<code>_config.yml</code> :</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">theme : fluid <span class="hljs-comment"># 指定主題</span><br><br>language: zh-TW <span class="hljs-comment"># 指定顯示語言</span><br></code></pre></td></tr></table></figure><ol start="4"><li>原先hexo官方是沒有關於頁的，本主題有所以需要自己添加</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>創建成功後，在blog 專案底下<code>/source/about/index.md</code>，添加<code>layout</code> 屬性。</p><p>修改後文件內容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: about<br>layout: about<br>---<br><br><span class="hljs-comment">#底下也可以寫一些內容</span><br></code></pre></td></tr></table></figure><ol start="5"><li>重新啟動後主題就會更換</li></ol><p>如果有一些配置需要更改可以<a href="https://hexo.fluid-dev.com/docs/guide/">查看此篇記錄</a></p><p>調整blog 主題配置可能一開始比較費勁，但相比於自己從零開始搞已經節省很多的時間了，也更可以專注在寫作上，感謝開發者的貢獻。<br>看到自己的blog 有美美的主題就更有動力寫作了! 希望大家寫作愉快。</p><h1 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h1><p><a href="https://www.youtube.com/watch?v=jOJI9ekTzK8">使用 Hexo 建構個人化部落格</a></p><p><a href="https://ithelp.ithome.com.tw/articles/10242172">如何更換 Hexo 主題</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
