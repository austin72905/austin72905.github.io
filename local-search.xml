<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL 常用語法整理</title>
    <link href="/2025/04/10/mysql-syntax-basic/"/>
    <url>/2025/04/10/mysql-syntax-basic/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-常用語法整理"><a href="#MySQL-常用語法整理" class="headerlink" title="MySQL 常用語法整理"></a>MySQL 常用語法整理</h1><p>以下範例以 <code>users</code> 資料表為例，欄位包含：<code>id</code>, <code>name</code>, <code>email</code>, <code>age</code>, <code>created_at</code>。</p><hr><h2 id="✅-插入資料（INSERT）"><a href="#✅-插入資料（INSERT）" class="headerlink" title="✅ 插入資料（INSERT）"></a>✅ 插入資料（INSERT）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (name, email, age)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;xiaoming@example.com&#x27;</span>, <span class="hljs-number">25</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="✅-查詢資料（SELECT）"><a href="#✅-查詢資料（SELECT）" class="headerlink" title="✅ 查詢資料（SELECT）"></a>✅ 查詢資料（SELECT）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users;<br></code></pre></td></tr></table></figure><h3 id="查詢特定欄位"><a href="#查詢特定欄位" class="headerlink" title="查詢特定欄位"></a>查詢特定欄位</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name, email <span class="hljs-keyword">FROM</span> users;<br></code></pre></td></tr></table></figure><hr><h2 id="✅-更新資料（UPDATE）"><a href="#✅-更新資料（UPDATE）" class="headerlink" title="✅ 更新資料（UPDATE）"></a>✅ 更新資料（UPDATE）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> users<br><span class="hljs-keyword">SET</span> age <span class="hljs-operator">=</span> <span class="hljs-number">26</span><br><span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;小明&#x27;</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="✅-刪除資料（DELETE）"><a href="#✅-刪除資料（DELETE）" class="headerlink" title="✅ 刪除資料（DELETE）"></a>✅ 刪除資料（DELETE）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> users<br><span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;小明&#x27;</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="✅-排序資料（ORDER-BY）"><a href="#✅-排序資料（ORDER-BY）" class="headerlink" title="✅ 排序資料（ORDER BY）"></a>✅ 排序資料（ORDER BY）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="✅-限制回傳筆數（LIMIT）"><a href="#✅-限制回傳筆數（LIMIT）" class="headerlink" title="✅ 限制回傳筆數（LIMIT）"></a>✅ 限制回傳筆數（LIMIT）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users<br>LIMIT <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="✅-結合條件-排序-LIMIT-1"><a href="#✅-結合條件-排序-LIMIT-1" class="headerlink" title="✅ 結合條件 + 排序 + LIMIT 1"></a>✅ 結合條件 + 排序 + LIMIT 1</h2><h3 id="取得年紀最大的使用者"><a href="#取得年紀最大的使用者" class="headerlink" title="取得年紀最大的使用者"></a>取得年紀最大的使用者</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="取得最新註冊的使用者（假設有-created-at-欄位）"><a href="#取得最新註冊的使用者（假設有-created-at-欄位）" class="headerlink" title="取得最新註冊的使用者（假設有 created_at 欄位）"></a>取得最新註冊的使用者（假設有 created_at 欄位）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> created_at <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><hr><h1 id="MySQL-批量插入與批量更新語法"><a href="#MySQL-批量插入與批量更新語法" class="headerlink" title="MySQL 批量插入與批量更新語法"></a>MySQL 批量插入與批量更新語法</h1><hr><h2 id="✅-批量插入（Bulk-Insert）"><a href="#✅-批量插入（Bulk-Insert）" class="headerlink" title="✅ 批量插入（Bulk Insert）"></a>✅ 批量插入（Bulk Insert）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (name, email, age)<br><span class="hljs-keyword">VALUES</span> <br>  (<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;xiaoming@example.com&#x27;</span>, <span class="hljs-number">25</span>),<br>  (<span class="hljs-string">&#x27;小華&#x27;</span>, <span class="hljs-string">&#x27;xiaohua@example.com&#x27;</span>, <span class="hljs-number">30</span>),<br>  (<span class="hljs-string">&#x27;小美&#x27;</span>, <span class="hljs-string">&#x27;xiaomei@example.com&#x27;</span>, <span class="hljs-number">22</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="✅-批量更新（Bulk-Update）方式一：使用-CASE-WHEN"><a href="#✅-批量更新（Bulk-Update）方式一：使用-CASE-WHEN" class="headerlink" title="✅ 批量更新（Bulk Update）方式一：使用 CASE WHEN"></a>✅ 批量更新（Bulk Update）方式一：使用 CASE WHEN</h2><blockquote><p>假設我們要依據 id 更新 age 欄位：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> users<br><span class="hljs-keyword">SET</span> age <span class="hljs-operator">=</span> <span class="hljs-keyword">CASE</span> id<br>  <span class="hljs-keyword">WHEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">26</span>            <span class="hljs-comment">-- 就是 set age = 26 where id = 1</span><br>  <span class="hljs-keyword">WHEN</span> <span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">31</span><br>  <span class="hljs-keyword">WHEN</span> <span class="hljs-number">3</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">23</span><br><span class="hljs-keyword">END</span><br><span class="hljs-keyword">WHERE</span> id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="✅-批量更新（Bulk-Update）方式二：JOIN-另一張臨時表"><a href="#✅-批量更新（Bulk-Update）方式二：JOIN-另一張臨時表" class="headerlink" title="✅ 批量更新（Bulk Update）方式二：JOIN 另一張臨時表"></a>✅ 批量更新（Bulk Update）方式二：JOIN 另一張臨時表</h2><blockquote><p>可用於複雜更新情境（例如來自另一張表的資料）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> users u<br><span class="hljs-keyword">JOIN</span> (<br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> id, <span class="hljs-number">26</span> <span class="hljs-keyword">AS</span> age<br>  <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-number">2</span>, <span class="hljs-number">31</span><br>  <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-number">3</span>, <span class="hljs-number">23</span><br>) tmp <span class="hljs-keyword">ON</span> u.id <span class="hljs-operator">=</span> tmp.id<br><span class="hljs-keyword">SET</span> u.age <span class="hljs-operator">=</span> tmp.age;<br></code></pre></td></tr></table></figure><hr><p>✅ 建議使用方式：</p><ul><li><strong>少量更新</strong> → 使用 <code>CASE WHEN</code></li><li><strong>大量更新且來自其他資料來源</strong> → 使用 <code>JOIN</code></li></ul><hr><h1 id="MySQL-常用聚合函數與日期函數"><a href="#MySQL-常用聚合函數與日期函數" class="headerlink" title="MySQL 常用聚合函數與日期函數"></a>MySQL 常用聚合函數與日期函數</h1><hr><h2 id="✅-聚合函數（Aggregate-Functions）"><a href="#✅-聚合函數（Aggregate-Functions）" class="headerlink" title="✅ 聚合函數（Aggregate Functions）"></a>✅ 聚合函數（Aggregate Functions）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 總筆數</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> users;<br><br><span class="hljs-comment">-- 某欄位不為 NULL 的筆數</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(email) <span class="hljs-keyword">FROM</span> users;<br><br><span class="hljs-comment">-- 總和</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(age) <span class="hljs-keyword">FROM</span> users;<br><br><span class="hljs-comment">-- 平均值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(age) <span class="hljs-keyword">FROM</span> users;<br><br><span class="hljs-comment">-- 最大值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(age) <span class="hljs-keyword">FROM</span> users;<br><br><span class="hljs-comment">-- 最小值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(age) <span class="hljs-keyword">FROM</span> users;<br><br><span class="hljs-comment">-- 分組統計（以性別分組計算平均年齡）</span><br><span class="hljs-keyword">SELECT</span> gender, <span class="hljs-built_in">AVG</span>(age)<br><span class="hljs-keyword">FROM</span> users<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> gender;<br></code></pre></td></tr></table></figure><hr><h2 id="✅-日期函數（Date-Functions）"><a href="#✅-日期函數（Date-Functions）" class="headerlink" title="✅ 日期函數（Date Functions）"></a>✅ 日期函數（Date Functions）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 取得今天日期</span><br><span class="hljs-keyword">SELECT</span> CURDATE();             <span class="hljs-comment">-- 2025-04-10</span><br><br><span class="hljs-comment">-- 取得現在日期與時間</span><br><span class="hljs-keyword">SELECT</span> NOW();                 <span class="hljs-comment">-- 2025-04-10 14:30:00</span><br><br><span class="hljs-comment">-- 只取時間</span><br><span class="hljs-keyword">SELECT</span> CURTIME();             <span class="hljs-comment">-- 14:30:00</span><br><br><span class="hljs-comment">-- 字串轉日期</span><br><span class="hljs-keyword">SELECT</span> STR_TO_DATE(<span class="hljs-string">&#x27;2025-04-10&#x27;</span>, <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>);<br><br><span class="hljs-comment">-- 日期加減</span><br><span class="hljs-keyword">SELECT</span> DATE_ADD(NOW(), <span class="hljs-type">INTERVAL</span> <span class="hljs-number">7</span> <span class="hljs-keyword">DAY</span>);      <span class="hljs-comment">-- 加7天</span><br><span class="hljs-keyword">SELECT</span> DATE_SUB(NOW(), <span class="hljs-type">INTERVAL</span> <span class="hljs-number">1</span> <span class="hljs-keyword">MONTH</span>);    <span class="hljs-comment">-- 減1個月</span><br><br><span class="hljs-comment">-- 擷取部分時間資訊</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(created_at) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">year</span>,<br>       <span class="hljs-keyword">MONTH</span>(created_at) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">month</span>,<br>       <span class="hljs-keyword">DAY</span>(created_at) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">day</span>,<br>       <span class="hljs-keyword">HOUR</span>(created_at) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">hour</span>,<br>       <span class="hljs-keyword">MINUTE</span>(created_at) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">minute</span><br><span class="hljs-keyword">FROM</span> users;<br><br><span class="hljs-comment">-- 格式化時間</span><br><span class="hljs-keyword">SELECT</span> DATE_FORMAT(created_at, <span class="hljs-string">&#x27;%Y/%m/%d %H:%i:%s&#x27;</span>) <span class="hljs-keyword">AS</span> formatted_time<br><span class="hljs-keyword">FROM</span> users;<br></code></pre></td></tr></table></figure><hr><h2 id="✅-結合範例：統計每月註冊人數"><a href="#✅-結合範例：統計每月註冊人數" class="headerlink" title="✅ 結合範例：統計每月註冊人數"></a>✅ 結合範例：統計每月註冊人數</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DATE_FORMAT(created_at, <span class="hljs-string">&#x27;%Y-%m&#x27;</span>) <span class="hljs-keyword">AS</span> register_month,<br>       <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> user_count<br><span class="hljs-keyword">FROM</span> users<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> register_month<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> register_month <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vi 常用快捷鍵</title>
    <link href="/2025/04/10/linux-vi/"/>
    <url>/2025/04/10/linux-vi/</url>
    
    <content type="html"><![CDATA[<h1 id="📜-vi-常用快捷鍵整理"><a href="#📜-vi-常用快捷鍵整理" class="headerlink" title="📜 vi 常用快捷鍵整理"></a>📜 vi 常用快捷鍵整理</h1><h2 id="🔍-搜尋相關"><a href="#🔍-搜尋相關" class="headerlink" title="🔍 搜尋相關"></a>🔍 搜尋相關</h2><table><thead><tr><th>功能</th><th>快捷鍵 &#x2F; 指令</th><th>說明</th></tr></thead><tbody><tr><td>向下搜尋</td><td><code>/關鍵字</code></td><td>搜尋字串往下尋找</td></tr><tr><td>向上搜尋</td><td><code>?關鍵字</code></td><td>搜尋字串往上尋找</td></tr><tr><td>下一個搜尋結果</td><td><code>n</code></td><td>同方向的下一個搜尋結果</td></tr><tr><td>上一個搜尋結果</td><td><code>N</code></td><td>反方向的搜尋結果</td></tr><tr><td>啟用搜尋高亮</td><td><code>:set hlsearch</code></td><td>高亮顯示所有搜尋結果</td></tr><tr><td>清除搜尋高亮</td><td><code>:nohlsearch</code></td><td>移除搜尋結果的高亮顯示</td></tr></tbody></table><hr><h2 id="📦-移動"><a href="#📦-移動" class="headerlink" title="📦 移動"></a>📦 移動</h2><table><thead><tr><th>功能</th><th>快捷鍵 &#x2F; 指令</th><th>說明</th></tr></thead><tbody><tr><td>移動到檔案最上面</td><td><code>gg</code></td><td>移動到檔案的第一行</td></tr><tr><td>移動到檔案最下面</td><td><code>G</code></td><td>移動到檔案的最後一行</td></tr><tr><td>移動到指定行</td><td><code>:行號</code></td><td>例如 <code>:10</code> 跳到第 10 行</td></tr><tr><td>行首</td><td><code>0</code> 或 <code>^</code></td><td><code>0</code>：行首，<code>^</code>：首個非空字元</td></tr><tr><td>行尾</td><td><code>$</code></td><td>跳到目前行的最後字元</td></tr><tr><td>向後一頁</td><td><code>Ctrl + f</code></td><td>向後翻一整頁（forward）</td></tr><tr><td>向前一頁</td><td><code>Ctrl + b</code></td><td>向前翻一整頁（backward）</td></tr><tr><td>向下半頁</td><td><code>Ctrl + d</code></td><td>向下移動半頁（down）</td></tr><tr><td>向上半頁</td><td><code>Ctrl + u</code></td><td>向上移動半頁（up）</td></tr></tbody></table><hr><h2 id="📝-編輯操作"><a href="#📝-編輯操作" class="headerlink" title="📝 編輯操作"></a>📝 編輯操作</h2><table><thead><tr><th>功能</th><th>快捷鍵 &#x2F; 指令</th><th>說明</th></tr></thead><tbody><tr><td>插入模式</td><td><code>i</code></td><td>在游標前插入</td></tr><tr><td>行首插入</td><td><code>I</code></td><td>在目前行開頭插入</td></tr><tr><td>附加模式</td><td><code>a</code></td><td>在游標後插入</td></tr><tr><td>行尾附加</td><td><code>A</code></td><td>在目前行結尾插入</td></tr><tr><td>下方插入新行</td><td><code>o</code></td><td>在下一行插入新行並進入插入模式</td></tr><tr><td>上方插入新行</td><td><code>O</code></td><td>在上一行插入新行並進入插入模式</td></tr><tr><td>刪除游標字元</td><td><code>x</code></td><td>刪除目前游標所在的字元</td></tr><tr><td>刪除整行</td><td><code>dd</code></td><td></td></tr><tr><td>複製整行</td><td><code>yy</code></td><td></td></tr><tr><td>貼上</td><td><code>p</code></td><td>在游標後貼上複製的內容</td></tr><tr><td>替換一個字元</td><td><code>r</code> + <code>字元</code></td><td>取代游標所在字元為指定字元</td></tr><tr><td>持續取代</td><td><code>R</code></td><td>連續取代直到按 <code>Esc</code> 為止</td></tr></tbody></table><hr><h2 id="🏷️-標記（Mark）與跳轉"><a href="#🏷️-標記（Mark）與跳轉" class="headerlink" title="🏷️ 標記（Mark）與跳轉"></a>🏷️ 標記（Mark）與跳轉</h2><table><thead><tr><th>功能</th><th>快捷鍵 &#x2F; 指令</th><th>說明</th></tr></thead><tbody><tr><td>設定標記</td><td><code>m[a-z]</code></td><td>例如 <code>ma</code> 在當前位置設 a 標記</td></tr><tr><td>跳到標記行</td><td><code>&#39;a</code></td><td>跳到標記 a 所在行</td></tr><tr><td>跳到精確標記</td><td><code>`a</code></td><td>跳到標記 a 精確位置（字元級）</td></tr></tbody></table><hr><h2 id="💾-儲存與離開"><a href="#💾-儲存與離開" class="headerlink" title="💾 儲存與離開"></a>💾 儲存與離開</h2><table><thead><tr><th>功能</th><th>快捷鍵 &#x2F; 指令</th><th>說明</th></tr></thead><tbody><tr><td>儲存</td><td><code>:w</code></td><td>將變更寫入檔案</td></tr><tr><td>離開</td><td><code>:q</code></td><td>離開（若未儲存會警告）</td></tr><tr><td>儲存並離開</td><td><code>:wq</code> 或 <code>ZZ</code></td><td>儲存並離開 vi</td></tr><tr><td>強制離開不儲存</td><td><code>:q!</code></td><td>忽略變更直接離開</td></tr><tr><td>另存為新檔</td><td><code>:w 新檔名</code></td><td>將檔案另存為指定檔名</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Liunx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>文本處理</tag>
      
      <tag>vi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/09/hello-world/"/>
    <url>/2025/04/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>cursor 介紹</title>
    <link href="/2025/03/17/cursor/"/>
    <url>/2025/03/17/cursor/</url>
    
    <content type="html"><![CDATA[<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><strong><a href="https://www.youtube.com/watch?v=lypPoT8lZ2M">普通人也可以看的 AI 编程指南 | Cursor 教程｜Cursor 使用技巧和思路｜如何免费使用 Cursor</a></strong></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此文章是以上參考資料中的影片的內容整理，完整操作可以去查看影片，目前最新版cursor 已經取消或新增部分功能，文章中有說明</p><h1 id="Cursor-的核心功能"><a href="#Cursor-的核心功能" class="headerlink" title="Cursor 的核心功能"></a><strong>Cursor 的核心功能</strong></h1><ul><li><p>tab鍵自動補全代碼</p></li><li><p>模型選擇</p><ul><li>建議使用的模型包括 gpt-4o 和 Claude 3.5 Sonnet，前者適合綜合領域的問答理解，後者在程式碼生成領域更優秀</li></ul></li><li><p>Ask v.s. Agent v.s  Edit</p></li><li><p><strong>使用 @ 符號喚醒功能菜單</strong></p></li><li><p>codebase</p></li><li><p><strong>Cursor Rules (全域與專案規則)</strong></p><ul><li><code>.cursorrules</code></li></ul></li><li><p><strong>Cursor 的使用技巧和思路</strong></p></li><li><p>其他功能</p><ul><li>生成git message</li></ul></li><li><p>如何白嫖</p></li></ul><hr><h2 id="Ask-v-s-Agent-v-s-Edit"><a href="#Ask-v-s-Agent-v-s-Edit" class="headerlink" title="Ask v.s. Agent v.s  Edit"></a>Ask v.s. Agent v.s  Edit</h2><h3 id="Ask-模式（當前模式）-ctrl-l"><a href="#Ask-模式（當前模式）-ctrl-l" class="headerlink" title="Ask 模式（當前模式） ctrl + l"></a>Ask 模式（當前模式） <code>ctrl + l</code></h3><p><strong>特點</strong>：</p><ul><li><p>只能看到您明確提供的代碼或信息</p></li><li><p>無法主動搜索您的代碼庫</p></li><li><p>回答更快速直接</p></li><li><p>適合一般性的編程問題</p></li></ul><p><strong>適用場景</strong>：</p><ul><li><p>通用編程概念解釋</p></li><li><p>代碼語法問題</p></li><li><p>簡單的代碼示例</p></li><li><p>Vue、React 等框架的一般使用方法</p></li><li><p>算法解釋</p></li><li><p>設計模式討論</p></li></ul><hr><h3 id="Agent-模式-ctrl-i"><a href="#Agent-模式-ctrl-i" class="headerlink" title="Agent 模式  ctrl + i"></a>Agent 模式  <code>ctrl + i</code></h3><p><strong>特點</strong>：</p><ul><li><p>可以主動搜索和讀取您的整個代碼庫</p></li><li><p>能夠理解項目上下文</p></li><li><p>處理時間相對較長</p></li><li><p>可以提供更具體的項目相關建議</p></li></ul><p><strong>適用場景</strong>：</p><ul><li><p>需要了解項目特定實現的問題</p></li><li><p>代碼重構建議</p></li><li><p>項目架構相關問題</p></li><li><p>特定文件或組件的修改</p></li><li><p>項目依賴關係的問題</p></li><li><p>需要跨文件分析的問題</p></li></ul><hr><h3 id="Edit-模式"><a href="#Edit-模式" class="headerlink" title="Edit 模式"></a>Edit 模式</h3><p><strong>特點</strong>：</p><ul><li><p>可以直接對代碼進行修改</p></li><li><p>提供具體的代碼更改建議</p></li><li><p>支持批量修改</p></li></ul><p><strong>使用場景</strong>：</p><ul><li><p>直接修改代碼</p></li><li><p>重構代碼</p></li><li><p>添加新功能</p></li></ul><h3 id="選擇建議："><a href="#選擇建議：" class="headerlink" title="選擇建議："></a>選擇建議：</h3><p><strong>使用 Ask 模式當：</strong></p><ul><li><p>問題是通用的編程概念</p></li><li><p>不需要了解項目具體實現</p></li><li><p>需要快速的回答</p></li><li><p>問題範圍明確且獨立</p></li></ul><p><strong>使用 Agent 模式當：</strong></p><ul><li><p>需要了解項目具體實現</p></li><li><p>問題涉及多個文件或組件</p></li><li><p>需要基於現有代碼進行修改或優化</p></li><li><p>需要項目級別的建議</p></li></ul><p><strong>使用 Edit 模式當</strong>：</p><ul><li><p>需要直接修改代碼</p></li><li><p>需要代碼重構</p></li><li><p>需要批量修改</p></li></ul><h3 id="實際例子："><a href="#實際例子：" class="headerlink" title="實際例子："></a>實際例子：</h3><p>Ask 模式適合的問題：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>- <span class="hljs-string">&quot;Vue 3 的 ref 和 reactive 有什麼區別？&quot;</span><br><br>- <span class="hljs-string">&quot;如何實現一個簡單的防抖函數？&quot;</span><br><br>- <span class="hljs-string">&quot;Vue 組件生命週期有哪些？&quot;</span><br></code></pre></td></tr></table></figure><p>Agent 模式適合的問題：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">- <span class="hljs-string">&quot;我的項目中 UserService 在哪些地方被使用了？&quot;</span><br><br>- <span class="hljs-string">&quot;如何優化當前項目的性能？&quot;</span><br><br>- <span class="hljs-string">&quot;這個組件如何與其他組件交互？&quot;</span><br></code></pre></td></tr></table></figure><p>Edit 模式適合的問題：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">- <span class="hljs-string">&quot;將這個函數改為 async/await&quot;</span><br><br>  - <span class="hljs-string">&quot;添加錯誤處理&quot;</span><br><br>  - <span class="hljs-string">&quot;重構這段代碼&quot;</span><br></code></pre></td></tr></table></figure><p>總的來說，如果您的問題是關於具體項目實現或需要了解代碼庫上下文，建議使用 Agent 模式；如果是通用的編程問題，使用 Ask 模式就足夠了; 修改代碼用Edit模式。</p><hr><h2 id="使用-符號喚醒功能菜單"><a href="#使用-符號喚醒功能菜單" class="headerlink" title="使用 @ 符號喚醒功能菜單"></a><strong>使用 @ 符號喚醒功能菜單</strong></h2><p>15:20開始</p><ul><li><p><strong><code>@files &amp; folders</code></strong> ：引用一個文件夾或資料夾</p><ul><li>files 跟 folders 整合在一起了，點進去可以選擇要當作上下文的文件或目錄</li></ul></li><li><p><strong><code>@code</code></strong> ：選中一塊程式碼 當作上下文</p><ul><li>直接全選一個代碼塊，<code>ctrl + l</code> 比較快</li></ul></li><li><p><strong><code>@docs</code></strong> ：選擇第三方文檔 (Cursor 默認帶有一些，帶有Official就是)</p><ul><li><p>也可以自訂義文檔@docs (自定義文檔)：可以添加自定義的文檔鏈接，Cursor 會自動抓取內容並編入索引，方便在聊天中引用. 這相當於一個基於專案的知識庫</p></li><li><p>例如引入<strong>需求文檔、接口文檔</strong>…</p></li><li><p>可以在設置 <code>(Futures -&gt; Docs)</code> 中添加和管理自定義文檔鏈接</p><ul><li>如果添加文檔鏈接時在 URL 後面帶有斜槓 &#x2F;，Cursor 會鎖定該鏈接及其所有子頁面和子目錄</li></ul></li></ul></li><li><p><strong><code>@link</code></strong> ：臨時引用一個鏈接，AI 會先解析鏈接內容再結合輸入的提示詞進行回覆</p></li><li><p><strong><code>@web</code></strong> ：讓 AI 根據提供的資訊和上下文構建搜索查詢，搜索網絡上的相關資訊作為附加上下文進行回覆，相當於一個 <strong>AI 搜索引擎</strong></p></li><li><p><strong><code>@git</code><strong>：選擇歷史提交，將某一次或多次提交添加到輸入框中作為上下文，方便查看提交的修改或</strong>對比多次提交的差異</strong></p></li></ul><hr><h2 id="Notepad-已取消此功能"><a href="#Notepad-已取消此功能" class="headerlink" title="Notepad (已取消此功能)"></a><del>Notepad</del> (已取消此功能)</h2><ul><li>@notepad：打開記事本功能，可以作為臨時筆記記錄、專案相關的上下文記錄或保存 AI 的對話歷史記錄</li></ul><p>Cursor 最近的更新中確實移除了內建的 Notepad 功能。</p><p>這個改變主要是因為：</p><ol><li><p>大多數用戶更傾向於直接在主編輯器中工作</p></li><li><p>為了簡化界面和提升性能</p></li></ol><h3 id="替代方案："><a href="#替代方案：" class="headerlink" title="替代方案："></a>替代方案：</h3><ol><li><p>直接在 Cursor 主編輯器中創建新文件</p></li><li><p>使用系統的記事本</p></li><li><p>使用其他文本編輯器（如 VS Code、Sublime Text 等）</p></li><li><p>在 Cursor 中創建臨時文件（.txt）進行簡單的文本編輯</p></li></ol><p>如果您經常需要做臨時筆記，建議：</p><ul><li><p>在項目中創建一個專門的 <a href="notes.md">notes.md</a> 或 temp.txt 文件</p></li><li><p>使用獨立的筆記軟件（如 Notion、OneNote 等）</p></li><li><p>使用系統自帶的記事本</p></li></ul><hr><h2 id="codebase"><a href="#codebase" class="headerlink" title="codebase"></a>codebase</h2><p>21:52</p><ul><li><strong><code>@codebase</code></strong></li></ul><p>輸入 @codebase 後，AI 會根據給出的指令對採集的專案程式碼進行排序、推理，然後給出最匹配的答案</p><ul><li><p>使用 @codebase 時，Cursor 會執行四個步驟：收集 (掃描專案相關文件或程式碼塊) -&gt; 重新排序 (根據與查詢的相關性對上下文進行排序) -&gt; 推理 (思考如何利用上下文) -&gt; 生成 (給出回覆)</p></li><li><p>首次打開新專案時，Cursor 會自動採集專案程式碼</p></li><li><p>為了確保採集完整，建議每次打開新專案時，在<code>設置 (Futures -&gt; Codebase Indexing)</code> 中點擊 Reset Index 重新採集</p></li><li><p><strong>Codebase Indexing 的原理</strong>：將本地程式碼庫分割成小塊語言數據，發送到 Cursor 的伺服器，Cursor 使用 OpenAI Embedding API 進行嵌入，並將文件相對路徑存儲到遠程的向量數據庫中，利用索引提高回覆質量</p></li><li><p>Cursor 尊重 .gitignore 文件，其中聲明的文件或目錄不會被索引</p></li><li><p>可以創建 <code>.cursorignore</code> 文件來聲明需要忽略的文件或目錄，以++縮小索引範圍++，提高程式碼生成和理解的準確性</p></li><li><p>不應被索引的文件類型包括</p><ol><li><p>日誌文件</p></li><li><p>++環境變量++文件 (如果有機密資訊擔心的話就把它設置在<code>.cursorignore</code>)</p></li><li><p>構建輸出的文件</p></li><li><p>緩存文件</p></li><li><p>第三方工具的配置文件等</p></li></ol></li><li><p>新手可以使用 Composer 讓 AI 檢索整個專案目錄並生成 .cursorignore 文件</p></li></ul><hr><h2 id="Cursor-Rules-全域與專案規則"><a href="#Cursor-Rules-全域與專案規則" class="headerlink" title="Cursor Rules (全域與專案規則)"></a><strong>Cursor Rules (全域與專案規則)</strong></h2><p>25:09 </p><ul><li><p><strong>全域規則</strong>：在設置 (Rules AI) 中可以配置 Cursor 的全域規則，例如設置 AI 回覆的語言</p></li><li><p><strong>專案規則 (<code>.cursorrules</code>)</strong> ：可以在專案的根目錄創建 .cursorrules 文件，用於設置只針對該專案的 Cursor 規則</p></li><li><p>每次與 AI 交流時，Cursor 會參考 <code>.cursorrules</code> 中的規則</p></li><li><p>如果不知道如何編寫 .cursorrules 文件，可以在 Chat 模式中使用 @ 符號引用專案文檔等，然後讓 AI 檢索整個專案並生成 <code>.cursorrules</code> 文件，之後再根據需要進行修改</p></li><li><p>可以在 <code>.cursorrules</code> 文件的第一行寫上 使用中文回覆，這樣 AI 在該專案中回覆時都會以中文進行</p></li></ul><p>可以在 <strong><code>.cursorrules</code></strong> 裡面寫入</p><ul><li><p>項目簡介</p></li><li><p>使用那些技術 (typescript、tailwind.css、vue3…)</p></li><li><p>目錄架構</p></li><li><p>組件規範</p></li><li><p>樣式規範</p></li><li><p>命名規範</p></li></ul><p>有點像是cursor 的前置 prompt</p><hr><h2 id="Cursor-的使用技巧和思路"><a href="#Cursor-的使用技巧和思路" class="headerlink" title="Cursor 的使用技巧和思路"></a><strong>Cursor 的使用技巧和思路</strong></h2><p>26:08</p><ul><li><p><strong>回滾 (Undo) 功能</strong></p><ul><li><p>Cursor 會為每次 Composer 的問答都做一個 restore checkpoint 標記</p></li><li><p>但如果該次修改是新創建檔案，回退效果無效</p></li></ul></li></ul><h2 id="如何提高AI回復準確性"><a href="#如何提高AI回復準確性" class="headerlink" title="如何提高AI回復準確性?"></a><strong>如何提高AI回復準確性?</strong></h2><p>29:25</p><ul><li><p><strong>AI 複述需求指令</strong>：在給出 AI 指令時，先讓 AI 複述一遍需求再進行回覆，以便確認 AI 是否準確理解</p></li><li><p><strong>明確需求輻射範圍</strong>：指令要盡可能小且單一化，明確指令的範圍，最好攜帶相關的程式碼或文件，告知 AI 在什麼範圍內進行修改<strong>，</strong> 可以利用 Cursor 輸入框內置的各種 @ 功能來輔助</p></li><li><p><strong>需求拆解</strong>：如果需求較大，可以將其拆解成多個小步驟，或者在一次問答中以條列式的方式清晰描述</p></li><li><p><strong>將 AI 當成小孩子</strong>：與 AI 溝通時要邏輯清晰，描述問題時要加以引導，可以一併發送自己的解決思路或參考資料</p></li></ul><hr><h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><p>40:51</p><ul><li><strong>Git Commit Message 自動生成</strong>：如果專案使用了 Git，在修改程式碼並暫存後，Cursor 可以為暫存的文件一鍵生成更有意義的 Commit Message，它會分析當前的更改和以前提交的信息，遵循相同的提交規範</li></ul><hr><h2 id="如何白嫖"><a href="#如何白嫖" class="headerlink" title="如何白嫖"></a>如何白嫖</h2><p>41:56 </p><p>這部分我沒有實踐過，只是做個紀錄</p><ul><li><p>由於 Cursor 註冊後有 14 天的免費試用期，可以每 14 天使用一個新的郵箱賬號註冊 Cursor</p></li><li><p><strong>臨時郵箱</strong>：使用臨時郵箱平台提供的隨機郵箱來註冊 Cursor，用於接收驗證碼</p></li><li><p><strong>無限郵箱</strong>：在無限郵箱平台註冊一個主郵箱，然後可以使用主郵箱名稱後加不同字符的方式創建多個子郵箱來註冊 Cursor</p></li><li><p><strong>規避設備指紋檢測</strong>：由於過多的人「白嫖」，Cursor 更新了用戶指紋檢測機制，同一設備使用免費賬號登錄太多次可能會被限制使用</p></li><li><p>可以使用腳本更新 Cursor 配置文檔中的用戶指紋信息來規避這個問題</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Docker 安裝 MySQL</title>
    <link href="/2024/01/18/mysql-docker/"/>
    <url>/2024/01/18/mysql-docker/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文介紹使用 Docker 安裝 MySQL，Docker 是安裝在本機 wsl 裡面，docker 安裝過程就不贅述。</p><h1 id="確認wsl-中-Docker-是否有開啟"><a href="#確認wsl-中-Docker-是否有開啟" class="headerlink" title="確認wsl 中 Docker 是否有開啟"></a>確認wsl 中 Docker 是否有開啟</h1><p><code>service docker status</code></p><p>啟動docker<br><code>service docker start</code></p><h1 id="拉取MySQL-映像"><a href="#拉取MySQL-映像" class="headerlink" title="拉取MySQL 映像"></a>拉取MySQL 映像</h1><p><code>docker pull mysql:8</code></p><h1 id="檢查-image-是否有下載成功"><a href="#檢查-image-是否有下載成功" class="headerlink" title="檢查 image 是否有下載成功"></a>檢查 image 是否有下載成功</h1><p><code>docker images</code></p><h1 id="運行-MySQL-容器"><a href="#運行-MySQL-容器" class="headerlink" title="運行 MySQL 容器"></a>運行 MySQL 容器</h1><p><code>docker run --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=YourRootPassword -d mysql:8</code></p><ul><li><code>--name mysql-test</code> : 指定容器為 mysql-test</li><li><code>-p 3306:3306</code>(host port:container port)  : 將主機的 3306 端口映射到容器的 3306 端口，mysql 預設啟動時是跑3306 port，設定此port 比較省事</li><li><code>-e MYSQL_ROOT_PASSWORD=YourRootPassword</code> : 初始化 root 用戶的密碼為 YourRootPassword。</li><li><code>-d mysql:8</code> : 背景執行 MySQL 映像</li></ul><h1 id="檢查運行中的容器"><a href="#檢查運行中的容器" class="headerlink" title="檢查運行中的容器"></a>檢查運行中的容器</h1><p><code>docker ps</code></p><h1 id="進入容器"><a href="#進入容器" class="headerlink" title="進入容器"></a>進入容器</h1><p><code>docker exec -it mysql-test bash</code></p><h1 id="進入容器後，登陸MySQL"><a href="#進入容器後，登陸MySQL" class="headerlink" title="進入容器後，登陸MySQL"></a>進入容器後，登陸MySQL</h1><p><code>mysql -u root -p</code></p><h1 id="在wsl-中開啟兩個docker-container-MySQL"><a href="#在wsl-中開啟兩個docker-container-MySQL" class="headerlink" title="在wsl 中開啟兩個docker container ( MySQL)"></a>在wsl 中開啟兩個docker container ( MySQL)</h1><p>有時候需要會同時需要開啟多個mysql，最簡單的方式就是容器映射不同的port</p><h2 id="方法1-調整容器的port"><a href="#方法1-調整容器的port" class="headerlink" title="方法1 (調整容器的port)"></a>方法1 (調整容器的port)</h2><p>容器1<br><code>docker run --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=YourRootPassword -d mysql:8</code></p><p>容器2 (將容器內3306 port 映射到主機 3307port)<br><code>docker run --name mysql-test -p 3307:3306 -e MYSQL_ROOT_PASSWORD=YourRootPassword -d mysql:8</code></p><p>最省事，也不用修改啥配置文件</p><h2 id="方法2-調整mysql-配置文件"><a href="#方法2-調整mysql-配置文件" class="headerlink" title="方法2 (調整mysql 配置文件)"></a>方法2 (調整mysql 配置文件)</h2><p>詳見<code>MySQL修改配置文件</code>內容</p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>每個語句後面要用 <code>;</code> 結尾，不然 MySQL 會以為你還沒輸入完，出現 <code>-&gt;</code> 記號</p><h2 id="修改root-密碼"><a href="#修改root-密碼" class="headerlink" title="修改root 密碼"></a>修改root 密碼</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;yourNewPassword&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>localhost 代表允許從哪個主機遠端連線，也可以設置為 <code>%</code>， 代表允許從任何主機遠端連線</li></ul><h2 id="添加用戶"><a href="#添加用戶" class="headerlink" title="添加用戶"></a>添加用戶</h2><p>遠端連線時，不要使用root 用戶比較好，因此額外新增一個用戶</p><p>設定用戶時可以指定用戶使用語句的權限(SELECT、INSERT…)</p><p>以及對那些表有訪問的權限</p><h2 id="建立用戶"><a href="#建立用戶" class="headerlink" title="建立用戶"></a>建立用戶</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;your_user_name&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;your_password&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li><code>your_username</code> 為你要創建的用戶名</li><li><code>your_password</code> 為你要設置的密碼</li></ul><h2 id="給予用戶權限"><a href="#給予用戶權限" class="headerlink" title="給予用戶權限"></a>給予用戶權限</h2><h3 id="給予所有權限"><a href="#給予所有權限" class="headerlink" title="給予所有權限"></a>給予所有權限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;your_user_name&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="指給予某個權限"><a href="#指給予某個權限" class="headerlink" title="指給予某個權限"></a>指給予某個權限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> tableName.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;your_username&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>GRANT SELECT： 表示要給予使用者 SELECT 權限。</li><li>ON transaction.*： 表示你要將許可權應用到 transaction 資料庫的所有表。 * 表示所有表。</li><li>TO ‘your_username‘@’%’： 指定了使用者和來源主機。 ‘your_username’ 是你要授予許可權的使用者名，’%’ 表示允許從任何主機遠端登錄。<br>這樣，使用者 『your_username』 將只有在 transaction 資料庫的所有表上執行 SELECT 操作的許可權。</li></ul><h2 id="建立資料庫"><a href="#建立資料庫" class="headerlink" title="建立資料庫"></a>建立資料庫</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> database yourDbName;<br></code></pre></td></tr></table></figure><p>顯示資料庫</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure><p>選擇資料庫</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">use yourDbName;<br></code></pre></td></tr></table></figure><h2 id="建立資料表"><a href="#建立資料表" class="headerlink" title="建立資料表"></a>建立資料表</h2><p>看語意就知道如果資料表存在就刪除，確定要刪除才執行，否則後果很嚴重</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> tableName;<br></code></pre></td></tr></table></figure><p>建立新的資料表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tableName (<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    name nvarchar(<span class="hljs-number">30</span>),<br>    version nvarchar(<span class="hljs-number">30</span>),<br>    remark nvarchar(<span class="hljs-number">30</span>)<br>);<br></code></pre></td></tr></table></figure><h2 id="插入資料"><a href="#插入資料" class="headerlink" title="插入資料"></a>插入資料</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tableName(name,version,remark) <span class="hljs-keyword">values</span><br>(<span class="hljs-string">&#x27;sisi&#x27;</span>,<span class="hljs-string">&#x27;1.05&#x27;</span>,<span class="hljs-string">&#x27;cool man&#x27;</span>)<br>(<span class="hljs-string">&#x27;coco&#x27;</span>,<span class="hljs-string">&#x27;0.7&#x27;</span>,<span class="hljs-string">&#x27;poor guy&#x27;</span>);<br></code></pre></td></tr></table></figure><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><p>一般來說不需要，除非有例如更換服務port的需求</p><p>進入配置文件的目錄<br><code>cd /etc/mysql/conf.d</code></p><p>新增一個mysql.cnf<br><code>touch mysql.cnf</code></p><p>以下都要寫入</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysql]</span><br><span class="hljs-attr">port</span> = <span class="hljs-number">3307</span><br></code></pre></td></tr></table></figure><p>修改完配置重新啟動容器<br><code>docker reatart mysql-test</code></p><h2 id="離開MySQL"><a href="#離開MySQL" class="headerlink" title="離開MySQL"></a>離開MySQL</h2><p><code>quit</code> 或是 <code>exit</code> 都行</p><h1 id="連線"><a href="#連線" class="headerlink" title="連線"></a>連線</h1><p>從外部連線MySQL 需要連線字串，主機名因為MySQL 是安裝在wsl 的 Docker 裡面，只要在wsl 獲取ip後，就能透過連線字串連接</p><p>在wsl 終端<br><code>ifconfig</code></p><p>找到 <code>eth0</code> 字段的ip 值</p><p>例如ip為<br>172.27.119.190</p><p>連線字串<br><code>server=172.27.119.190;port=3306;user id=your-user-name;password=your-user-password;database=database-name;charset=utf8;</code></p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://ithelp.ithome.com.tw/articles/10272193">【Docker 攻略】MySQL 安裝篇 | 安裝資料庫 好快的說 !</a></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查詢 dns 常用指令 (nslookup、dig)</title>
    <link href="/2024/01/03/linux_dns_commands/"/>
    <url>/2024/01/03/linux_dns_commands/</url>
    
    <content type="html"><![CDATA[<h1 id="常用的-dns-服務器"><a href="#常用的-dns-服務器" class="headerlink" title="常用的 dns 服務器"></a>常用的 dns 服務器</h1><ul><li><p><code>8.8.8.8</code>：google 的 dns</p></li><li><p><code>1.1.1.1</code>：cloudfare 的 dns</p></li><li><p><code>180.76.76.76</code>：百度 的 dns</p></li></ul><h1 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h1><p>可以用來查詢dns相關訊息，在windows 上也能使用</p><h2 id="常用範例"><a href="#常用範例" class="headerlink" title="常用範例"></a>常用範例</h2><ul><li><p>指定dns服務器查詢</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nslookup www.youtube.com 8.8.8.8<br></code></pre></td></tr></table></figure></li><li><p>反查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nslookup 123.10.16.8<br></code></pre></td></tr></table></figure></li><li><p>指定查詢類型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nslookup -<span class="hljs-built_in">type</span>=mx www.youtube.com 8.8.8.8<br></code></pre></td></tr></table></figure></li></ul><h1 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h1><p>dig指令(domain information groper)，可以用來查詢域名的dns相關訊息</p><h2 id="語法說明"><a href="#語法說明" class="headerlink" title="語法說明"></a>語法說明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">dns 域名<br><br>dns @指定使用的dns服務器 域名<br><br>dig @指定的dns服務器 域名 查詢種類<br></code></pre></td></tr></table></figure><p>常用參數</p><ul><li><code>@dns服務器</code>：如<code>8.8.8.8</code>、<code>1.1.1.1</code>，如果沒有指定，預設會使用本地<code>/etc/resolv.conf</code> 配置的dns 服務器</li><li><code>+short</code>：簡短回應，只回應ip 或 域名</li><li><code>+trace</code>：顯示域名解析時，經過哪些節點</li><li><code>+recurse</code>：必要時進行遞歸查詢，而不是只返回緩存的結果</li><li><code>-x</code>：反向查詢，通常是輸入IP，可以查詢與之相關的域名</li><li><code>-p</code>：指定訪問dns服務器的port，當dns使用非53port時可用</li></ul><h2 id="查詢路徑"><a href="#查詢路徑" class="headerlink" title="查詢路徑"></a>查詢路徑</h2><p>作業系統會從網域的「最後段」一路反向查詢到「最前段」。例如，以網域 <a href="http://www.ntu.edu.tw/">www.ntu.edu.tw</a> 為例，首先會查詢負責回應 <strong><font color=#EB5757><code>tw</code></font></strong> 網域DNS記錄的主機為何，再接著查詢負責 <strong><font color=#EB5757><code>edu</code></font></strong> 網域的主機，而後是負責 <strong><font color=#EB5757><code>ntu</code></font></strong> 網域的主機。最後，再詢問負責 <strong><font color=#EB5757><code>ntu</code></font></strong> 網域的主機，網域名稱 <strong><font color=#EB5757><code>www</code></font></strong> 的主機 IP 為何。也</p><p>就是查詢路徑為：</p><p><strong>tw → edu → ntu → www</strong></p><h2 id="查詢種類"><a href="#查詢種類" class="headerlink" title="查詢種類"></a>查詢種類</h2><ul><li><code>A</code>：ipv4位置</li><li><code>AAAA</code>：ipv6位置</li><li><code>ns</code>：(Name Server) 網域名稱是哪台主機解析的</li><li><code>MX</code>：電子郵件</li></ul><h2 id="常用範例-1"><a href="#常用範例-1" class="headerlink" title="常用範例"></a>常用範例</h2><ul><li><p>查詢youtube 域名 指向的 ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dig www.youtube.com<br></code></pre></td></tr></table></figure></li><li><p>使用 google 的 dns 查詢 youtube 域名 指向的 ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dig @8.8.8.8 www.youtube.com<br></code></pre></td></tr></table></figure></li><li><p>詳細輸出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dig +trace @8.8.8.8  www.youtube.com<br></code></pre></td></tr></table></figure></li></ul><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://ithelp.ithome.com.tw/articles/10214466">[鐵人修煉_5]-利用DNS - dig</a><br><a href="http://mepopedia.com/forum/read.php?135,90293">DNS設定反查與偵錯：dig指令深入使用</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>dns</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 ssh 搭配 ngrok 將遠程檔案傳到本機</title>
    <link href="/2024/01/01/linux_ssh_advance1/"/>
    <url>/2024/01/01/linux_ssh_advance1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作上有台生產環境的VM是用Ubuntu環境，之前上面安裝的nginx出問題，想要下載日誌到本機分析，有想過可以用ssh連線到VM，但又不想在VM 上 額外開啟ssh port，增加管理上的麻煩，後來進一步對openssh了解，才知道openssh分成客戶端與服務端，又剛好接觸到wsl</p><p>因此想到<br><strong>可以將本機 wsl 當服務端，用 ngrok 暴露對外ip，VM當客戶端，使用scp指令將檔案傳到本機的wsl</strong>，就不用在線上環境開啟ssh port了</p><p>相關名次介紹可以參考我之前的文章</p><ul><li><p><code>ssh</code> <a href="/2023/12/21/linux-service-ssh/" title="Linux網路服務-ssh">Linux網路服務-ssh</a></p></li><li><p><code>scp</code> <a href="/2023/12/25/linux-service-scp/" title="Linux 遠端複製-scp">Linux 遠端複製-scp</a></p></li><li><p><code>wsl</code> <a href="/2023/12/16/wsl-install/" title="在win11上使用wsl2">在win11上使用wsl2</a></p></li></ul><h1 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h1><h2 id="使用ngrok-開啟ssh-port"><a href="#使用ngrok-開啟ssh-port" class="headerlink" title="使用ngrok 開啟ssh port"></a>使用ngrok 開啟ssh port</h2><p>本機的 ip 是不會暴露給外網的，需要透過其他的工具才能讓處在外網的VM連線到</p><p>可以使用<code>ngrok</code>， 這個工具可以把你本機的ip 暴露給外網，讓外網的人可以連線，如何安裝ngrok就不贅述</p><ol><li>在wsl宿主機上(非wsl環境)安裝ngrok</li></ol><p>安裝完後在wsl宿主機(非wsl環境)輸入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 依自己需求指定port</span><br>ngrok tcp 22<br></code></pre></td></tr></table></figure><p>接著會看到畫面出現類似</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tcp</span>://<span class="hljs-number">6</span>.tcp.ngrok.io:<span class="hljs-number">10211</span> -&gt; localhost:<span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p>此時外網可以透過 <code>6.tcp.ngrok.io</code> 的 <code>10211</code> port，連線到本機的 <code>22</code> port</p><p>wsl port 與 宿主機 是共用的，所以可以透過 本機的 22 port 直接連線到 wsl 22 port</p><h1 id="生產環境VM"><a href="#生產環境VM" class="headerlink" title="生產環境VM"></a>生產環境VM</h1><h2 id="產生公鑰-如果選擇輸入密碼連線則可跳過"><a href="#產生公鑰-如果選擇輸入密碼連線則可跳過" class="headerlink" title="產生公鑰 (如果選擇輸入密碼連線則可跳過)"></a>產生公鑰 (如果選擇輸入密碼連線則可跳過)</h2><p>VM 作為客戶端</p><p>使用<code>ssh-keygen</code>建立公私鑰，</p><p>會在<code>~/.ssh</code> 新增一對公私鑰</p><ul><li>id_rsa</li><li>id_rsa.pub (公鑰)</li></ul><h1 id="wsl"><a href="#wsl" class="headerlink" title="wsl"></a>wsl</h1><p>我使用的wsl 是 ubuntu 發行版，其他發行版指令可能略有不同</p><h2 id="開啟ssh-服務端"><a href="#開啟ssh-服務端" class="headerlink" title="開啟ssh 服務端"></a>開啟ssh 服務端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">service ssh start<br><br><span class="hljs-comment"># 或是 (依照發行版不同)</span><br><br>service sshd start<br></code></pre></td></tr></table></figure><p>如果還沒下載 <code>openssh</code> 服務端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install openssh-server<br></code></pre></td></tr></table></figure><h2 id="修改為ssh-連線時需輸入密碼-與配置公鑰擇一"><a href="#修改為ssh-連線時需輸入密碼-與配置公鑰擇一" class="headerlink" title="修改為ssh 連線時需輸入密碼 (與配置公鑰擇一)"></a>修改為ssh 連線時需輸入密碼 (與配置公鑰擇一)</h2><p>連線時採用配置公鑰可以跳過</p><p>wsl 預設 連線時不需要輸入密碼，如果想要修改，可以到 <code>/etc/ssh/sshd_config</code> 修改配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">PasswordAuthentication</span> : <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p>輸入完後，重新加載服務<br><code>service ssh restart</code></p><h2 id="修改為ssh-連線使用配置公鑰-與輸入密碼擇一"><a href="#修改為ssh-連線使用配置公鑰-與輸入密碼擇一" class="headerlink" title="修改為ssh 連線使用配置公鑰 (與輸入密碼擇一)"></a>修改為ssh 連線使用配置公鑰 (與輸入密碼擇一)</h2><p>採用連線時輸入密碼這步可以跳過</p><p>將 客戶端(也就是VM)的公鑰(<code>~/.ssh/id_rsa.pub</code>)內容貼到 wsl上的<code>~/.ssh/authorized_keys</code>，沒有此目錄跟文件，可以自行創立一個。</p><p>或者回到生產環境VM</p><p>輸入以下指令，將公鑰上傳到遠端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># port 跟 用戶、遠端域名 依自己的配置修改</span><br>ssh-copy-id -p 10221 austin72905@6.tcp.ngrok.io<br></code></pre></td></tr></table></figure><h2 id="scp-指令"><a href="#scp-指令" class="headerlink" title="scp 指令"></a>scp 指令</h2><p>回到生產環境VM</p><p>傳送檔案，假設有一個文件<code>test</code>，想要傳到遠端的<code>/home/austin72905</code>目錄</p><p>輸入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># port 跟 用戶、遠端域名 依自己的配置修改 (注意這裡指定port 是大寫&quot;P&quot;)</span><br>scp -P 10221 <span class="hljs-built_in">test</span> austin72905@6.tcp.ngrok.io:/home/austin72905<br></code></pre></td></tr></table></figure><p>就會看到文件傳送成功了</p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><ul><li>如果不透過wsl 的話 ，新版本windows 其實內建已經有 openssh，但需要額外設定防火牆的樣子，也可以自行去嘗試，我自己是搞很久都沒成功，索性用wsl 比較方便。</li><li>使用這個方式因為使用ngrok 暴露ip，每次開啟時ip都會不一樣，每次連線VM上的 <code>~/.ssh/know_hosts</code> 都會增加一筆，要定時去刪除。</li></ul><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://lostsea.cn/articles/2023/05/11/1683793910638.html">wsl中使用ngrok进行ssh连接</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 包管理工具-apt</title>
    <link href="/2023/12/26/linux-pk-mg-apt/"/>
    <url>/2023/12/26/linux-pk-mg-apt/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>apt 是 Debian 系發行版使用的軟體包管理工具，本質上就是去網路上包的網址，將包下載下來</p><h1 id="apt-與-apt-get-差異"><a href="#apt-與-apt-get-差異" class="headerlink" title="apt 與 apt-get 差異"></a>apt 與 apt-get 差異</h1><p>apt-get 是比較舊版本的軟體包管理工具，apt 是近年推出的，支援了一些原本apt-get 沒有的功能，對於處理複雜依賴的關係有加強過</p><p>主要差異</p><ul><li>apt upgrade 之後，舊版的套件會從系統刪除</li><li>apt-get upgrade 舊版的套件會保留</li></ul><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="列出所有安裝過的包-（apt-list）"><a href="#列出所有安裝過的包-（apt-list）" class="headerlink" title="列出所有安裝過的包 （apt list）"></a>列出所有安裝過的包 （apt list）</h2><p><code>apt list</code></p><p>通常可以搭配grep， 來查詢特定的包是否安裝過</p><p><code>apt list | grep &quot;nginx&quot;</code></p><h2 id="列出所有安裝過的包及詳細資訊-（apt-show）"><a href="#列出所有安裝過的包及詳細資訊-（apt-show）" class="headerlink" title="列出所有安裝過的包及詳細資訊 （apt show）"></a>列出所有安裝過的包及詳細資訊 （apt show）</h2><p><code>apt show</code></p><h2 id="更新包可安裝清單-（apt-update）"><a href="#更新包可安裝清單-（apt-update）" class="headerlink" title="更新包可安裝清單 （apt update）"></a>更新包可安裝清單 （apt update）</h2><p>只更新清單，但不會真的升級</p><p><code>apt update</code></p><h2 id="升級包-（apt-upgrade）"><a href="#升級包-（apt-upgrade）" class="headerlink" title="升級包 （apt upgrade）"></a>升級包 （apt upgrade）</h2><p><code>apt upgrade</code></p><h2 id="查詢包-（apt-search）"><a href="#查詢包-（apt-search）" class="headerlink" title="查詢包 （apt search）"></a>查詢包 （apt search）</h2><p>查詢那些包可以下載</p><p><code>apt search nginx</code></p><h2 id="安裝包-（apt-install）"><a href="#安裝包-（apt-install）" class="headerlink" title="安裝包 （apt install）"></a>安裝包 （apt install）</h2><p><code>apt install nginx</code></p><h2 id="刪除包-（apt-remove）"><a href="#刪除包-（apt-remove）" class="headerlink" title="刪除包 （apt remove）"></a>刪除包 （apt remove）</h2><p><code>apt remove nginx</code></p><h2 id="刪除包及設定檔-（apt-purge）"><a href="#刪除包及設定檔-（apt-purge）" class="headerlink" title="刪除包及設定檔 （apt purge）"></a>刪除包及設定檔 （apt purge）</h2><p><code>apt purge nginx</code><br>可以清得比較乾淨，但建議是先使用apt remove ，清的不夠乾淨再用purge</p><h2 id="配置檔-（-etc-apt-sources-list）"><a href="#配置檔-（-etc-apt-sources-list）" class="headerlink" title="配置檔 （/etc/apt/sources.list）"></a>配置檔 （<code>/etc/apt/sources.list</code>）</h2><p>可以配置每個包的網址，如果想要將第三方軟體也納入apt 管理，可以在此添加三方軟體的下載網址</p><h2 id="編輯配置檔-（apt-edit-sources）"><a href="#編輯配置檔-（apt-edit-sources）" class="headerlink" title="編輯配置檔 （apt edit-sources）"></a>編輯配置檔 （apt edit-sources）</h2><p>輸入<code>apt edit-sources</code>後，會開啟文字編輯器進入 <code>/etc/apt/sources.list</code> 編輯畫面</p><h2 id="moo"><a href="#moo" class="headerlink" title="moo"></a>moo</h2><p>彩蛋<br>輸入 <code>apt moo</code> 會有一隻牛出現在螢幕上</p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://www.tokfun.net/os/linux/install-remove-linux-software-using-apt-command/#%E9%80%8F%E9%81%8E%E3%80%8Capt_edit-sources%E3%80%8D%E6%8C%87%E4%BB%A4%E7%B7%A8%E8%BC%AF%E8%BB%9F%E9%AB%94%E5%BA%AB%E8%A8%AD%E5%AE%9A%E6%AA%94">[Linux] Ubuntu APT 指令更新、升級、移除、安裝套件教學</a></p><p><a href="https://zhuanlan.zhihu.com/p/350690109">[Linux]apt 和 apt-get 之间有什么区别？</a></p><p><a href="https://aws.amazon.com/tw/compare/the-difference-between-apt-and-apt-get/">apt 與 apt-get 之間有什麼區別？</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 遠端複製-scp</title>
    <link href="/2023/12/25/linux-service-scp/"/>
    <url>/2023/12/25/linux-service-scp/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用ssh 連線遠端時，總是有需要把遠端的文件複製到本地的需求，例如系統崩潰時，想要把日誌抓到本地分析研究，linux 中有個好用的指令 <code>scp</code> 可以做到這點。<br>scp 是基於 ssh 協議的檔案傳輸，預設為<code>22</code>port，可以將檔案從 <strong>服務器A</strong> 複製到 <strong>服務器B</strong>。</p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><h3 id="從本地複製文件到遠端-本地-rarr-遠端"><a href="#從本地複製文件到遠端-本地-rarr-遠端" class="headerlink" title="從本地複製文件到遠端 ( 本地 &rarr; 遠端 )"></a>從本地複製文件到遠端 ( 本地 &rarr; 遠端 )</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp 檔案名  遠端服務器IP:遠端服務器目錄<br><br><span class="hljs-comment"># 範例</span><br>scp filename.txt austin72905@192.168.56.x:/home/austin72905<br></code></pre></td></tr></table></figure><p>具體說明</p><ul><li><p>遠端服務器IP：格式為 用戶名@ip</p></li><li><p>遠端服務器目錄：複製的檔案要存到遠端服務器的哪個目錄</p></li></ul><h3 id="從遠端複製文件到本地-遠端-rarr-本地"><a href="#從遠端複製文件到本地-遠端-rarr-本地" class="headerlink" title="從遠端複製文件到本地 ( 遠端 &rarr; 本地 )"></a>從遠端複製文件到本地 ( 遠端 &rarr; 本地 )</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp 遠端服務器IP:檔案名 本地目錄/ <br><br><span class="hljs-comment"># 範例</span><br>scp austin72905@192.168.56.x:/home/austin72905/filename.txt  /home/myaccount/<br></code></pre></td></tr></table></figure><h2 id="參數"><a href="#參數" class="headerlink" title="參數"></a>參數</h2><ul><li><code>-r</code>：複製目錄時可用</li><li><code>-P</code>：啟用端口號，未指定預設為<code>port22</code></li><li><code>-C</code>：啟用壓縮</li><li><code>-i</code>：用於驗證身分的私鑰文件</li></ul><h1 id="使用範例"><a href="#使用範例" class="headerlink" title="使用範例"></a>使用範例</h1><h2 id="指定-port-號"><a href="#指定-port-號" class="headerlink" title="指定 port 號"></a>指定 port 號</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -P 2222 file.txt username@remote:/path/to/destination/<br></code></pre></td></tr></table></figure><h2 id="複製整個目錄"><a href="#複製整個目錄" class="headerlink" title="複製整個目錄"></a>複製整個目錄</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -r 目錄/ username@remote:/路徑/到/目的地/<br></code></pre></td></tr></table></figure><h2 id="指定驗證身分的私鑰文件"><a href="#指定驗證身分的私鑰文件" class="headerlink" title="指定驗證身分的私鑰文件"></a>指定驗證身分的私鑰文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -i /path/to/private_key.pem file.txt username@remote:/path/to/destination/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux網路服務-ssh</title>
    <link href="/2023/12/21/linux-service-ssh/"/>
    <url>/2023/12/21/linux-service-ssh/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ssh (Secure Shell)用於在計算機之間進行遠程通信的協議，與早期使用的telnet 以明文方式傳遞數據不同，ssh 在遠程通信時，傳輸的數據是經過加密的，有效防止信息外洩。</p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>ssh 協議有多個實現，像是windows 上常用的putty，或是非常多人使用的<code>OpenSSH</code>，今天介紹的就是<code>OpenSSH</code>的使用與配置方式</p><p><code>OpenSSH</code>分為了客戶端&#x2F;服務端，客戶端就是你本機，服務端就是你要連線的遠程主機，在 Linux 發行版都預設安裝了客戶端，服務端才需要另外下載</p><h2 id="查看是否安裝過"><a href="#查看是否安裝過" class="headerlink" title="查看是否安裝過"></a>查看是否安裝過</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 可以先用此指令檢查ssh 服務端是否已經安裝 </span><br>service ssh status<br><br><span class="hljs-comment"># 或是 (依照發行版不同)</span><br><br>service sshd status<br></code></pre></td></tr></table></figure><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安裝服務端</span><br>apt install openssh-server<br><br><span class="hljs-comment"># 安裝客戶端</span><br>apt install openssh-client<br></code></pre></td></tr></table></figure><h2 id="啟動-ssh-服務端"><a href="#啟動-ssh-服務端" class="headerlink" title="啟動 ssh 服務端"></a>啟動 ssh 服務端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">service ssh start<br><br><span class="hljs-comment"># 或是 (依照發行版不同)</span><br><br>service sshd start<br></code></pre></td></tr></table></figure><h2 id="連線遠端"><a href="#連線遠端" class="headerlink" title="連線遠端"></a>連線遠端</h2><h3 id="連線語法"><a href="#連線語法" class="headerlink" title="連線語法"></a>連線語法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh 用戶名@遠端服務器ip<br><br><span class="hljs-comment"># 範例</span><br>ssh austin72905@192.168.68.127<br></code></pre></td></tr></table></figure><ul><li><code>遠端服務器ip</code> 可以是 <font color=#EB5757><code>ip/域名/別名</code></font></li></ul><h3 id="參數"><a href="#參數" class="headerlink" title="參數"></a>參數</h3><ul><li><code>-p</code>：指定連線的端口號，默認為<code>22</code></li><li><code>-i</code>：指定連線使用的私鑰文件，當使用 <code>ssh-keygen</code> 生成公私鑰時不是使用默認的文件名稱才需要指定</li></ul><p>第一次連線時會出現  <font color=#EB5757><code>(EDCSA )can’t be establish</code></font> 字樣，之後會要你輸入密碼</p><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><p>在連線到遠端的情況下，在終端輸入<code>exit</code> 就行</p><h2 id="服務端ssh-配置文件"><a href="#服務端ssh-配置文件" class="headerlink" title="服務端ssh 配置文件"></a>服務端ssh 配置文件</h2><p>在 <code>/etc/ssh/sshd_config</code>，可以修改一些連線配置，如端口號(預設為22)</p><h1 id="進階配置"><a href="#進階配置" class="headerlink" title="進階配置"></a>進階配置</h1><p>客戶端當下載完之後都會自動生成一個<code>~/.ssh</code> 目錄</p><p>裡面的配置文件有</p><h2 id="客戶端"><a href="#客戶端" class="headerlink" title="客戶端"></a>客戶端</h2><table><thead><tr><th>配置文件</th><th>作用</th></tr></thead><tbody><tr><td><code>known_hosts</code></td><td>曾經連過的服務器，客戶端第一次連接服務端時會有個授權提示，確認後會記錄在這個文件，下一次登陸就不需要授權提示了</td></tr><tr><td><code>config</code></td><td>可以配置一些連線到服務端的設定，例如：連線<code>別名</code></td></tr></tbody></table><h2 id="服務端"><a href="#服務端" class="headerlink" title="服務端"></a>服務端</h2><table><thead><tr><th>配置文件</th><th>作用</th></tr></thead><tbody><tr><td><code>authorized_keys</code></td><td>客戶端免密碼連線使用的公鑰</td></tr></tbody></table><h2 id="設置別名"><a href="#設置別名" class="headerlink" title="設置別名"></a>設置別名</h2><p>每次連線都要打用戶、ip 、port很麻煩，可以在 <code>~/.ssh/config</code> 裡面設置別名，免去每次都要輸入的麻煩。</p><p>需要按照以下格式書寫，只有 <font color=#EB5757><code>HostName</code></font> 是必選項，其他都可以省略</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">Host</span> <span class="hljs-string">hat</span><br>    <span class="hljs-string">HostName</span> <span class="hljs-number">192.168</span><span class="hljs-number">.68</span><span class="hljs-number">.127</span><br>    <span class="hljs-string">User</span> <span class="hljs-string">austin72905</span><br>    <span class="hljs-string">Port</span> <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p>配置完之後只要輸入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh hat<br></code></pre></td></tr></table></figure><p>等價於你輸入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh austin72905@192.168.68.127<br></code></pre></td></tr></table></figure><h2 id="免輸入密碼（配置公私鑰）"><a href="#免輸入密碼（配置公私鑰）" class="headerlink" title="免輸入密碼（配置公私鑰）"></a>免輸入密碼（配置公私鑰）</h2><p>這個東西不只<code>ssh</code> 連線時使用到，<code>github</code> 自從推行免密碼發佈後，也是用這個方式</p><h3 id="生成公私鑰"><a href="#生成公私鑰" class="headerlink" title="生成公私鑰"></a>生成公私鑰</h3><p>生成一對公私鑰，私鑰自己保存，公鑰上傳到服務端，輸入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen<br></code></pre></td></tr></table></figure><p>輸入後一路按<code>enter</code></p><p>默認會在 <code>~/.ssh</code> 目錄下新增兩個文件，windows 會在使用者目錄內 的 <code>.ssh</code> 目錄 新增</p><ul><li><font color=#EB5757><code>id_rsa</code></font>  (私鑰)</li><li><font color=#EB5757><code>id_rsa.pub</code></font> (公鑰)</li></ul><p>也可以輸入一些參數做額外設定</p><ul><li><code>-t</code>：加密方式(默認rsa)</li><li><code>-f</code>：密鑰文件名  (如果自訂義文件名，使用ssh 時要用 <code>-i</code> 指定密鑰文件，默認則可以省略)</li><li><code>-c</code>：註解，會附加在密鑰尾部</li></ul><h3 id="設定私鑰的權限-可選"><a href="#設定私鑰的權限-可選" class="headerlink" title="設定私鑰的權限 (可選)"></a>設定私鑰的權限 (可選)</h3><p>可以設定只有自己可讀 ，輸入 <font color=#EB5757><code>chmod 400 id_rsa</code></font>，避免被修改到</p><h3 id="上傳公鑰到服務端"><a href="#上傳公鑰到服務端" class="headerlink" title="上傳公鑰到服務端"></a>上傳公鑰到服務端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-copy-id 用戶@服務器ip<br></code></pre></td></tr></table></figure><ul><li>上傳之後服務端會出現一個 <code>~/.ssh/authorized_keys</code></li></ul><h3 id="windows-無法使用-ssh-copy-id"><a href="#windows-無法使用-ssh-copy-id" class="headerlink" title="windows 無法使用 ssh-copy-id"></a>windows 無法使用 <code>ssh-copy-id</code></h3><p>如果是windows 會無法使用<code>ssh-copy-id</code>這個指令，<br>只要把本機的 <font color=#EB5757><code>公鑰</code></font> (<code>id_rsa.pub</code>)複製到服務端上的 <font color=#EB5757><code>~/.ssh/authorized_keys</code></font> 文件就可以了，這也是<code>ssh-copy-id</code>腳本實際上做的事。</p><p>公鑰格式大概會是 <code>ssh-rsa AAA.....5js= user@MSI</code>。</p><p>如果該文件有多個公鑰，就用換行符分開。</p><p>之後<code>ssh</code>就可以不用輸入密碼，直接連線遠端了</p><h2 id="如何將密鑰也寫入config"><a href="#如何將密鑰也寫入config" class="headerlink" title="如何將密鑰也寫入config?"></a>如何將密鑰也寫入config?</h2><p>前面提過，如果是自訂密鑰文件的名稱，之後都需要使用 <code>-i</code> 指定密鑰文件連線，每次都要輸入很麻煩，其實他也是可以寫入<code>config</code> 文件中</p><p>使用 <font color=#EB5757><code>IdentityFile</code></font> 參數配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">Host</span> <span class="hljs-string">hat</span><br>    <span class="hljs-string">HostName</span> <span class="hljs-number">192.168</span><span class="hljs-number">.68</span><span class="hljs-number">.127</span><br>    <span class="hljs-string">User</span> <span class="hljs-string">austin72905</span><br>    <span class="hljs-string">Port</span> <span class="hljs-number">22</span><br>    <span class="hljs-string">IdentityFile</span> <span class="hljs-string">~/.ssh/keyfile</span><br></code></pre></td></tr></table></figure><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://a-nomad.com/ssh">Ssh小白入门教程一次弄懂ssh入门到精通</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在win11上使用wsl2</title>
    <link href="/2023/12/16/wsl-install/"/>
    <url>/2023/12/16/wsl-install/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>wsl 是 windows 操作系統的一個linux子系統，讓你不用像以往一樣需要先下載VirtualBox，才能使用Linux作業系統，</p><p>wsl 的出現讓Windows 的使用者能夠更簡單的使用 Linux 上那些簡單好用的指令，本文會介紹如何在win11上使用wsl。</p><p>注意: win10&#x2F;win11 預設使用的是wsl2，如果想要使用wsl1 可以去微軟官網查詢相關設定</p><h1 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h1><ol><li>安裝之前需要先開啟windows 上的功能<br> 控制台 &rarr; 程式集 &rarr; 開啟或關閉windows功能<br> 需要將<code>虛擬機器平台</code>、<code>Windows 子系統Linux版</code> 勾選</li></ol><p><img src="https://drive.google.com/u/2/uc?id=1jgvN0DyCTJ1RCxhZNgvaaM7O53bygtZ0&export=download" alt="開啟windows上的功能"></p><ol start="2"><li>windows update 打開接收最新更新通知，之後重新啟動電腦 (<em>不一定要開啟，如果在安裝時遇到報錯再開啟就行</em>)</li></ol><p><img src="https://drive.google.com/u/2/uc?id=1dPjPcFOuOGwdnDSYQrrcBOT0WWRYnqVF&export=download" alt="打開接收最新更新通知"></p><ol start="3"><li><p>查看當前系統能夠安裝那些linux 發行版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl -l -o<br></code></pre></td></tr></table></figure></li><li><p>安裝Linux 發行版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl --install -d &lt;發行版名稱&gt;<br></code></pre></td></tr></table></figure></li></ol><p>例如: <code>wsl --install -d Ubuntu-22.04</code></p><ol start="5"><li>啟動，打開命令行終端，輸入</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">wsl.<span class="hljs-keyword">exe</span><br></code></pre></td></tr></table></figure><h1 id="可能出現的錯誤訊息"><a href="#可能出現的錯誤訊息" class="headerlink" title="可能出現的錯誤訊息"></a>可能出現的錯誤訊息</h1><ol><li><p><code>WslRegisterDistribution failed with error: 0x80370102 Please enable the Virtual Machine Platform Windows feature and ensure virtualization is enabled in the BIOS.</code></p></li><li><p><code>Error: 0x800701bc WSL 2 ???????????????????? visit https://aka.ms/wsl2kernel</code></p></li><li><p>終端輸入wsl 閃退</p></li></ol><p>基本上就是沒有啟動windows 功能或是沒有打開更新</p><h1 id="輸入wsl-遇到-出現-docker-desktop-root-之類的字眼"><a href="#輸入wsl-遇到-出現-docker-desktop-root-之類的字眼" class="headerlink" title="輸入wsl 遇到 出現 docker-desktop-root 之類的字眼"></a>輸入wsl 遇到 出現 docker-desktop-root 之類的字眼</h1><p>檢查一下是否之前安裝過docker desktop (windows 版docker)，docker desktop 會被視為一個linux 發行版</p><p>查看已經安裝的發行版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl --list<br></code></pre></td></tr></table></figure><p>會發現 有 <code>docker-desktop</code></p><p>此時可以切換到另一個發行版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl --set-version &lt;DistributionName&gt; &lt;VersionNumber&gt;<br><span class="hljs-comment"># 範例</span><br>wsl --set-version Ubuntu-20.04 2<br></code></pre></td></tr></table></figure><p>設置默認的發行版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsl --set-default &lt;DistributionName&gt;<br><span class="hljs-comment"># 範例</span><br>wsl --set-default Ubuntu-20.04 <br></code></pre></td></tr></table></figure><h1 id="與windows-宿主機共用資料夾"><a href="#與windows-宿主機共用資料夾" class="headerlink" title="與windows 宿主機共用資料夾"></a>與windows 宿主機共用資料夾</h1><p>在 wsl 終端 進入 <code>/mnt</code>，會發現裡面包含著windows 所有的磁碟，接著進入 <code>/mnt/c</code>，會看到它顯示的文件跟宿主機上的<code>C:/</code>內的文件是一樣的</p><p>因此可以在wsl 上 訪問 宿主機上的文件的，但每次都要進入宿主機目錄很麻煩，可以透過建立捷徑(軟連結)的方式</p><h2 id="建立一個捷徑-軟連結"><a href="#建立一個捷徑-軟連結" class="headerlink" title="建立一個捷徑 (軟連結)"></a>建立一個捷徑 (軟連結)</h2><p>在wsl 上， 先切換到家目錄(比較沒有權限問題)，創建一個目錄<code>commonWithHost</code>，之後在此目錄內建立捷徑</p><p>假設我想與宿主機共用 <code>C:\commonWithWSL</code> (此目錄要存在)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~<br><br><span class="hljs-built_in">mkdir</span> commonWithHost<br><br><span class="hljs-comment"># 將宿主機上 C:\commonWithWSL 建立捷徑放在 commonWithHost 目錄裡</span><br><span class="hljs-built_in">ln</span> -s /mnt/c/commonWithWSL commonWithHost<br></code></pre></td></tr></table></figure><p>之後進入<code>commonWithHost</code> 會發現多了一個<code>commonWithWSL</code>，進入後就可以訪問宿主機的文件了</p><p>因為是捷徑，所以在wsl 裡面刪掉這個commonWithWSL目錄 沒差，不會影響到windows 上的目錄</p><h1 id="windows-、linux-文件跨平台異常"><a href="#windows-、linux-文件跨平台異常" class="headerlink" title="windows 、linux 文件跨平台異常"></a>windows 、linux 文件跨平台異常</h1><p>如果在windows 上編輯文件後，在linux開啟有時會出現以下報錯<br><font color=#EB5757><code>/bin/bash^M: bad interpreter: No such file or directory</code></font></p><p>原因是 不同系統編碼格式引起的：在windows系統中編輯的<code>.sh</code>檔案可能有不可見字元，導致跨平台讀取時會有問題</p><p>可以用以下方式解決</p><p>在linux 環境下，使用 vi 開啟文件，<br>進入文件後在指令模式下輸入 <code>:set ff</code>  ，按下 enter 會看到檔案左下角出現 <code>fileformat=dos</code> 或是 <code>fileformat=unix</code>。</p><p>在linux 環境下 <code>fileformat=dos</code> 是會有問題的</p><p>輸入<code>:set ff=unix</code>，按下 enter 就可以修改，修改後輸入<code>:wq</code>保存修改並退出，腳本就可以正常運作了</p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>之前用win10時，不記得需要那麼多的設定，win11 微軟號稱把wsl整合進了操作系統中，結果反而在安裝上遇到了很多問題…只能說果然是微軟出品阿。</p><p>但是wsl 還是挺不錯的，省略掉很多以前建立虛擬機麻煩的步驟，雖然在某些網路功能上還是不像開一個虛擬機一樣能夠完全的隔離，但一般的文本處理功能也是很夠用了。</p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://blog.darkthread.net/blog/wsl2-gui/">WSL2 安裝錯誤 0x800701bc 與 GUI 整合初體驗</a></p><p><a href="https://learn.microsoft.com/zh-tw/windows/wsl/install">如何使用 WSL 在 Windows 上安裝 Linux</a></p><p><a href="https://zhuanlan.zhihu.com/p/147233604">wsl2的Error 0x80370102 解决方案</a></p><p><a href="https://www.laitimes.com/article/1ebmr_1fxqw.html">sh腳本異常：&#x2F;bin&#x2F;sh^M:bad interpreter: No such file or directory</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用nvm 安裝 node.js</title>
    <link href="/2023/12/16/nvm-install-node/"/>
    <url>/2023/12/16/nvm-install-node/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>nvm (Node Version Manager)為 node.js 的版本管理工具，透過nvm，能夠在同一台電腦上輕鬆的管理多個版本的node.js，可以依照每個專案的需求切換node.js的版本</p><h1 id="nvm安裝步驟"><a href="#nvm安裝步驟" class="headerlink" title="nvm安裝步驟"></a>nvm安裝步驟</h1><p>Windows 版本有提供下載工具<a href="https://github.com/coreybutler/nvm-windows">nvm-windows</a><br><a href="https://github.com/coreybutler/nvm-windows/releases">下載連結</a>滑到下面選擇<code>nvm-setup.zip</code><br>，點選後就一路按下一步就能順利安裝</p><p><img src="https://drive.google.com/u/2/uc?id=1US9E8PTYZlkcrMYkXIi3G8Tr5qCKrpWR&export=download" alt="nvm安裝"></p><p>接著在終端輸入<code>nvm</code>，確認是否有安裝成功</p><h1 id="node-安裝"><a href="#node-安裝" class="headerlink" title="node 安裝"></a>node 安裝</h1><p>安裝完<code>nvm</code> 後接著就可以下載 node.js，下載node.js預設就會跟著下載套件管理工具<code>npm</code>。</p><p>輸入<font color=#EB5757><code>nvm install node的版本號</code></font>下載指定版本的node.js，版本號可以去node.js官網查看LTS，如:<font color=#EB5757><code>nvm use 20.10.0</code></font><br>下載完可以用<code>node -v</code> 檢查是否有安裝成功</p><h1 id="‘node’-不是內部或外部命令、可執行的程式或批次檔。"><a href="#‘node’-不是內部或外部命令、可執行的程式或批次檔。" class="headerlink" title="‘node’ 不是內部或外部命令、可執行的程式或批次檔。"></a>‘node’ 不是內部或外部命令、可執行的程式或批次檔。</h1><p>下載完之後如果出現以上訊息<br>使用 <code>nvm use 安裝node的版本號</code></p><p>如:<code>nvm use 20.10.0</code></p><p>不知道為啥使用了他沒有預設use我安裝的版本，還要自己指定…</p><p>再次使用<code>node -v</code> 發現可以正常使用了</p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://www.casper.tw/development/2022/01/10/install-nvm/">安裝 nvm 環境，Node.js 開發者必學（Windows、Mac 均適用）</a></p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell 中的 case 語句 (switch)</title>
    <link href="/2023/11/27/linux-shell-case/"/>
    <url>/2023/11/27/linux-shell-case/</url>
    
    <content type="html"><![CDATA[<h1 id="語法介紹"><a href="#語法介紹" class="headerlink" title="語法介紹"></a>語法介紹</h1><p>有點像是其他語言的switch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">case</span> expression <span class="hljs-keyword">in</span><br>    pattern1)<br>        匹配 pattern1，就會執行語句<br>        ;;<br>    pattern2)<br>        匹配 pattern2，就會執行語句<br>        ;;<br>    pattern3)<br>        匹配 pattern3，就會執行語句<br>        ;;<br>    ……<br>    *)<br>        default，預設都不匹配所有pattern時，預設執行的語句<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><ul><li><p>每個pattern後面接 <code>)</code> ， 只要符合該pattern，就會執行後面對應的語句</p></li><li><p><code>;;</code> 相當於 break</p></li><li><p><code>*</code> 相當於 default</p></li><li><p>expression 可以是一個變數，或是某個指令執行的結果</p></li><li><p>pattern 可以是數字、字串，也可以使用正則表達式</p></li></ul><h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Input integer number: &quot;</span><br><span class="hljs-built_in">read</span> num<br><span class="hljs-keyword">case</span> <span class="hljs-variable">$num</span> <span class="hljs-keyword">in</span><br>    1)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Monday&quot;</span><br>        ;;<br>    2)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Tuesday&quot;</span><br>        ;;<br>    3)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Wednesday&quot;</span><br>        ;;<br>    4)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Thursday&quot;</span><br>        ;;<br>    5)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Friday&quot;</span><br>        ;;<br>    6)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Saturday&quot;</span><br>        ;;<br>    7)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Sunday&quot;</span><br>        ;;<br>    *)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;error&quot;</span><br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h2 id="配合正則表達式"><a href="#配合正則表達式" class="headerlink" title="配合正則表達式"></a>配合正則表達式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br> <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Input a character: &quot;</span><br> <span class="hljs-built_in">read</span> -n 1 char<br> <span class="hljs-keyword">case</span> <span class="hljs-variable">$char</span> <span class="hljs-keyword">in</span><br>     [a-zA-Z])<br>         <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\nletter\n&quot;</span><br>         ;;<br>     [0-9])<br>         <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\nDigit\n&quot;</span><br>         ;;<br>     [0-9])<br>         <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\nDigit\n&quot;</span><br>         ;;<br>     [,.?!])<br>         <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\nPunctuation\n&quot;</span><br>         ;;<br>     *)<br>         <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\nerror\n&quot;</span><br> <span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://c.biancheng.net/view/2767.html">Shell case in语句详解</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell 中的 do while 語句</title>
    <link href="/2023/11/27/linux-shell-while/"/>
    <url>/2023/11/27/linux-shell-while/</url>
    
    <content type="html"><![CDATA[<h1 id="語法介紹"><a href="#語法介紹" class="headerlink" title="語法介紹"></a>語法介紹</h1><p>while 用於循環，根據條件執行一段代碼塊</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 語法</span><br><span class="hljs-keyword">while</span> [ 條件 ]<br><span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># do something...</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>c = 1<br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$c</span> -le 5 ]<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> welcome <span class="hljs-variable">$c</span> <span class="hljs-built_in">times</span><br>    <span class="hljs-comment"># c = c+1</span><br>    ((c++))<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell 中的 for 語句</title>
    <link href="/2023/11/27/linux-shell-for/"/>
    <url>/2023/11/27/linux-shell-for/</url>
    
    <content type="html"><![CDATA[<h1 id="語法介紹"><a href="#語法介紹" class="headerlink" title="語法介紹"></a>語法介紹</h1><p>for 可以用來遍歷數組，而這個數組很泛用，可以是數字、文件列表或是命令執行的結果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> 1 2 3 4 5<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a b c d e<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 想要用一般for迴圈時可以用</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (1..5)<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><h1 id="常用範例"><a href="#常用範例" class="headerlink" title="常用範例"></a>常用範例</h1><ul><li><p>遍歷命令執行的結果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">ls</span> /home)<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;User: <span class="hljs-variable">$user</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></li><li><p>遍歷文件列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 遍歷當前目錄下 後綴為.txt的文件</span><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> *.txt<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Processing file: <span class="hljs-variable">$file</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></li><li><p>遍歷數組</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">fruits=(<span class="hljs-string">&quot;apple&quot;</span> <span class="hljs-string">&quot;banana&quot;</span> <span class="hljs-string">&quot;cherry&quot;</span>)<br><span class="hljs-comment"># [@] 需要這樣寫才能遍歷整個數組</span><br><span class="hljs-keyword">for</span> fruit <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fruits[@]&#125;</span>&quot;</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Fruit: <span class="hljs-variable">$fruit</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell 中的 if 語句</title>
    <link href="/2023/11/27/linux-shell-if/"/>
    <url>/2023/11/27/linux-shell-if/</url>
    
    <content type="html"><![CDATA[<h1 id="語法介紹"><a href="#語法介紹" class="headerlink" title="語法介紹"></a>語法介紹</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ 條件 ]<br><span class="hljs-keyword">then</span><br>    動作<br><span class="hljs-keyword">else</span><br>    動作<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><ul><li>[  ]兩邊都需要空一格</li><li>變數與判斷式都需要空一格</li></ul><h2 id="變數與判斷式都需要空一格"><a href="#變數與判斷式都需要空一格" class="headerlink" title="變數與判斷式都需要空一格"></a>變數與判斷式都需要空一格</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>a=<span class="hljs-string">&quot;sun&quot;</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;mon&quot;</span> ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cool&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;no&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h1 id="條件判斷"><a href="#條件判斷" class="headerlink" title="條件判斷"></a>條件判斷</h1><h2 id="字串判斷"><a href="#字串判斷" class="headerlink" title="字串判斷"></a>字串判斷</h2><p>可以使用 &lt;、&gt;、&#x3D; (bash 中 <code>=</code> 、<code>==</code> 是等價的，建議用 <code>=</code>)</p><h2 id="數值判斷"><a href="#數值判斷" class="headerlink" title="數值判斷"></a>數值判斷</h2><ul><li><code>-gt</code>：大於</li><li><code>-ge</code>：大於等於</li><li><code>-lt</code>：小於</li><li><code>-le</code>：小於等於</li><li><code>-eq</code>：等於</li><li><code>-ne</code>：不等於</li></ul><h1 id="跟-差異"><a href="#跟-差異" class="headerlink" title="[] 跟 [[]] 差異?"></a>[] 跟 [[]] 差異?</h1><ul><li><p><code>[]</code> 通常用於執行基本的條件測試，使用時，需要注意變數是否包含空格，以避免錯誤</p></li><li><p><font color=#EB5757><code>[[]]</code></font> 是Bash引入的擴展條件測試構造</p></li><li><p><font color=#EB5757><code>[[]]</code></font> 可以進行更複雜的條件測試，例如正規表達式匹配</p></li></ul><p>使用 <font color=#EB5757><code>[[]]</code></font> 比較好，不會因為包含空格而出錯，但是bash以外有些舊版的shell 可能不支援</p><h1 id="常用範例"><a href="#常用範例" class="headerlink" title="常用範例"></a>常用範例</h1><h2 id="檢查某個文件是否存在"><a href="#檢查某個文件是否存在" class="headerlink" title="檢查某個文件是否存在"></a>檢查某個文件是否存在</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># -e 代表檢查某個文件是否存在</span><br><br>clear<br><span class="hljs-keyword">if</span> [ -e ./error.txt ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;file exist&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;file noexist&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell 語法介紹</title>
    <link href="/2023/11/27/linux-shell-syntax/"/>
    <url>/2023/11/27/linux-shell-syntax/</url>
    
    <content type="html"><![CDATA[<h1 id="shell-語法"><a href="#shell-語法" class="headerlink" title="shell 語法"></a>shell 語法</h1><p>可以分成4個部分</p><ul><li>使用的shell：在腳本文件的第一行可以指定shell 的指示器，通常都是用<code>#!/bin/bash</code></li><li>註解：使用<code>#</code> 可以註解</li><li>命令：要腳本做的動作，echo、cp…</li><li>判斷式：if、for、while…</li></ul><p>創建shell 腳本時，記得給予執行權限(x)</p><h1 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h1><h2 id="定義變數、呼叫變數"><a href="#定義變數、呼叫變數" class="headerlink" title="定義變數、呼叫變數"></a>定義變數、呼叫變數</h2><p>定義變數後(定義時不需要$)，使用$呼叫變數</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 這是註解 ，第一行!之後不要有空格</span><br><br>a=<span class="hljs-string">&quot;cool popo&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;test <span class="hljs-variable">$a</span>&quot;</span><br></code></pre></td></tr></table></figure><p><strong>Output</strong>：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">test </span>cool popo<br></code></pre></td></tr></table></figure><h2 id="將指令運行結果保存到變數"><a href="#將指令運行結果保存到變數" class="headerlink" title="將指令運行結果保存到變數"></a>將指令運行結果保存到變數</h2><p>定義變數時，如果想要將linux 指令運行的結果存到變數，要加上&#96;&#96;<br>或是使用<code>$()</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 這是註解 ，第一行!之後不要有空格</span><br><br>a=`hostname`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hi my server name is <span class="hljs-variable">$a</span>&quot;</span><br><br>s=$(<span class="hljs-built_in">ls</span> -l)<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;result=<span class="hljs-variable">$s</span>&quot;</span><br></code></pre></td></tr></table></figure><h1 id="數值計算"><a href="#數值計算" class="headerlink" title="數值計算 (())"></a>數值計算 (())</h1><ul><li><p>如果想要數值計算，可以用<code>(())</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>c = 1<br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$c</span> -le 5 ]<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> welcome <span class="hljs-variable">$c</span> <span class="hljs-built_in">times</span><br>    <span class="hljs-comment"># c = c+1</span><br>    ((c++))<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></li><li><p>if 要進行數值比較時</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>a=5<br>b=10<br><br><span class="hljs-keyword">if</span> ((a &lt; b)); <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span> 小于 <span class="hljs-variable">$b</span>&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span> 不小于 <span class="hljs-variable">$b</span>&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h1 id="創建子shell"><a href="#創建子shell" class="headerlink" title="創建子shell ()"></a>創建子shell ()</h1><p>創建子shell原因</p><ul><li>改變子shell 中的變數，不會影響到父shell，當想要限制變數的作用域時可以使用</li><li>可以執行一系列指令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>variable=42<br><br>(<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;在子shell中，variable 的值是 <span class="hljs-variable">$variable</span>&quot;</span> <br>    variable=99<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;在子shell中，修改后的 variable 的值是 <span class="hljs-variable">$variable</span>&quot;</span><br>)<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;在父shell中，variable 的值仍然是 <span class="hljs-variable">$variable</span>&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 在子shell中执行一系列命令</span><br>(<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;这是子shell中的命令1&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;这是子shell中的命令2&quot;</span><br>    <span class="hljs-comment"># 更多命令...</span><br>)<br><br><span class="hljs-comment"># 在父shell中执行的命令</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;这是父shell中的命令&quot;</span><br><br></code></pre></td></tr></table></figure><h1 id="保留制表符"><a href="#保留制表符" class="headerlink" title="保留制表符"></a>保留制表符</h1><p>使用 <code>&quot;&quot;</code> 包住變數</p><p>有一文件<code>o_content</code></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-built_in">ax</span>-aa<br><span class="hljs-built_in">bx</span>-bb<br><span class="hljs-built_in">cx</span>-cc<br><span class="hljs-built_in">dx</span>-<span class="hljs-built_in">dd</span><br></code></pre></td></tr></table></figure><p>腳本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><br><span class="hljs-comment"># 使用&quot;&quot; 包住變數可以保留制表符 \n \t 那些</span><br><br><span class="hljs-comment"># 如果沒有用 &quot;&quot; 包住 </span><br><br>result=`<span class="hljs-built_in">cat</span> o_content | awk -F <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$result</span><br><br></code></pre></td></tr></table></figure><p>Output  (會以空格分隔，不是如預期一般以<code>\n</code>分隔)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">aa bb cc <span class="hljs-built_in">dd</span><br></code></pre></td></tr></table></figure><p>如欲想要以<code>\n</code>分隔，使用 <code>&quot;&quot;</code> 包住變數</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>result=`<span class="hljs-built_in">cat</span> o_content | awk -F <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$result</span>&quot;</span><br></code></pre></td></tr></table></figure><p>Output</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">aa<br>bb<br>cc<br><span class="hljs-built_in">dd</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell 基本介紹</title>
    <link href="/2023/11/27/linux-shell-introduce/"/>
    <url>/2023/11/27/linux-shell-introduce/</url>
    
    <content type="html"><![CDATA[<h1 id="什麼是shell"><a href="#什麼是shell" class="headerlink" title="什麼是shell?"></a>什麼是shell?</h1><p>shell 英文翻譯又叫外殼，但為什麼叫外殼?總是讓人很疑惑，這時就要先介紹內核了(Linux Kernel)</p><h2 id="什麼是Linux-Kernel"><a href="#什麼是Linux-Kernel" class="headerlink" title="什麼是Linux Kernel?"></a>什麼是Linux Kernel?</h2><p>又稱Linux內核，是整個操作系統的核心部分，負責管理和控制硬體資源，以及提供各種系統服務給應用程式。</p><p>由上面的介紹可以知道操作系統是透過內核，來控制底層的硬體設備，但要如何呼叫內核去操作硬體呢?</p><p>因此shell 就出現了，目的就是用來呼叫內核的。</p><p>為什麼叫shell，因為他是相對於內核，更外層的部分。</p><h1 id="shell-的定義"><a href="#shell-的定義" class="headerlink" title="shell 的定義"></a>shell 的定義</h1><p>操控內核的api接口，可以是GUI(圖形化介面)，或者是命令行 (之後文章提到的shell都是這個)</p><p>命令行除了單獨執行，也可以組合這些命令行成為腳本，處理比較複雜的流程</p><h1 id="shell-的管理位置"><a href="#shell-的管理位置" class="headerlink" title="shell 的管理位置"></a>shell 的管理位置</h1><ul><li><p><code>/etc/shells</code> ：可以查看有哪些shell 可以使用</p></li><li><p><code>/etc/passwd</code> ： 裡面記載了目前使用的shell </p></li><li><p><code>echo $0</code> ：可以用此指令查看目前使用的shell</p></li></ul><h1 id="shell-類型"><a href="#shell-類型" class="headerlink" title="shell 類型"></a>shell 類型</h1><ul><li>GUI (圖形化介面)<ul><li>Gnome</li><li>KDE</li></ul></li><li>命令行<ul><li>sh</li><li>bash (sh 的升級版，目前主流都是用他)</li><li>csh、tcsh (很少人用，bash無法在此環境下使用，要注意)</li><li>ksh(兼容bash、sh，但主要在unix solorias 中使用)</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 系統管理-常用指令(date)</title>
    <link href="/2023/11/05/linux-system-management-cmd/"/>
    <url>/2023/11/05/linux-system-management-cmd/</url>
    
    <content type="html"><![CDATA[<h1 id="date-取得系統時間"><a href="#date-取得系統時間" class="headerlink" title="date (取得系統時間)"></a>date (取得系統時間)</h1><p>可以取得系統時間，在root 權限下，可以修改系統的時間，在撰寫腳本時用來判斷日期挺實用的</p><h3 id="語法格式"><a href="#語法格式" class="headerlink" title="語法格式"></a>語法格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;時間字串&quot;</span>  <span class="hljs-string">&quot;時間格式化&quot;</span><br></code></pre></td></tr></table></figure><ul><li>如果沒有指定時間，就會以當前時間為準</li><li>可以在時間字串指定一個時間，就會以該時間為準</li></ul><p>常用參數</p><ul><li><code>-d</code>： 指定一個時間字串</li></ul><h3 id="時間字串"><a href="#時間字串" class="headerlink" title="時間字串"></a>時間字串</h3><p>以下是常用的範例</p><p>除了可以用 +、-，也可以用ago、next、yesterday這些單字表示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;1 day ago&quot;</span><br><br><span class="hljs-string">&quot;5 minutes ago&quot;</span><br><br><span class="hljs-string">&quot;next month&quot;</span><br><br><span class="hljs-string">&quot;2023/10/15  1 day ago&quot;</span>  <span class="hljs-comment"># 2023/10/14</span><br></code></pre></td></tr></table></figure><h3 id="時間格式化"><a href="#時間格式化" class="headerlink" title="時間格式化"></a>時間格式化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>  <span class="hljs-comment"># 2009-02-13 23:02:30</span><br><br><span class="hljs-string">&quot;+%Y/%m/%d %H:%M:%S&quot;</span>  <span class="hljs-comment"># 2009/02/13 23:02:30</span><br><br><span class="hljs-string">&quot;+%Y-%m-%d&quot;</span>   <span class="hljs-comment">#  2009-02-13</span><br></code></pre></td></tr></table></figure><h3 id="使用範例"><a href="#使用範例" class="headerlink" title="使用範例"></a>使用範例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d&quot;</span>  <span class="hljs-comment"># 今天日期 2023-11-05</span><br><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;1 day ago&quot;</span> <span class="hljs-string">&quot;+%Y-%m-%d&quot;</span>  <span class="hljs-comment"># 昨天日期 2023-11-04</span><br><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;+1 day&quot;</span> <span class="hljs-string">&quot;+%Y-%m-%d&quot;</span>  <span class="hljs-comment"># 明天日期 2023-11-06</span><br><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;next month&quot;</span> <span class="hljs-string">&quot;+%Y/%m/%d&quot;</span>  <span class="hljs-comment">#  下個月 2023-12-05</span><br><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;2023/10/03 2 days ago&quot;</span> <span class="hljs-string">&quot;+%Y-%m-%d&quot;</span>  <span class="hljs-comment">#  2023-10-01</span><br><br><br></code></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="https://www.runoob.com/linux/linux-comm-date.html">Linux date 命令</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux alias - 為你的指令取別名，告別冗長的指令輸入</title>
    <link href="/2023/11/04/linux-alias/"/>
    <url>/2023/11/04/linux-alias/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在linux 系統中常常需要輸入命令行，有時甚至要組合多個命令，每次都要輸入冗長的指令就讓人心煩。<br>linux 中有個<code>alias</code>命令，能夠自定義命令的別名，這些別名可以是<font color=#EB5757><code>縮寫</code></font>或是更簡短的指令，這樣可以幫助我們更快速的輸入指令，提高工作效率</p><h1 id="語法格式"><a href="#語法格式" class="headerlink" title="語法格式"></a>語法格式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> 別名=<span class="hljs-string">&#x27;指令&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><p>這些指令可以是系統的指令，也可以是執行某個自己寫的腳本</p></li><li><p>也可以搭配輸入參數使用 ，<code>$1</code>、<code>$2</code> 會帶入第1個跟第2個輸入的參數</p></li></ul><p>範例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> <span class="hljs-built_in">test</span>=<span class="hljs-string">&#x27;echo hi $1&#x27;</span><br></code></pre></td></tr></table></figure><p>此時輸入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span> austin<br></code></pre></td></tr></table></figure><p>就會輸出</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hi austin</span><br></code></pre></td></tr></table></figure><h1 id="查看別名"><a href="#查看別名" class="headerlink" title="查看別名"></a>查看別名</h1><p>可以看到目前定義的命令別名有哪些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span><br></code></pre></td></tr></table></figure><h1 id="修改別名"><a href="#修改別名" class="headerlink" title="修改別名"></a>修改別名</h1><h2 id="暫時修改"><a href="#暫時修改" class="headerlink" title="暫時修改"></a>暫時修改</h2><p>這樣的修改方式，在關閉終端後，下次登陸時，這些別名都不在了</p><h3 id="建立別名"><a href="#建立別名" class="headerlink" title="建立別名"></a>建立別名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> 別名=<span class="hljs-string">&#x27;指令&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="取消別名"><a href="#取消別名" class="headerlink" title="取消別名"></a>取消別名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">unalias</span> 別名<br></code></pre></td></tr></table></figure><h2 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h2><p>如果想要永久修改可以，需要使用配置檔去配置</p><h3 id="針對單一用戶更改"><a href="#針對單一用戶更改" class="headerlink" title="針對單一用戶更改"></a>針對單一用戶更改</h3><p><code>/home/username .bashrc</code></p><h3 id="針對所有用戶修改"><a href="#針對所有用戶修改" class="headerlink" title="針對所有用戶修改"></a>針對所有用戶修改</h3><p><code>/etc/bashrc</code></p><h2 id="使用範例"><a href="#使用範例" class="headerlink" title="使用範例"></a>使用範例</h2><p>以建立自己能夠使用的別名 為例</p><ol><li>使用vi 開啟 <code>~/.bashrc</code>  (打開自己家目錄的<code>.bashrc</code>)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi ~/.bashrc<br></code></pre></td></tr></table></figure><ol start="2"><li>在檔案的最下面輸入</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> yourcommand=<span class="hljs-string">&#x27;script command&#x27;</span><br><br><span class="hljs-comment"># 範例</span><br><span class="hljs-built_in">alias</span> showlog=<span class="hljs-string">&#x27;bash /usr/local/yourscript.sh&#x27;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>退出文件後，重新刷新終端</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="https://www.ltsplus.com/linux/linux-command-alias">[Linux] 使用 alias 自定義指令</a></p><p><a href="https://clay-atlas.com/blog/2020/01/05/linux-chinese-tutorial-ubuntu-alias/">Linux 自訂指令 Alias 別名</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 網路抓包工具-tcpdump</title>
    <link href="/2023/10/07/linux_tcpdump/"/>
    <url>/2023/10/07/linux_tcpdump/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>tcpdump 是 linux 常使用的網路抓包工具，可以抓取機器上的網路封包，可以分析網路的使用情況，如查看當前服務使用的dns是否正常響應，或是查看機器是否被駭客開了後門，正在使用奇怪的port號把資料送出去今天就記錄一些常用的tcpdump指令與參數。</p><h1 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h1><p>常用參數</p><ul><li><p><strong><font color=#EB5757><code>-i</code></font></strong> ：監聽的網路介面卡，通常都是eth0</p></li><li><p><code>-n</code> ：不把主機的地址轉換成名字</p></li><li><p><code>-t</code> ：每條封包內容不打印時間戳</p></li><li><p><code>-s</code> ：設置每條封包的大小為多少bytes</p></li><li><p><code>-X</code> ：使用十六進制(hex)顯示每條封包的資料</p></li></ul><p>指定類型(type)</p><ul><li><p><strong><font color=#EB5757><code>port</code></font></strong> ：特定端口或服務，如: 80、443 ; 或是指定服務 <font color=#EB5757><code>domain</code></font>、http、ssh、ftp</p></li><li><p><code>portrange</code> ：指定端口範圍，如: 1000-2000</p></li><li><p><code>net</code> ：可以指定一個ip或域名，會捕獲主機與目標ip與他們的子網路的封包(指定192.168.1.100，子網路192.168.1.0&#x2F;24內的封包的也可以捕捉到)</p></li><li><p><code>host</code> ：可以指定一個ip或主機名，會捕獲主機與目標ip的封包 (指定192.168.1.100，就只包含主機與目標IP為192.168.1.100的封包，不包含子網路)</p></li></ul><p>指定協議(proto)</p><ul><li><p><code>tcp</code> ：捕獲 tcp 協議流量</p></li><li><p><code>udp</code> ：捕獲 udp 協議流量</p></li><li><p><code>icmp</code> ：捕獲 icmp 協議流量</p></li><li><p><code>ip</code> ：捕獲所有ip協議的流量 (tcp、udp、icmp)</p></li><li><p><code>arp</code> ：捕獲 arp 通信流量</p></li></ul><p>封包目標或來源 (dir)</p><ul><li><p><code>src</code>：指定封包來源</p></li><li><p><code>dst</code>：指定封包目標</p></li><li><p><code>src or dst</code>：預設，不管來源或目標</p></li></ul><p>還可以用 and、or、not 來搭配過濾</p><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="查看dns-封包"><a href="#查看dns-封包" class="headerlink" title="查看dns 封包"></a>查看dns 封包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -i eth0 -nt -s 500 port domain<br></code></pre></td></tr></table></figure><h2 id="查看特定來源的封包"><a href="#查看特定來源的封包" class="headerlink" title="查看特定來源的封包"></a>查看特定來源的封包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump src host 210.27.48.1<br></code></pre></td></tr></table></figure><h2 id="監聽指定Port-跟-主機間的封包"><a href="#監聽指定Port-跟-主機間的封包" class="headerlink" title="監聽指定Port 跟 主機間的封包"></a>監聽指定Port 跟 主機間的封包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump tcp port 9453 and host 10.0.0.2<br></code></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="https://jaminzhang.github.io/dns/use-tcpdump-to-analyze-dns-communication/">使用 Tcpdump 分析查看 DNS 通信过程</a></p><p><a href="https://iter01.com/557434.html">抓包工具tcpdump用法說明</a></p><p><a href="https://www.readfog.com/a/1687484429703942144">史上最簡明的 Tcpdump 入門指南，看這一篇就夠了</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>網路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>網路抓包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 系統管理-系統監控</title>
    <link href="/2023/09/15/linux-system-monitor/"/>
    <url>/2023/09/15/linux-system-monitor/</url>
    
    <content type="html"><![CDATA[<h1 id="top-（查看當前進程實時的使用情況）"><a href="#top-（查看當前進程實時的使用情況）" class="headerlink" title="top （查看當前進程實時的使用情況）"></a>top （查看當前進程實時的使用情況）</h1><p>top指令可以查看當前進程實時的使用情況、CPU、RAM、I&#x2F;O使用率等其他資訊</p><p>常用參數</p><ul><li><font color=#EB5757><code>-u</code></font>：查看指定用戶運行的進程</li><li><font color=#EB5757><code>-p</code></font>：查看特定進程的使用情況</li></ul><p>交互模式下可使用的快捷鍵</p><ul><li><code>q</code>：退出</li><li><code>c</code>：運行的COMMAND會顯示絕對路徑</li><li><code>k</code>：系統會讓你選擇要kill 的進程編號，輸入完進程編號再按enter就能 kill 進程</li><li><code>P</code>：按照cpu 排序</li><li><code>M</code>：按照ram大小排序</li><li><code>h</code>：可以查看可用快捷鍵</li></ul><h2 id="顯示的資訊"><a href="#顯示的資訊" class="headerlink" title="顯示的資訊"></a>顯示的資訊</h2><table><thead><tr><th>名稱</th><th>定義</th></tr></thead><tbody><tr><td>PID</td><td>進程 ID，是系統用來識別進程的唯一編號</td></tr><tr><td>USER</td><td>進程所屬的使用者</td></tr><tr><td>PR</td><td>進程的優先順序</td></tr><tr><td>NI</td><td>進程的 nice 值</td></tr><tr><td>VIRT</td><td>進程使用的虛擬記憶體(內存)大小</td></tr><tr><td>RES</td><td>進程使用的實際記憶體(內存)大小</td></tr><tr><td>SHR</td><td>進程共享的記憶體量</td></tr><tr><td>S</td><td>進程的狀態</td></tr><tr><td>%CPU</td><td>進程使用的 CPU 使用率</td></tr><tr><td>%MEM</td><td>進程使用的記憶體使用率</td></tr><tr><td>TIME+</td><td>進程執行的總時間</td></tr><tr><td>COMMAND</td><td>進程的命令行</td></tr></tbody></table><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><ul><li>查看root 運行的進程實時的使用情況<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">top -u root<br></code></pre></td></tr></table></figure></li><li>查看PID&#x3D;5的進程實時的使用情況<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">top -p 5<br></code></pre></td></tr></table></figure></li></ul><h1 id="history-（查看用戶的cmd-使用紀錄）"><a href="#history-（查看用戶的cmd-使用紀錄）" class="headerlink" title="history （查看用戶的cmd 使用紀錄）"></a>history （查看用戶的cmd 使用紀錄）</h1><p>例如可以在系統崩潰時，排查是哪個指令出問題，或是哪個指令誤刪了文件</p><p>每個用戶的歷史紀錄可以在</p><p><font color=#EB5757><code>/home/用戶名/.bash_history</code></font> 找到</p><p>如果想要重新使用指令，除了複製外，可以記住該指令的歷史編號</p><p>使用</p><p><font color=#EB5757><code>! 歷史編號</code></font></p><p>系統就會運行該歷史編號的指令，就不用每次都找得很辛苦</p><h1 id="df-（磁碟分區的使用狀況）"><a href="#df-（磁碟分區的使用狀況）" class="headerlink" title="df （磁碟分區的使用狀況）"></a>df （磁碟分區的使用狀況）</h1><p>df指令用來顯示磁碟分區的使用狀況。它會顯示每個磁碟分區的總空間、已使用空間和可用空間</p><p>常用參數</p><ul><li><p><code>-h</code>：容量大小以人類容易閱讀的格式輸出(最常用)</p></li><li><p><code>-t</code>：只顯示指定類型的檔案系統，如: <code>df -t ext4</code></p></li><li><p><code>-T</code>：輸出同時也顯示磁碟的檔案系統</p></li><li><p><code>-k</code>：以 KB 為單位顯示輸出</p></li><li><p><code>-m</code>：以 MB 為單位顯示輸出</p></li><li><p><code>-g</code>：以 GB 為單位顯示輸出</p></li></ul><h2 id="顯示的資訊-1"><a href="#顯示的資訊-1" class="headerlink" title="顯示的資訊"></a>顯示的資訊</h2><table><thead><tr><th>名稱</th><th>定義</th></tr></thead><tbody><tr><td>Filesystem</td><td>進程 ID，是系統用來識別進程的唯一編號</td></tr><tr><td>Type</td><td>進程 ID，是系統用來識別進程的唯一編號</td></tr><tr><td>1k-blocks</td><td>進程 ID，是系統用來識別進程的唯一編號</td></tr><tr><td>Used</td><td>進程 ID，是系統用來識別進程的唯一編號</td></tr><tr><td>Available</td><td>進程 ID，是系統用來識別進程的唯一編號</td></tr><tr><td>Use%</td><td>進程 ID，是系統用來識別進程的唯一編號</td></tr><tr><td>Mounted on</td><td>進程 ID，是系統用來識別進程的唯一編號</td></tr></tbody></table><h2 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h2><ul><li><p>以人類容易閱讀的格式輸出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></figure></li><li><p>顯示特定磁碟的使用情況</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> /<br></code></pre></td></tr></table></figure></li><li><p>輸出同時也顯示磁碟的檔案系統</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -T<br></code></pre></td></tr></table></figure></li><li><p>顯示ext4檔案系統的使用情況</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -t ext4<br></code></pre></td></tr></table></figure></li><li><p>以GB為單位輸出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -g<br></code></pre></td></tr></table></figure></li></ul><h1 id="du（指定文件或目錄的大小）"><a href="#du（指定文件或目錄的大小）" class="headerlink" title="du（指定文件或目錄的大小）"></a>du（指定文件或目錄的大小）</h1><p>du 指令用於顯示指定文件或目錄的大小</p><p>常用參數</p><ul><li><code>-a</code>：顯示所有文件，包含隱藏文件</li><li><code>-h</code>：以人類容易閱讀的格式輸出(最常用)</li><li><code>-d N</code>：只顯示目錄結構的 N 層。</li></ul><h2 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a>範例</h2><ul><li><p>顯示當前目錄 與其子目錄的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> .<br></code></pre></td></tr></table></figure></li><li><p>只顯示當前目錄的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -d 1 .<br></code></pre></td></tr></table></figure></li></ul><h1 id="free（系統記憶體的使用狀況）"><a href="#free（系統記憶體的使用狀況）" class="headerlink" title="free（系統記憶體的使用狀況）"></a>free（系統記憶體的使用狀況）</h1><p>free 指令用來顯示系統記憶體的使用狀況</p><p>常用參數</p><ul><li><p><code>-b</code>：以 byte 為單位顯示輸出</p></li><li><p><code>-k</code>：以 KB 為單位顯示輸出</p></li><li><p><code>-m</code>：以 MB 為單位顯示輸出</p></li><li><p><code>-g</code>：以 GB 為單位顯示輸出</p></li><li><p><code>-t</code>：顯示記憶體跟系統虛擬記憶體的統計情況</p></li><li><p><code>-s</code>：設定刷新頻率，即時更新記憶體使用情況，如 <code>free -s 1</code> 每秒刷新</p></li></ul><h2 id="顯示資訊"><a href="#顯示資訊" class="headerlink" title="顯示資訊"></a>顯示資訊</h2><table><thead><tr><th>名稱</th><th>定義</th></tr></thead><tbody><tr><td>total</td><td>總記憶體大小</td></tr><tr><td>used</td><td>系統已使用的記憶體大小</td></tr><tr><td>free</td><td>系統可以被程序立即使用的記憶體大小</td></tr><tr><td>shared</td><td>多個進程共享的記憶體大小</td></tr><tr><td>buffers&#x2F;cache</td><td>緩衝資料的記憶體大小&#x2F;緩衝磁碟資料的記憶體大小</td></tr><tr><td>available</td><td>系統可以被程序立即使用的記憶體大小 + 緩衝資料的記憶體大小</td></tr><tr><td>swap</td><td>系統的虛擬記憶體大小</td></tr></tbody></table><h1 id="dmesg（系統啟動時的訊息）"><a href="#dmesg（系統啟動時的訊息）" class="headerlink" title="dmesg（系統啟動時的訊息）"></a>dmesg（系統啟動時的訊息）</h1><p>dmesg 指令用於顯示系統啟動時的訊息</p><ul><li>用於檢查系統啟動時是否有任何異常訊息。例如，如果系統啟動時出現錯誤訊息，可以使用 dmesg 指令來查看錯誤訊息，以便排除故障</li></ul><h2 id="範例-3"><a href="#範例-3" class="headerlink" title="範例"></a>範例</h2><ul><li>一次只顯示一頁<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dmesg | more<br></code></pre></td></tr></table></figure></li></ul><h1 id="iostat（系統磁碟-I-O-的統計資訊）"><a href="#iostat（系統磁碟-I-O-的統計資訊）" class="headerlink" title="iostat（系統磁碟 I&#x2F;O 的統計資訊）"></a>iostat（系統磁碟 I&#x2F;O 的統計資訊）</h1><p>iostat 命令用於顯示系統磁碟 I&#x2F;O 的統計資訊</p><p>常用參數</p><ul><li><code>-d</code>：顯示所有磁碟的統計資訊</li><li><code>-k</code>：以 KB 為單位顯示磁碟 I&#x2F;O 量</li><li><code>-m</code>：以 MB 為單位顯示磁碟 I&#x2F;O 量</li><li><code>-s</code>：指定統計間隔，單位為秒</li><li><code>-t</code>：指定要即時更新資訊幾次</li></ul><h2 id="顯示資訊-1"><a href="#顯示資訊-1" class="headerlink" title="顯示資訊"></a>顯示資訊</h2><p><code>磁碟 讀取 I/O 量 寫入 I/O 量 平均讀取時間 平均寫入時間</code></p><h2 id="範例-4"><a href="#範例-4" class="headerlink" title="範例"></a>範例</h2><ul><li><p>顯示所有磁碟的統計資訊，以秒為單位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iostat<br></code></pre></td></tr></table></figure></li><li><p>顯示所有磁碟的統計資訊，以 KB 為單位，每隔 5 秒顯示一次，共顯示 10 次：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iostat -d -k -s 5 -t 10<br></code></pre></td></tr></table></figure></li></ul><h1 id="netstat（網路連線狀態和資訊）"><a href="#netstat（網路連線狀態和資訊）" class="headerlink" title="netstat（網路連線狀態和資訊）"></a>netstat（網路連線狀態和資訊）</h1><p>netstat 指令用於顯示網路連線狀態和資訊</p><p>常用參數</p><ul><li><code>-a</code>：顯示所有連線，包括已啟動和已關閉的連線</li><li><code>-v</code>：顯示連線的詳細資料</li><li><code>-r</code>：顯示路由表</li><li><code>-l</code>：顯示已啟動的連線</li><li><code>-t</code>：顯示 TCP 連線</li><li><code>-u</code>：顯示 UDP 連線</li><li><code>-n</code>：使用ip表示連接，而不是用主機名稱</li></ul><h2 id="範例-5"><a href="#範例-5" class="headerlink" title="範例"></a>範例</h2><ul><li><p>查看路由表詳細資料</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -rnv<br></code></pre></td></tr></table></figure></li><li><p>查看所有連線，使用ip表示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -na<br></code></pre></td></tr></table></figure></li></ul><h1 id="proc-cpuinfo"><a href="#proc-cpuinfo" class="headerlink" title="&#x2F;proc&#x2F;cpuinfo"></a>&#x2F;proc&#x2F;cpuinfo</h1><p>這個文件記錄了系統cpu的訊息，如:型號、製造商、主頻、緩存大小、超線程技術是否啟用等。</p><p>可以用此指令查看<br><code>cat /proc/cpuinfo | more</code></p><h1 id="proc-meminfo"><a href="#proc-meminfo" class="headerlink" title="&#x2F;proc&#x2F;meminfo"></a>&#x2F;proc&#x2F;meminfo</h1><p>這個文件記錄了系統記憶體的訊息，如:總記憶體容量、可用記憶體容量、使用中記憶體容量、緩衝區記憶體容量、交換分區容量等</p><p>可以用此指令查看<br><code>cat /proc/meminfo | more</code></p><h1 id="重要的系統日誌目錄-（-var-log）"><a href="#重要的系統日誌目錄-（-var-log）" class="headerlink" title="重要的系統日誌目錄 （&#x2F;var&#x2F;log）"></a>重要的系統日誌目錄 （&#x2F;var&#x2F;log）</h1><h2 id="boot-log"><a href="#boot-log" class="headerlink" title="boot.log"></a>boot.log</h2><p>開機或關機時，一些服務啟動或關閉的訊息</p><h2 id="chronyd-NTP"><a href="#chronyd-NTP" class="headerlink" title="chronyd (NTP)"></a>chronyd (NTP)</h2><h2 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h2><p>紀錄crontab這個服務的內容</p><h2 id="maillog"><a href="#maillog" class="headerlink" title="maillog"></a>maillog</h2><p>紀錄郵件的存取與往來</p><h2 id="secure"><a href="#secure" class="headerlink" title="secure"></a>secure</h2><p>紀錄登錄系統存取的文件</p><h2 id="syslog"><a href="#syslog" class="headerlink" title="syslog"></a>syslog</h2><p>事件紀錄程序監控日誌，經常是系統出問題的訊息，Redhat 默認不生成這個日誌</p><h2 id="message"><a href="#message" class="headerlink" title="message"></a>message</h2><p>紀錄開機時發生的錯誤</p><h2 id="httpd"><a href="#httpd" class="headerlink" title="httpd"></a>httpd</h2><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://blog.csdn.net/u014644574/article/details/123420881">Linux &#x2F;var&#x2F;log下的各种日志文件详解</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 系統管理-進程相關操作</title>
    <link href="/2023/09/04/linux-system-process/"/>
    <url>/2023/09/04/linux-system-process/</url>
    
    <content type="html"><![CDATA[<h1 id="ps（查看各進程情況）"><a href="#ps（查看各進程情況）" class="headerlink" title="ps（查看各進程情況）"></a>ps（查看各進程情況）</h1><p>ps (Process Status) 是用來查看系統當前運行的進程，可以查看當前進程的狀態以及進程號等資訊，通常會先使用<code>ps</code>找出特定的進程，配合<code>kill</code>指令來終止進程。</p><h2 id="進程的狀態"><a href="#進程的狀態" class="headerlink" title="進程的狀態"></a>進程的狀態</h2><table><thead><tr><th>狀態</th><th>定義</th></tr></thead><tbody><tr><td>R</td><td>運行中  (Running)</td></tr><tr><td>S</td><td>睡眠，等待調用  (Interruptible Sleep)</td></tr><tr><td>D</td><td>等待硬碟I&#x2F;O  (Uninterruptible Sleep)</td></tr><tr><td>T</td><td>暫停狀態  (Stoped)</td></tr><tr><td>Z</td><td>僵屍進程  (Zombie)</td></tr><tr><td>N</td><td>低優先級進程</td></tr><tr><td>&lt;</td><td>高優先級進程</td></tr><tr><td>s</td><td>進程的領導者</td></tr><tr><td>I</td><td>多線程狀態</td></tr><tr><td>+</td><td>前台進程</td></tr></tbody></table><h2 id="指令風格-參數、-參數、參數"><a href="#指令風格-參數、-參數、參數" class="headerlink" title="指令風格( -參數、--參數、參數 )"></a>指令風格( <code>-參數</code>、<code>--參數</code>、<code>參數</code> )</h2><p>常會看到指令有時出現 <code>-</code>，有時 <code>--</code> ，有時前面又沒有<code>-</code>，分別代表不同風格的指令</p><ul><li>UNIX：<code>-參數</code>，如 <code>ps -ef</code></li><li>BSD：參數前沒有符號，如 <code>ps aux</code></li><li>GNU：<code>--參數</code>，如 <code>ps axu --sort -%cpu</code></li></ul><h2 id="常用參數"><a href="#常用參數" class="headerlink" title="常用參數"></a>常用參數</h2><ul><li><p><font color=#EB5757><code>a</code></font>：顯示當前終端運行的進程</p></li><li><p><font color=#EB5757><code>u</code></font>：顯示用戶相關進程與用戶相關屬性，格式會從<br>  <code>UID PID PPIC C STIME TTY TIME CMD</code> 轉變成  <code>USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</code> 的格式</p></li><li><p><font color=#EB5757><code>x</code></font>：顯示沒有控制終端的進程</p></li><li><p><font color=#EB5757><code>j</code></font>：顯示與作業有關的信息（顯示的列）：會話期ID（SID），進程組ID（PGID），控制終端（TT），終端進程組ID（TRGID）</p></li><li><p><font color=#EB5757><code>f</code></font>：樹狀結構，表達程序間的相互關係</p></li><li><p><font color=#EB5757><code>-e</code></font>：顯示所有的進程</p></li><li><p><font color=#EB5757><code>-f</code></font>：列出進程的完整資訊(最詳盡)</p></li><li><p><font color=#EB5757><code>-u</code></font>：列出指定用戶運行的進程</p></li><li><p><font color=#EB5757><code>--sort +-列名</code></font>：依照哪個列的數值排序，<code>+</code> 為升序(小 ~ 大) ; <code>-</code>為降序(大 ~ 小)</p></li></ul><h2 id="ps-f列出的詳細資訊"><a href="#ps-f列出的詳細資訊" class="headerlink" title="ps -f列出的詳細資訊"></a><code>ps -f</code>列出的詳細資訊</h2><p>以下是 <code>ps -f</code> 命令列出的進程資訊的詳細說明：</p><table><thead><tr><th>名稱</th><th>定義</th></tr></thead><tbody><tr><td>PID</td><td>進程 ID，是系統用來識別進程的唯一編號</td></tr><tr><td>USER</td><td>進程所屬的使用者</td></tr><tr><td>STAT</td><td>進程的狀態</td></tr><tr><td>TTY</td><td>進程連接的終端，若與終端無關顯示 <code>?</code></td></tr><tr><td>TIME</td><td>進程使用 CPU 的時間</td></tr><tr><td>START</td><td>進程啟動的時間</td></tr><tr><td>%CPU</td><td>進程使用的 CPU 使用率</td></tr><tr><td>%MEM</td><td>進程使用的記憶體使用率</td></tr><tr><td>VSZ</td><td>進程使用的虛擬記憶體(內存)大小</td></tr><tr><td>RSS</td><td>進程使用的實際記憶體(內存)大小</td></tr><tr><td>COMMAND</td><td>進程的命令行</td></tr></tbody></table><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><ul><li><p>不加任何參數查看當前使用的終端會話(你當前使用的帳號)正在使用的進程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps<br></code></pre></td></tr></table></figure></li><li><p>顯示所有進程的完整資訊 (最常用)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef<br></code></pre></td></tr></table></figure></li><li><p>想要查看CPU、記憶體等資訊時 (u 跟 j 只能選一個用)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps aux<br></code></pre></td></tr></table></figure></li><li><p>查看與job 作業有關的列資訊，也可以用來查看守護進程 (u 跟 j 只能選一個用)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps axj<br></code></pre></td></tr></table></figure></li><li><p>查詢當前nginx 相關的進程，通常可以用在當nginx 占用進程號，需要將他停止時</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef | grep nginx<br></code></pre></td></tr></table></figure></li><li><p>後續使用grep 又想保留標題行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef | grep -E <span class="hljs-string">&quot;^USER|nginx&quot;</span><br><br><span class="hljs-comment"># 看你選擇要顯示的列擇一</span><br>ps -ef | grep -E <span class="hljs-string">&quot;^UID|nginx&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>查看root用戶運行的進程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -f -u root<br></code></pre></td></tr></table></figure></li><li><p>依照cpu 使用率排序 大 ~ 小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps aux --<span class="hljs-built_in">sort</span> -%cpu<br></code></pre></td></tr></table></figure></li></ul><h1 id="kill（中止進程）"><a href="#kill（中止進程）" class="headerlink" title="kill（中止進程）"></a>kill（中止進程）</h1><ul><li>用來終止特定進程的運行，通過向進程發起信號，來結束相對應的進程</li><li>需要有足夠的權限，才能夠停止其他用戶的進程</li><li>若不加任何參數，預設為<code>-15</code>，使用信號15，進程會正常退出</li></ul><p>常用參數</p><ul><li>-l：列出所有的信號名稱</li><li>-u：終止指定用戶的進程</li></ul><h2 id="常用信號"><a href="#常用信號" class="headerlink" title="常用信號"></a>常用信號</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span>   PID (預設使用-15停止進程)<br><br><span class="hljs-built_in">kill</span> -1  PID (重新開啟進程)<br><br><span class="hljs-built_in">kill</span> -2  PID (像是crtl+c 一樣的停止進程)<br><br><span class="hljs-built_in">kill</span> -9  PID (強制停止進程)<br><br><span class="hljs-built_in">kill</span> -15  PID (發送信號給進程，請他正常退出)<br></code></pre></td></tr></table></figure><h2 id="查看所有的信號名稱"><a href="#查看所有的信號名稱" class="headerlink" title="查看所有的信號名稱"></a>查看所有的信號名稱</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -l<br></code></pre></td></tr></table></figure><h2 id="強制退出進程"><a href="#強制退出進程" class="headerlink" title="強制退出進程"></a>強制退出進程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -9 PID<br></code></pre></td></tr></table></figure><h2 id="終止指定用戶的進程"><a href="#終止指定用戶的進程" class="headerlink" title="終止指定用戶的進程"></a>終止指定用戶的進程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -u 用戶帳號<br></code></pre></td></tr></table></figure><h1 id="nice（設定進程的優先級）"><a href="#nice（設定進程的優先級）" class="headerlink" title="nice（設定進程的優先級）"></a>nice（設定進程的優先級）</h1><p>設定進程的優先級，設定數值為-20~19，數字越少，進程優先級越高</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nice</span> -n -10 <span class="hljs-built_in">sleep</span> 500<br></code></pre></td></tr></table></figure><ul><li><p>這會將 <code>sleep 500</code> 設置為較高的優先級（-10），使其在系統資源分配中更有可能獲得更多的CPU時間。</p></li><li><p>nice 命令通常需要超級用戶權限（root）才能將進程優先級降低。普通用戶只能將其提高到0</p></li></ul><h1 id="切換進程的指令"><a href="#切換進程的指令" class="headerlink" title="切換進程的指令"></a>切換進程的指令</h1><h2 id="ctrl-z-、-ctrl-c"><a href="#ctrl-z-、-ctrl-c" class="headerlink" title="ctrl+z 、 ctrl+c"></a>ctrl+z 、 ctrl+c</h2><ul><li><p><code>ctrl+c</code>：強制中斷進程，只能中斷前台運行的程序，如果要中斷後台運行的程序要用到<code>kill</code>指令</p></li><li><p><code>ctrl+z</code>：暫時停止進程 (掛起)</p></li></ul><h2 id="jobs（要查看當前終端會話中的所有作業及其對應的作業號）"><a href="#jobs（要查看當前終端會話中的所有作業及其對應的作業號）" class="headerlink" title="jobs（要查看當前終端會話中的所有作業及其對應的作業號）"></a>jobs（要查看當前終端會話中的所有作業及其對應的作業號）</h2><p>要查看當前終端會話中的所有作業及其對應的作業號，可以使用 <code>jobs</code> 命令。這將列出所有正在運行的作業及其狀態。</p><p>輸出類似如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 分別為 作業號  運行狀態   程序名稱</span><br>[<span class="hljs-meta">1</span>] Stopped             sleep <span class="hljs-number">500</span><br>[<span class="hljs-meta">2</span>] Running             tcpdump <br></code></pre></td></tr></table></figure><h2 id="bg（將進程抓到後台去執行）"><a href="#bg（將進程抓到後台去執行）" class="headerlink" title="bg（將進程抓到後台去執行）"></a>bg（將進程抓到後台去執行）</h2><p>將進程抓到後台去執行</p><ul><li><p>將上一個掛起的進程，拿到後台執行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bg</span><br></code></pre></td></tr></table></figure></li><li><p>將指定作業號的進程，拿到後台執行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bg</span> 作業號<br></code></pre></td></tr></table></figure></li></ul><p>運行完會看到類似輸出</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 分別為 作業號  PID</span><br>[<span class="hljs-meta">1</span>] <span class="hljs-number">4327</span><br><br></code></pre></td></tr></table></figure><h2 id="fg（將進程抓到前台終端去執行）"><a href="#fg（將進程抓到前台終端去執行）" class="headerlink" title="fg（將進程抓到前台終端去執行）"></a>fg（將進程抓到前台終端去執行）</h2><p>將進程抓到前台終端去執行</p><ul><li><p>將上一個掛起的進程，拿到前台執行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">fg</span><br></code></pre></td></tr></table></figure></li><li><p>將指定作業號的進程，拿到前台執行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">fg</span> %作業號<br></code></pre></td></tr></table></figure></li></ul><h2 id="nohup（讓一個命令在後台運行，且不受終端關閉影響）"><a href="#nohup（讓一個命令在後台運行，且不受終端關閉影響）" class="headerlink" title="nohup（讓一個命令在後台運行，且不受終端關閉影響）"></a>nohup（讓一個命令在後台運行，且不受終端關閉影響）</h2><p>讓一個命令在後台運行，且不受終端關閉影響</p><p>雖然 nohup 可以讓一個進程在後台持續運行，但它並不會自動將該進程轉化為典型的守護進程。它仍然與終端會話相關聯，只是在終端關閉後也繼續運行。</p><p>運行時預設會創建一個<code>nohup.out</code>文件紀錄指令運行的過程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> 指令 &amp;<br></code></pre></td></tr></table></figure><ul><li><p>輸出到指定文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> <span class="hljs-built_in">sleep</span> 500 &gt; custom.out &amp;<br></code></pre></td></tr></table></figure></li><li><p>將標準錯誤輸出到指定文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> <span class="hljs-built_in">sleep</span> 500 &gt; custom.out 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><p><font color=#EB5757><code>2&gt;&amp;1</code></font> ，2 為標準錯誤，1為標準輸出，也就是將標準錯誤的輸出，覆蓋掉原本標準輸出的位置<code>custom.out</code></p></li><li><p>忽略標準輸出 跟 標準錯誤 的訊息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> <span class="hljs-built_in">sleep</span> 500 &gt; /dev/null  2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><p><font color=#EB5757><code>/dev/null</code></font> ，是一個特殊設備文件，他將一切寫入他的輸入給丟棄</p><p>  <font color=#EB5757><code>2&gt;&amp;1</code></font>， 把標準錯誤輸出也一起丟到標準輸入中，也就是把標準錯誤也一起丟到 <font color=#EB5757><code>/dev/null</code></font></p></li></ul><h2 id="範例介紹-使用sleep-指令練習-進程切換"><a href="#範例介紹-使用sleep-指令練習-進程切換" class="headerlink" title="範例介紹-使用sleep 指令練習 進程切換"></a>範例介紹-使用sleep 指令練習 進程切換</h2><ol><li><p>先在前台運行sleep 指令</p><p> <code>sleep 500</code>，這個指令會占用終端指定秒數(500)後，再將終端返回給用戶，適合拿來練習操作掛起、後台執行等操作</p></li><li><p>將它掛起 <font color=#EB5757><code>ctrl+Z</code></font></p><p> 此時 <code>sleep 500</code> 這個進程暫時停止了</p></li><li><p>使用 <code>jobs</code> 指令查看當前的任務有哪些，可以看到</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以下資訊分別為</span><br><span class="hljs-comment"># 作業號 ,  進程狀態  , 運行的程式名稱</span><br><br>[1]+ Stopped     <span class="hljs-built_in">sleep</span> 500<br></code></pre></td></tr></table></figure><p> 或是想要使用 <code>ps -ef | grep sleep</code> 檢查進程是否還在</p></li><li><p>若想讓 <code>sleep 500</code> 在後台執行，輸入 <font color=#EB5757><code>bg 作業號</code></font>，也就是 <font color=#EB5757><code>bg 1</code></font> ，或是使用<font color=#EB5757><code>bg</code></font> 重新讓上一次掛起的進程再度開始在後台執行，運行完會出現類似 作業號,  PID 的輸出</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 作業號  PID</span><br>[1]  4237<br></code></pre></td></tr></table></figure></li><li><p>如果一開始執行就想要讓他在後台執行可以使用 <font color=#EB5757><code>指令 &amp;</code></font> ，也就是 <code>sleep 500 &amp;</code> </p></li><li><p>若想將 <code>sleep 500</code> 回到前台執行 使用 <font color=#EB5757><code>fg %作業號</code></font> ，也就是 <font color=#EB5757><code>fg %1</code></font></p></li><li><p>最後不想執行了，使用 <font color=#EB5757><code>ctrl+c</code></font> 停止</p></li></ol><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://www.cnblogs.com/peida/archive/2012/12/20/2825837.html">每天一个linux命令（42）：kill命令</a></p><p><a href="https://www.jianshu.com/p/943b90150c10">Linux-ps命令学习</a></p><p><a href="https://www.runoob.com/linux/linux-comm-ps.html">Linux ps 命令</a></p><p><a href="https://blog.csdn.net/welcomword/article/details/122000607">Linux 使用 grep 保留表头（首行|标题）的解决方案</a></p><p><a href="https://blog.csdn.net/deniece1/article/details/102770363">bg和fg指令（整理）以及 Linux中Ctrl+C、Ctrl+D等按键操作&amp;进程相关命令</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 系統管理-常見名詞介紹</title>
    <link href="/2023/09/03/linux-system-management-introduce/"/>
    <url>/2023/09/03/linux-system-management-introduce/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在開始使用系統管理相關的指令前，需要先搞懂常用的名詞，以及各名詞間的關係，才知道要解決問題時要往哪個方向進行，本文會先介紹一些在系統上常用的名詞</p><h1 id="系統常見名詞"><a href="#系統常見名詞" class="headerlink" title="系統常見名詞"></a>系統常見名詞</h1><h2 id="Application（應用程式）-Service（服務）"><a href="#Application（應用程式）-Service（服務）" class="headerlink" title="Application（應用程式） &#x3D; Service（服務）"></a>Application（應用程式） &#x3D; Service（服務）</h2><ul><li>應用程式（Application）是一個軟體程序，通常用戶可以運行它來執行特定的任務或功能。</li><li>服務（Service）是在背景運行的一種應用程式，通常無需用戶交互。服務可以在系統啟動時自動運行，並在後台執行特定的任務或提供功能。</li></ul><h2 id="Process（進程）"><a href="#Process（進程）" class="headerlink" title="Process（進程）"></a>Process（進程）</h2><ul><li>進程是正在運行的某個程序的實例。每個進程都有自己的記憶體空間和資源，並且可以獨立運行。每個進程都有自己的編號(PID)。運行一個命令，會開啟一個進程，如:運行一個<code>ls</code>命令，他就會開啟一個進程</li><li>進程可以同時運行多個任務，並且可以在操作系統的進程管理下進行調度。</li></ul><h2 id="Threads（執行緒）"><a href="#Threads（執行緒）" class="headerlink" title="Threads（執行緒）"></a>Threads（執行緒）</h2><ul><li>執行緒是在單個進程內運行的單位。一個進程可以包含多個執行緒，這些執行緒共享相同的記憶體空間，但具有自己的執行上下文。</li><li>執行緒可以實現多任務並行執行，但需要注意處理共享資源的同步和互斥問題。</li></ul><h2 id="Job（作業）"><a href="#Job（作業）" class="headerlink" title="Job（作業）"></a>Job（作業）</h2><ul><li><p>指的是終端上運行的一個或多個進程，如:使用了ssh終端連線到linux，並在終端上執行了<code>sleep 500</code>命令，<code>sleep 500</code>就是該終端上的一個作業，可以使用<code>jobs</code>查看當前終端所有的作業有哪些</p></li><li><p>終端 ⇒ 作業(多個or 一個命令，每個命令都有自己的作業號)</p></li><li><p>作業號（Job Number）不同於進程 ID（PID）。作業號是一個 <strong>在終端會話中分配給正在運行的作業的數字標識符，而不是唯一的進程 ID。</strong> 作業號通常從 1 開始遞增。每個作業可以包含一個或多個相關的進程。</p></li><li><p>當在終端上啟動一個命令時，它會形成一個作業，該作業可以包含一個或多個相關的進程。例如，如果您在終端上運行一個後台進程，該作業可能包含一個進程。</p></li><li><p>如果在終端上運行多個命令並將其中一個置於後台運行，每個命令都可以形成一個獨立的作業，每個作業都有其自己的作業號。</p></li></ul><h2 id="Session（會話）"><a href="#Session（會話）" class="headerlink" title="Session（會話）"></a>Session（會話）</h2><p>會話（Session）是一個或多個進程組的集合。<br>一個會話只能有一個控制終端。這通常是登陸到其上的終端設備（在終端登陸情況下）或偽終端設備（在網絡登陸情況下）。</p><ul><li><p>建立與控制終端連接的會話首進程被稱為<strong>控制進程</strong>。其PID&#x3D;SID</p></li><li><p>一個會話中的幾個進程組可被分為</p><ul><li>一個前台進程組</li><li>一個或多個後台進程組</li><li>shell 本身自己一個進程組</li></ul></li><li><p>所以一個會話中，應該包括</p><ul><li>控制進程（會話首進程）</li><li>一個前台進程組</li><li>任意數量後台進程組</li></ul></li><li><p>當用戶在控制終端輸入了特殊控制鍵(如:ctrl+c)，內核就會發送信號給前台進程組中的所有進程</p></li></ul><h2 id="進程組"><a href="#進程組" class="headerlink" title="進程組"></a>進程組</h2><p>每個進程都屬於一個進程組，存在的目的是當信號發給一個進程組時，組內的進程都可以收到信號，方便管理</p><ul><li>進程組包含一個or多個進程。通常它們與同一作業相關聯，可以接收來自同一終端的各種信號。</li><li>每個進程組有一個唯一的進程組ID。每個進程組都可以有一個組長進程。其進程組ID等於其組長進程ID。</li><li>組長進程可以創建一個進程組，創建該組中的進程，然後終止。只要在某個進程組中一個進程存在，則該進程組就存在，這與其組長進程是否終止無關。</li></ul><h1 id="進程相關的名詞"><a href="#進程相關的名詞" class="headerlink" title="進程相關的名詞"></a>進程相關的名詞</h1><h2 id="後台運行-（Background）"><a href="#後台運行-（Background）" class="headerlink" title="後台運行 （Background）"></a>後台運行 （Background）</h2><p>指的是在不占用終端的情況下運行的進程</p><p>進程能夠在不阻塞終端下背景執行，用戶可以在終端繼續輸入指令</p><p>終端關閉後程序會停止運行</p><p>要讓指令在後台運行，可以在指令後面加上 <font color=#EB5757><code>&amp;</code></font> ， 如 <font color=#EB5757><code>sleep 100 &amp;</code></font></p><p>或者是一個原本在前台運行的進程，使用 <font color=#EB5757><code>ctrl+Z</code></font> 將程式暫停執行(掛起)，接著使用 <font color=#EB5757><code>bg 作業號</code></font></p><p>讓該程式改到後台運行</p><h2 id="前台運行-（Foreground）"><a href="#前台運行-（Foreground）" class="headerlink" title="前台運行 （Foreground）"></a>前台運行 （Foreground）</h2><p>在終端上直接運行的進程，運行中會阻塞終端，用戶無法在終端繼續輸入指令</p><p>終端關閉後程序會停止運行</p><p>可以使用 <font color=#EB5757><code>fg %作業號</code></font>  (不是PID)將原本後台執行的指令放到前台</p><h2 id="掛起-（suspended）"><a href="#掛起-（suspended）" class="headerlink" title="掛起 （suspended）"></a>掛起 （suspended）</h2><p>暫時停止一個進程的執行 <font color=#EB5757><code>ctrl+Z</code></font> ，只能用在前台運行的進程，如果要掛起後台的進程可以先把他叫到前台，或是使用<code>kill</code> 指令</p><p>常用在可能需要長時間處理的進程，先讓他暫緩執行，或者是操作到一半的工作，想要暫停一下去做其他動作</p><p>例如: 正在使用vi 編輯器編輯文件，突然想要做其他事，就可以用 <font color=#EB5757><code>ctrl+Z</code></font> 將進程暫停，等需要時在使用 <font color=#EB5757><code>fg</code></font> 指令將原本編輯到一半的vi 編輯器叫回來</p><h2 id="守護進程（Daemon）"><a href="#守護進程（Daemon）" class="headerlink" title="守護進程（Daemon）"></a>守護進程（Daemon）</h2><p>守護進程通常以字母d 結尾，如<code>Systemd</code></p><p>大多是系統啟動就運行，直到系統關閉才終止</p><p>不依賴於終端，終端關閉後仍會繼續運行</p><h2 id="殭屍進程-Zombie-Process"><a href="#殭屍進程-Zombie-Process" class="headerlink" title="殭屍進程 (Zombie Process)"></a>殭屍進程 (Zombie Process)</h2><ul><li><p>指已經完成執行的子進程，但其父進程仍然存活並且未能正確地回收子進程的資源，導致子進程處於”殭屍”狀態。這個子進程不再執行任何程式碼，但仍然存在在系統進程表中，佔據系統資源，並且通常會占用一個進程ID（PID）。</p></li><li><p>當子進程完成其任務後，它會向其父進程發送一個退出信號，父進程應該使用相關的系統調用（例如<code>wait()</code>或<code>waitpid()</code>）來獲取子進程的退出狀態，並釋放子進程的資源。如果父進程沒有進行這些操作，子進程就會變成殭屍進程。</p></li></ul><h1 id="切換進程的指令"><a href="#切換進程的指令" class="headerlink" title="切換進程的指令"></a>切換進程的指令</h1><p>相關切換進程的指令可以參考另一篇文章</p><a href="/2023/09/04/linux-system-process/" title="Linux 系統管理-進程相關操作">Linux 系統管理-進程相關操作</a><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://blog.csdn.net/deniece1/article/details/102770363">bg和fg指令（整理）以及 Linux中Ctrl+C、Ctrl+D等按键操作&amp;进程相关命令</a></p><p><a href="https://zhuanlan.zhihu.com/p/266720121">搞懂进程组、会话、控制终端关系，才能明白守护进程如何创建</a></p><p><a href="https://www.zhihu.com/question/38609004">什么是守护进程？</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 解壓縮、壓縮檔案</title>
    <link href="/2023/09/01/linux-compress-and-uncompress/"/>
    <url>/2023/09/01/linux-compress-and-uncompress/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>檔案的打包與壓縮原本是設計用來備份系統文件的，但後來逐漸應用在傳輸大量文件上，將多個文件跟目錄組織在一起傳輸，除此之外也能夠維持目錄結構的完整性，方便程式部屬，本文將介紹一些常用的打包、壓縮文件的指令。</p><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><p>打包，只是將多個文件跟目錄，組織到一個文件中(不是目錄)，並沒有進行壓縮</p><p>打包過後的檔案，建議以 <strong><font color=#EB5757><code>.tar</code></font></strong> 為文件擴展名，對於後續壓縮、解壓縮時操作較不容易發生錯誤，其他人看到 <strong><font color=#EB5757><code>.tar</code></font></strong> 擴展名，也能知道這是一個被打包過的文件</p><h1 id="壓縮"><a href="#壓縮" class="headerlink" title="壓縮"></a>壓縮</h1><p>壓縮，對於打包過的文件進行壓縮，減少傳輸時文件的大小，建議以 <strong><font color=#EB5757><code>.tar.gz</code></font></strong> 、 <strong><font color=#EB5757><code>.tgz</code></font></strong> 為文件擴展名</p><h1 id="tar-打包檔案、壓縮、解壓縮"><a href="#tar-打包檔案、壓縮、解壓縮" class="headerlink" title="tar (打包檔案、壓縮、解壓縮)"></a>tar (打包檔案、壓縮、解壓縮)</h1><p>基本上關於文件的打包、壓縮，只要記得這個指令就好</p><p>只要用<code>-z</code>參數就能調用<code>gzip</code>來壓縮了，除非本來只有打包成<code>.tar</code>檔，想要把它變成<code>.tar.gz</code>，才需要單獨使用<code>gzip</code>命令。</p><p>常用參數</p><ul><li><strong><font color=#EB5757><code>-f</code></font></strong> ：<font color=#EB5757>放在參數最後面，後面緊接著打包檔的檔案名稱</font>，一定會使用的參數</li><li><code>-c</code> ：打包檔案</li><li><code>-x</code> ：還原檔案</li><li><strong><font color=#EB5757><code>-z</code></font></strong> ：調用gzip來<code>壓縮</code>or<code>解壓縮</code>檔案</li><li><code>-v</code> ：顯示壓縮、打包的執行過程</li><li><code>-t</code> ：不會進行解壓縮，只是可以看到一個壓縮檔裡面的內容</li></ul><p>以下是常用範例</p><h2 id="打包文件-c"><a href="#打包文件-c" class="headerlink" title="打包文件 (-c)"></a>打包文件 (-c)</h2><ul><li><p>打包單一個檔案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -cvf 打包檔名稱.tar 來源檔案 <br></code></pre></td></tr></table></figure></li><li><p>打包多個檔案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -cvf 打包檔名稱.tar 來源檔案1 來源檔案2 ..來源檔案n<br></code></pre></td></tr></table></figure></li></ul><h2 id="打包並壓縮文件-cz"><a href="#打包並壓縮文件-cz" class="headerlink" title="打包並壓縮文件 (-cz)"></a>打包並壓縮文件 (-cz)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -czvf 壓縮檔名稱.tgz 來源檔案 <br></code></pre></td></tr></table></figure><h2 id="解壓文件-xz"><a href="#解壓文件-xz" class="headerlink" title="解壓文件 (-xz)"></a>解壓文件 (-xz)</h2><ul><li><code>-c</code>、<code>-x</code> 是相對的，一個是打包檔案，一個是還原檔案，後面接<code>z</code>，命令會知道要去<code>壓縮</code>還是<code>解壓縮</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xzvf 壓縮檔名稱.tgz <br></code></pre></td></tr></table></figure><h2 id="查看壓縮檔內的內容-t"><a href="#查看壓縮檔內的內容-t" class="headerlink" title="查看壓縮檔內的內容 (-t)"></a>查看壓縮檔內的內容 (-t)</h2><ul><li>只是查看檔案內容，沒有進行解壓縮</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -tf 壓縮檔名稱.tgz <br></code></pre></td></tr></table></figure><h1 id="gzip-壓縮、解壓縮文件"><a href="#gzip-壓縮、解壓縮文件" class="headerlink" title="gzip (壓縮、解壓縮文件)"></a>gzip (壓縮、解壓縮文件)</h1><p>用來解壓縮、壓縮檔案，基本上可以用 tar <code>-z</code> 取代</p><h2 id="壓縮-1"><a href="#壓縮-1" class="headerlink" title="壓縮"></a>壓縮</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gzip 檔案名稱.tar<br></code></pre></td></tr></table></figure><h2 id="解壓縮"><a href="#解壓縮" class="headerlink" title="解壓縮"></a>解壓縮</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gzip -d 檔案名稱.tar.gz<br></code></pre></td></tr></table></figure><h1 id="gunzip-壓縮、解壓縮文件，gzip-的硬連結"><a href="#gunzip-壓縮、解壓縮文件，gzip-的硬連結" class="headerlink" title="gunzip (壓縮、解壓縮文件，gzip 的硬連結)"></a>gunzip (壓縮、解壓縮文件，gzip 的硬連結)</h1><p>gzip 的 硬連結，基本上可以用 <code>tar -z</code> 取代</p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://www.vixual.net/blog/archives/127">tar 指令的常用語法</a></p><p><a href="https://www.runoob.com/linux/linux-comm-tar.html">Linux tar 命令</a></p><p><a href="https://www.runoob.com/linux/linux-comm-gzip.html">Linux gzip命令</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 文本處理(3) (cut、grep、awk、sort、uniq、wc)</title>
    <link href="/2023/08/28/linux-text-processing3/"/>
    <url>/2023/08/28/linux-text-processing3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前面兩篇關於文本處理的文章</p><a href="/2023/08/26/linux-text-processing/" title="Linux 文本處理(1) (查看文件內容)(cat、more、less、tail、head)">Linux 文本處理(1) (查看文件內容)</a><p>以及</p><a href="/2023/08/26/linux-text-processing2/" title="Linux 文本處理(2) (寫入資料到文件)(重定向指令 &gt;、&gt;&gt;、| 管道、標準數據流 stdin、stdout、stderr)">Linux 文本處理(2) (寫入資料到文件)</a><p>介紹了基本的文本操作，今日就來介紹其他較為進階的文本操作指令，包含搜尋關鍵字、排序、切割文本等操作。</p><h1 id="cut-切割、擷取文字"><a href="#cut-切割、擷取文字" class="headerlink" title="cut (切割、擷取文字)"></a>cut (切割、擷取文字)</h1><p>常用來切割文字，擷取特定位置的字符，或是以特定的分割符，擷取特定的欄位，很像一般程式語言中的 <strong><font color=#EB5757><code>split()</code></font></strong> 方法，會以每<code>行</code>作為單位執行</p><p>常用參數</p><ul><li><code>-c</code>：擷取特定位置的字符(從1開始)，擷取多個位置用 <code>,</code>分開，連續位置用 <code>-</code></li><li><code>-f</code>：用分割符分割後，擷取哪列的值，多列也是用<code>,</code>分隔，都配合 <code>-d</code> 使用，沒有設定分隔符就是單純把每行印出來</li><li><code>-d</code>：指定分割符</li></ul><p>以下為使用範例</p><h2 id="擷取特定位置字符"><a href="#擷取特定位置字符" class="headerlink" title="擷取特定位置字符"></a>擷取特定位置字符</h2><ul><li><p><strong>切割文本文件每行的第1至3个字符：</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cut</span> -c 1-3 文件名.txt<br><br><span class="hljs-comment"># 假設文本內容為</span><br>abcddd<br>bbcddd<br><br><span class="hljs-comment"># 輸出會為</span><br>abc<br>bbc<br></code></pre></td></tr></table></figure></li><li><p><strong>擷取文件內每行的1,3,5 的字符</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cut</span> -c 1,3,5 文件名.txt<br><br><span class="hljs-comment"># 假設文本內容為</span><br>abcddd<br>bbcddd<br><br><span class="hljs-comment"># 輸出會為</span><br>acd<br>bcd<br></code></pre></td></tr></table></figure></li><li><p><strong>擷取文件內每行1至3、6至9 的字符</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cut</span> -c 1-3,6-9 文件名.txt<br><br><span class="hljs-comment"># 假設文本內容為</span><br>abcdddasdg<br>bbcdddasdg<br><br><span class="hljs-comment"># 輸出會為</span><br>abcdas<br>bbcdas<br></code></pre></td></tr></table></figure></li></ul><h2 id="以分隔符分割，擷取欄位值"><a href="#以分隔符分割，擷取欄位值" class="headerlink" title="以分隔符分割，擷取欄位值"></a>以分隔符分割，擷取欄位值</h2><ul><li><p><strong>切割以逗號分隔的CSV文件的第2列和第4列：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;,&#x27;</span> -f 2,4 數據.csv<br></code></pre></td></tr></table></figure></li><li><p><strong>切割以冒号分隔的密碼文件的用户名字段：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;:&#x27;</span> -f 1 /etc/passwd<br></code></pre></td></tr></table></figure></li></ul><h2 id="與其他命令結合使用"><a href="#與其他命令結合使用" class="headerlink" title="與其他命令結合使用"></a>與其他命令結合使用</h2><ul><li><p><strong>從標準輸入讀取數據，切割第1、第3和第5个字符：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello,World&quot;</span> | <span class="hljs-built_in">cut</span> -c 1,3,5<br></code></pre></td></tr></table></figure></li></ul><h1 id="grep-搜尋關鍵字"><a href="#grep-搜尋關鍵字" class="headerlink" title="grep (搜尋關鍵字)"></a>grep (搜尋關鍵字)</h1><p><code>grep</code>、 <code>sed</code>、<code>awk</code> 並稱linux 文本處理三劍客</p><p><code>grep</code>是用來<code>搜尋關鍵字</code>，它可以使用正規表示式搜尋文字，並把匹配的行打印出來。全稱是 Global Regular Expression Print。</p><p>常用參數</p><ul><li><p><strong><font color=#EB5757><code>-i</code></font></strong> ：忽略大小寫進行搜索</p></li><li><p><code>-r</code> 或 <code>-R</code> ：遞歸地在<code>目錄</code>中搜索匹配的文本</p></li><li><p><code>-l</code> ：顯示包含匹配文本的<code>文件名</code>。通常配合通配符<code>*</code>使用</p></li><li><p><code>-n</code> ：顯示匹配文本所在的行號</p></li><li><p><code>-v</code> ：反轉搜索，只顯示不匹配模式的行</p></li><li><p><strong><font color=#EB5757><code>-c</code></font></strong> ：顯示匹配行的數量</p></li><li><p><code>-A num</code> ：顯示匹配行及<code>後面</code> num 行的內容</p></li><li><p><code>-B num</code> ：顯示匹配行及<code>前面</code> num 行的內容</p></li><li><p><strong><font color=#EB5757><code>-C num</code></font></strong> ：顯示匹配行以及<code>前後</code>各 num 行的內容</p></li><li><p><code>--color=always</code> ：關鍵字高亮</p></li></ul><p>常用範例</p><h2 id="搜尋關鍵字"><a href="#搜尋關鍵字" class="headerlink" title="搜尋關鍵字"></a>搜尋關鍵字</h2><ul><li><p><strong>在文件 “file.txt” 中搜索包含 “apple” 的行：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;apple&quot;</span> file.txt<br></code></pre></td></tr></table></figure></li></ul><h2 id="針對目錄遞歸搜尋-r"><a href="#針對目錄遞歸搜尋-r" class="headerlink" title="針對目錄遞歸搜尋(-r)"></a>針對目錄遞歸搜尋(-r)</h2><ul><li><p><strong>在目錄 “&#x2F;home” 及其子目錄中搜索包含 “error” 的文本文件：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -r <span class="hljs-string">&quot;error&quot;</span> /home<br></code></pre></td></tr></table></figure></li></ul><h2 id="忽略大小寫-i"><a href="#忽略大小寫-i" class="headerlink" title="忽略大小寫(-i)"></a>忽略大小寫(-i)</h2><ul><li><p><strong>忽略大小寫，在文件 “file.txt” 中搜索 “Code: 502”：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -i <span class="hljs-string">&quot;Code: 502&quot;</span> file.txt<br></code></pre></td></tr></table></figure></li></ul><h2 id="顯示行號-n"><a href="#顯示行號-n" class="headerlink" title="顯示行號(-n)"></a>顯示行號(-n)</h2><ul><li><p><strong>在文件 “file.txt” 中搜索 “apple” 並顯示行號：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -n <span class="hljs-string">&quot;apple&quot;</span> file.txt<br></code></pre></td></tr></table></figure></li></ul><h2 id="顯示包含匹配文本的文件名-l"><a href="#顯示包含匹配文本的文件名-l" class="headerlink" title="顯示包含匹配文本的文件名(-l)"></a>顯示包含匹配文本的文件名(-l)</h2><ul><li><p><strong>在當前目錄搜尋顯示包含 “apple” 的文件名，而不顯示匹配的行：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -l <span class="hljs-string">&quot;apple&quot;</span> *<br></code></pre></td></tr></table></figure></li><li><p><strong>在指定目錄還有其子目錄，搜尋內容包含”test”的文件名：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -r <span class="hljs-string">&quot;test&quot;</span> -l /home/<br></code></pre></td></tr></table></figure></li><li><p><strong>搜尋指定目錄下的文件，內容包含”test”的文件名：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep  <span class="hljs-string">&quot;test&quot;</span> -l /home/*<br></code></pre></td></tr></table></figure></li></ul><h2 id="顯示匹配行及前後num行-C數字"><a href="#顯示匹配行及前後num行-C數字" class="headerlink" title="顯示匹配行及前後num行(-C數字)"></a>顯示匹配行及前後num行(-C數字)</h2><ul><li><p><strong>搜尋關鍵字，顯示匹配行及其後4行</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>grep -C4 <span class="hljs-string">&quot;status: 502&quot;</span> 2020-1-1.<span class="hljs-built_in">log</span> <br></code></pre></td></tr></table></figure></li></ul><h2 id="關鍵字高亮-color-always"><a href="#關鍵字高亮-color-always" class="headerlink" title="關鍵字高亮 --color=always"></a>關鍵字高亮 <code>--color=always</code></h2><ul><li>關鍵字高亮，如果有用到管道，需要兩個都加  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -C4 <span class="hljs-string">&quot;status: 502&quot;</span> 2020-1-1.<span class="hljs-built_in">log</span>  --color=always | grep -C4 <span class="hljs-string">&quot;url&quot;</span>  --color=always<br></code></pre></td></tr></table></figure></li></ul><h1 id="egrep-grep高配版"><a href="#egrep-grep高配版" class="headerlink" title="egrep (grep高配版)"></a>egrep (grep高配版)</h1><p>grep 的高級版，可以同時搜尋多個關鍵字</p><pre><code class="hljs"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">egrep <span class="hljs-string">&quot;A|B&quot;</span> 文件名.txt<br></code></pre></td></tr></table></figure></code></pre><h1 id="awk-以分隔符擷取文字"><a href="#awk-以分隔符擷取文字" class="headerlink" title="awk (以分隔符擷取文字)"></a>awk (以分隔符擷取文字)</h1><p>簡單來說就是逐行讀取文本，以 <code>空格 or Tab</code> 將每行分割成小單位，也可以自訂分隔符號，最後將結果輸出</p><h2 id="語法格式"><a href="#語法格式" class="headerlink" title="語法格式"></a>語法格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;&#123;動作&#125;&#x27;</span> 文件名<br><br>awk <span class="hljs-string">&#x27;條件 &#123;動作&#125;&#x27;</span> 文件名<br></code></pre></td></tr></table></figure><ul><li><p>其中 <code>&#123;動作&#125;</code> 最常使用的是 print，還有其他如printf (格式化輸出)、if 語句，操作一些內置的函數如 length() 獲取字串的長度、substr() 擷取字串等</p></li><li><p>如果指定<code>條件</code>，當條件符合時才會執行動作</p></li></ul><p>常用參數</p><ul><li><code>-F</code>：指定分隔符，默認為 <font color=#EB5757><code>空格 or Tab</code></font></li><li><code>-f</code>：使用awk腳本，來處理文本</li><li><code>-v</code>：awk需要使用shell 裡面的變數時，需要先用-v 定義，無法直接使用</li></ul><p>常用的變數</p><ul><li><code>$0</code>： 打印整行 ，之後的數字代表字符以分隔符分隔後所在的位置 $1、$2…以此類推</li><li><code>NR</code>： 每行的行號</li><li><code>NF</code>： 每行用空格分隔後，字段的數量</li></ul><h2 id="內置變數"><a href="#內置變數" class="headerlink" title="內置變數"></a>內置變數</h2><p>前面都不需要加$</p><ul><li><code>FILENAME</code>： 當前文件名</li><li><code>FS</code>：       分隔符，默認為 空格 or Tab</li><li><code>RS</code>：       行分隔符，默認為  換行符</li><li><code>OFS</code>：      輸出的字段的分隔符，默認為空格，可以用 OFS&#x3D;”~” 來指定，前面加上<code>-v</code></li><li><code>ORS</code>：      輸出行的分隔符，默認為空格</li><li><code>OFMT</code>：     輸出的數字的格式，默認為%.6g</li><li><font color=#EB5757><code>NF</code></font>：       每行用空格分隔後，字段的數量， 所以也可以用此找出每行的最後一個字</li></ul><h2 id="內置函數"><a href="#內置函數" class="headerlink" title="內置函數"></a>內置函數</h2><ul><li><code>toupper()</code>：大寫</li><li><code>tolower()</code>：小寫</li><li><code>length()</code>： 長度</li><li><code>substr()</code>： 擷取字串</li><li><code>sin()</code>：    正弦</li><li><code>cos()</code>：    余弦</li><li><code>sqrt()</code>：   平方根</li><li><code>rand()</code>：   隨機數</li></ul><h2 id="常用範例"><a href="#常用範例" class="headerlink" title="常用範例"></a>常用範例</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>有一文本<code>test.txt</code>，內容為<code>this is a test</code></p><ul><li><p>打印出整行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;&#123;print $0&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>  <code>Output:</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> a test<br></code></pre></td></tr></table></figure></li><li><p>打印出每行 以空格分隔後的第一個單詞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>  <code>Output:</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span><br></code></pre></td></tr></table></figure></li><li><p>將分隔符設定為 : 並打印第二個字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk -F <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>  <code>Output:</code></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">is</span> a<br></code></pre></td></tr></table></figure></li><li><p>使用某個awk腳本處理文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk -f &#123;awk脚本&#125; &#123;文件名&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用shell 裏面的變數</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">count=100<br>awk -v cc=<span class="hljs-variable">$count</span> &#123;<span class="hljs-built_in">print</span> cc&#125;<br></code></pre></td></tr></table></figure><p>  <code>Output:</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">100<br></code></pre></td></tr></table></figure></li><li><p>設定輸入自段的分隔符(OFS)，加上 <code>-v</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>awk -v OFS=<span class="hljs-string">&#x27;\n&#x27;</span> -F <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="設定條件"><a href="#設定條件" class="headerlink" title="設定條件"></a>設定條件</h3><p>有一文本 <code>awk_test_file</code>，內容如下</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">2 this <span class="hljs-keyword">is</span> a test<br>3 <span class="hljs-keyword">Are</span> you like awk<br>This&#x27;s a test<br>10 There <span class="hljs-keyword">are</span> orange,apple,mongo<br></code></pre></td></tr></table></figure><ul><li><p>打印出 不包含 is 的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;$0 !~ /is/&#x27;</span> awk_test_file<br></code></pre></td></tr></table></figure><p>  <code>Output:</code></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span>Are you like awk<br><span class="hljs-symbol">10 </span>There are orange,apple,mongo<br></code></pre></td></tr></table></figure></li><li><p>打印出奇數行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;NR % 2 == 1 &#123;print $0&#125;&#x27;</span> awk_test_file<br></code></pre></td></tr></table></figure><p>  <code>Output:</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-number">2</span> <span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> a test<br>This<span class="hljs-string">&#x27;s a test</span><br></code></pre></td></tr></table></figure></li><li><p>除了打印變數，如果想要打印一些字符用””包起來</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk  <span class="hljs-string">&#x27;&#123;print NR &quot;) &quot; $0&#125;&#x27;</span> awk_test_file<br></code></pre></td></tr></table></figure><p>  <code>Output:</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>) <span class="hljs-number">2</span> this is a test<br><span class="hljs-attribute">2</span>) <span class="hljs-number">3</span> Are you like awk<br><span class="hljs-attribute">3</span>) This&#x27;s a test<br><span class="hljs-attribute">4</span>) <span class="hljs-number">10</span> There are orange,apple,mongo<br></code></pre></td></tr></table></figure></li></ul><h3 id="if-語句"><a href="#if-語句" class="headerlink" title="if 語句"></a>if 語句</h3><p>比較複雜的情況才需要用，不然用一般的條件判斷就行了</p><p>if 需要寫在 <code>&#123;動作&#125;</code>裡面</p><p>else 前記得要分號<code>;</code></p><ul><li>打印奇數行，其他就打印x<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;&#123;if(NR % 2 == 1) print $0; else print &quot;x&quot;&#125;&#x27;</span> awk_test_file<br></code></pre></td></tr></table></figure>  <code>Output:</code><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">2</span> this <span class="hljs-keyword">is</span> a test<br>x<br>This<span class="hljs-symbol">&#x27;s</span> a test<br>x<br></code></pre></td></tr></table></figure></li></ul><h3 id="內置函數用法"><a href="#內置函數用法" class="headerlink" title="內置函數用法"></a>內置函數用法</h3><ul><li>substr(字符串, 起始位置, 长度)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, World&quot;</span> | awk <span class="hljs-string">&#x27;&#123; print substr($0, 1, 5) &#125;&#x27;</span><br></code></pre></td></tr></table></figure>  <code>Output:</code><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Hello</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort (排序)"></a>sort (排序)</h1><p>用於對文本文件中的內容進行 **<font color=#EB5757><code>排序</code></font>**，按照字母順序or數字順序，以每<code>行</code>作為單位執行</p><p>若未指定文件名，<code>sort</code> 命令將會從標準輸入中讀取資料。</p><p>常用參數</p><ul><li><code>-r</code>：倒序排序</li><li><code>-f</code>：忽略大小排序</li><li><code>-k</code>：根據指定的欄位進行排序(每個欄位預設以<code>\t(空格)</code>分割)。例如，<code>k 2</code> 表示按照第二個欄位進行排序。</li><li><code>-n</code>：按照數字大小進行排序，而不是用英文</li><li><code>-t</code>：指定欄位分隔符</li><li><code>-u</code>：重複的行只保留一行</li></ul><p>以下是常用範例</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul><li><p><strong>對文本文件進行字母順序排序：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> 文件名.txt<br></code></pre></td></tr></table></figure></li></ul><h2 id="以數字進行排序-n"><a href="#以數字進行排序-n" class="headerlink" title="以數字進行排序(-n)"></a>以數字進行排序(-n)</h2><ul><li><p><strong>對包含數字的檔案進行數值排序：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> -n 文件名.txt <span class="hljs-comment"># 如果沒有數字就預設使用英文字母排序</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="指定分隔符，選擇特定欄位進行排序-t"><a href="#指定分隔符，選擇特定欄位進行排序-t" class="headerlink" title="指定分隔符，選擇特定欄位進行排序(-t)"></a>指定分隔符，選擇特定欄位進行排序(-t)</h2><ul><li><p><strong>對包含 CSV 資料的檔案，依照第二個欄位的數值進行排序：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> -t <span class="hljs-string">&#x27;,&#x27;</span> -k 2 資料.csv<br></code></pre></td></tr></table></figure></li></ul><h2 id="倒序-r"><a href="#倒序-r" class="headerlink" title="倒序(-r)"></a>倒序(-r)</h2><ul><li><p><strong>對文本文件進行倒序排序並移除重複的行：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> -r  文件名.txt<br></code></pre></td></tr></table></figure></li></ul><h2 id="去重複-u"><a href="#去重複-u" class="headerlink" title="去重複(-u)"></a>去重複(-u)</h2><ul><li><p><strong>對文本文件進型排序並移除重複的行：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span>  -u 文件名.txt<br></code></pre></td></tr></table></figure></li></ul><h1 id="uniq-去重複"><a href="#uniq-去重複" class="headerlink" title="uniq (去重複)"></a>uniq (去重複)</h1><p>主要用於處理已經排序過的文本文件，能夠<code>去除重複</code>的行或報告重複行的數量。</p><p>常用參數</p><ul><li><code>-c</code>：除了顯示去重複後的數據外，也會在每行顯示該行文字出現的數量</li><li><code>-d</code>：只顯示重複行 (exclude 不重複行)</li><li><code>-i</code>：去重複時，忽略大小寫</li></ul><p>常用範例</p><h2 id="去重複"><a href="#去重複" class="headerlink" title="去重複"></a>去重複</h2><ul><li><p><strong>去除已排序文件中連續重複的行：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uniq</span> 文件名.txt<br></code></pre></td></tr></table></figure></li></ul><h2 id="顯示重複數量-c"><a href="#顯示重複數量-c" class="headerlink" title="顯示重複數量(-c)"></a>顯示重複數量(-c)</h2><ul><li><p><strong>顯示已排序文件中每行重複的數量：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uniq</span> -c 文件名.txt<br></code></pre></td></tr></table></figure></li></ul><h2 id="僅顯示重複行-d"><a href="#僅顯示重複行-d" class="headerlink" title="僅顯示重複行(-d)"></a>僅顯示重複行(-d)</h2><ul><li><p><strong>僅顯示已排序文件中重複的行，去除不重複的行：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uniq</span> -d 文件名.txt<br></code></pre></td></tr></table></figure></li></ul><h2 id="忽略大小寫-i-1"><a href="#忽略大小寫-i-1" class="headerlink" title="忽略大小寫(-i)"></a>忽略大小寫(-i)</h2><ul><li><p><strong>忽略大小寫，去除已排序文件中連續重複的行：</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uniq</span> -i 文件名.txt<br></code></pre></td></tr></table></figure></li></ul><h2 id="搭配sort指令使用"><a href="#搭配sort指令使用" class="headerlink" title="搭配sort指令使用"></a>搭配sort指令使用</h2><ul><li><p><strong>搭配sort 指令使用</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> 文件名.txt | <span class="hljs-built_in">uniq</span> -c<br></code></pre></td></tr></table></figure></li><li><p><strong>搭配sort、awk 指令使用，打印出兩個文件不一樣的部分</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>      <br>old=`<span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;\n&#x27;</span> &lt; o_content | awk -v OFS=<span class="hljs-string">&#x27;\n&#x27;</span> -F <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><br>new=`<span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;\n&#x27;</span> &lt; n_content | awk -v OFS=<span class="hljs-string">&#x27;\n&#x27;</span> -F <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><br><br><span class="hljs-comment"># 執行去重複, 只打印出 不重複的部分</span><br><span class="hljs-comment"># &quot;&quot; 包注可以保留制表符 \n \t 那些</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;$old<span class="hljs-variable">$new</span>&quot;</span> | <span class="hljs-built_in">sort</span>  | <span class="hljs-built_in">uniq</span> -c | awk <span class="hljs-string">&#x27;$1 == 1  &#123;print $0&#125;&#x27;</span><br><br></code></pre></td></tr></table></figure></li></ul><h1 id="wc-計數"><a href="#wc-計數" class="headerlink" title="wc (計數)"></a>wc (計數)</h1><p>用來計算文本文件內各項數值的數量<br>沒有輸入任何參數，預設輸出該文件有 幾行、幾個單字、幾個byte</p><p>常用參數</p><ul><li><code>-l</code>：有幾<code>行</code>，通常日誌每個欄位都用行區分，所以這個是最泛用的</li><li><code>-w</code>：有幾個<code>單字</code>，hello world 算2個單字</li><li><code>-c</code>：有幾個<code>byte</code></li><li><code>-m</code>：有幾個<code>char</code></li></ul><p>常用範例</p><h2 id="顯示幾行-l"><a href="#顯示幾行-l" class="headerlink" title="顯示幾行(-l)"></a>顯示幾行(-l)</h2><ul><li><p><strong>該文件有幾行</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">wc</span> -l 文件名.txt<br></code></pre></td></tr></table></figure></li></ul><h2 id="搭配其他指令，計算筆數"><a href="#搭配其他指令，計算筆數" class="headerlink" title="搭配其他指令，計算筆數"></a>搭配其他指令，計算筆數</h2><ul><li><p><strong>搭配其他指令找到的資料，計算有幾筆</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;status: 502&quot;</span> 文件名.txt | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure></li></ul><h1 id="tr-取代文字"><a href="#tr-取代文字" class="headerlink" title="tr (取代文字)"></a>tr (取代文字)</h1><p>可以取代一個文本內的文字</p><h2 id="語法格式-1"><a href="#語法格式-1" class="headerlink" title="語法格式"></a>語法格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;要取代的文字&#x27;</span> <span class="hljs-string">&#x27;取代成的文字&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="常用範例-1"><a href="#常用範例-1" class="headerlink" title="常用範例"></a>常用範例</h2><ul><li>將文本內的<code>,</code>替換成<code>\n</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># 將 inputfile.txt 內的 , 替換成 \n ，寫入到 outfile.txt</span><br><span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;\n&#x27;</span> &lt; inputfile.txt &gt; outfile.txt<br><br><span class="hljs-comment"># 使用管道</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;helo,caal,sail,bill&quot;</span> | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;\n&#x27;</span><br><br></code></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="https://zhuanlan.zhihu.com/p/110983126">Linux 文本处理三剑客：grep、sed 和 awk</a></p><p><a href="https://www.ruanyifeng.com/blog/2018/11/awk.html">awk 入门教程</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>文本處理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 文本處理(2) (寫入資料到文件)(重定向指令 &gt;、&gt;&gt;、| 管道、標準數據流 stdin、stdout、stderr)</title>
    <link href="/2023/08/26/linux-text-processing2/"/>
    <url>/2023/08/26/linux-text-processing2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文將會介紹linux中的標準數據流，以及常見將數據寫入文件的方法</p><h1 id="寫入資料到文件"><a href="#寫入資料到文件" class="headerlink" title="寫入資料到文件"></a>寫入資料到文件</h1><p>通常有幾種方法</p><ul><li>使用 vi 編輯器</li><li>重定向符( &gt;、&gt;&gt; )</li><li><code>echo</code> 指令 搭配 &gt;、&gt;&gt; 重定向符</li><li><code>tee</code>指令</li></ul><h2 id="echo-直接打印文字到終端上"><a href="#echo-直接打印文字到終端上" class="headerlink" title="echo (直接打印文字到終端上)"></a>echo (直接打印文字到終端上)</h2><p>直接打印文字到終端上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p>終端機上就會打印出<code>hello world</code></p><p>但有時想要將打印的文字寫入到文件，而非只是打印出來，可以配合 <code>&gt;</code>、<code>&gt;&gt;</code> 符號</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span> &gt; <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>此命令會將<code>hello world</code>寫入到 <code>test</code> 文件中</p><h2 id="重定向符-、-兩者的差異"><a href="#重定向符-、-兩者的差異" class="headerlink" title="重定向符 &gt;、&gt;&gt; 兩者的差異"></a>重定向符 <code>&gt;</code>、<code>&gt;&gt;</code> 兩者的差異</h2><h3 id="符號：覆蓋檔案內容"><a href="#符號：覆蓋檔案內容" class="headerlink" title="&gt; 符號：覆蓋檔案內容"></a><code>&gt;</code> 符號：覆蓋檔案內容</h3><p><strong><font color=#EB5757><code>&gt;</code></font></strong> 符號會將文字寫入指定的文件中，</p><ul><li>如果文件存在，會覆寫內容</li><li>如果文件不存在，會創建新文件，並寫入內容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span> &gt; <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>此時打印<code>test</code> 文件內容應該會出現<code>hello world</code></p><h3 id="符號：追加檔案內容"><a href="#符號：追加檔案內容" class="headerlink" title="&gt;&gt; 符號：追加檔案內容"></a><code>&gt;&gt;</code> 符號：追加檔案內容</h3><p><strong><font color=#EB5757><code>&gt;&gt;</code></font></strong> 符號會將文字寫入指定的文件中，但不是使用覆寫的方式，而是在原本的內容上追加內容到文件末尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span> &gt;&gt; <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>如果原本的<code>test</code> 文件裡面已有內容，那會在文件末尾追加<code>hello world</code>，linux 文件末尾通常是換行符(<code>\n</code>)，所以會在新的一行看到<code>hello world</code></p><h2 id="tee-指令-將資料寫入文件外，同時也在終端打印"><a href="#tee-指令-將資料寫入文件外，同時也在終端打印" class="headerlink" title="tee 指令 (將資料寫入文件外，同時也在終端打印)"></a>tee 指令 (將資料寫入文件外，同時也在終端打印)</h2><ul><li>將內容打印到終端，並寫入文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span> | <span class="hljs-built_in">tee</span> <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>這個指令類似於，先打印，在使用 <code>&gt;</code> 寫入文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span> &gt; <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><ul><li>將內容打印到終端，並<code>追加</code>寫入文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span> | <span class="hljs-built_in">tee</span> -a <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>加上 <code>-a</code> 參數</p><h1 id="重定向符號"><a href="#重定向符號" class="headerlink" title="重定向符號"></a>重定向符號</h1><ul><li><code>&gt;</code>  覆寫內容</li><li><code>&gt;&gt;</code> 追加內容</li><li><code>2&gt;</code> 錯誤輸出重定向</li><li><code>&lt;</code>  從文件讀取內容，而不是從終端輸入</li><li><code>|</code>  通道符，可以將文本傳給下一個指令處理</li></ul><h2 id="：輸出重定向，覆蓋檔案內容"><a href="#：輸出重定向，覆蓋檔案內容" class="headerlink" title="&gt;：輸出重定向，覆蓋檔案內容"></a><code>&gt;</code>：輸出重定向，覆蓋檔案內容</h2><p>使用 <code>&gt;</code> 可將命令的輸出重定向到指定的文件，如果該文件已經存在，則內容會被覆蓋;文件不存在則會創建一個新檔案</p><h2 id="：追加輸出重定向，追加檔案內容"><a href="#：追加輸出重定向，追加檔案內容" class="headerlink" title="&gt;&gt;：追加輸出重定向，追加檔案內容"></a><code>&gt;&gt;</code>：追加輸出重定向，追加檔案內容</h2><p>用 <code>&gt;&gt;</code> 可將命令的輸出附加到指定的文件，如果該文件已經存在，則內容會被追加。</p><h2 id=""><a href="#" class="headerlink" title="&lt;：輸入重定向"></a><code>&lt;</code>：輸入重定向</h2><p>從文件讀取內容，而不是從終端輸入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> &lt; tempfile  &gt; <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>如上方指令就是將 <code>tempfile</code> 的內容傳到sort 指令裡，之後再寫入到<code>test</code>文件</p><h2 id="2-：錯誤輸出重定向"><a href="#2-：錯誤輸出重定向" class="headerlink" title="2&gt;：錯誤輸出重定向"></a><code>2&gt;</code>：錯誤輸出重定向</h2><p>將錯誤的輸出寫入到指定的檔案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -f delfile  2&gt; <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>例如，如果在刪除<code>delfile</code>的過程中出現錯誤，就將錯誤的原因寫入<code>test</code>文件，<br>可以做到將一般的輸出與錯誤輸出分流的效果</p><h2 id="：管道"><a href="#：管道" class="headerlink" title="|：管道"></a><code>|</code>：管道</h2><p>將前一個命令的輸出，傳給後面的命令處理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;status: 502&quot;</span> myfile | <span class="hljs-built_in">tail</span> -n 30<br></code></pre></td></tr></table></figure><p>將<code>myfile</code> 中出現<code>status: 502</code>的行數，傳給後面的<code>tail</code> 指令處理</p><h1 id="stdin、stdout、stderr"><a href="#stdin、stdout、stderr" class="headerlink" title="stdin、stdout、stderr"></a>stdin、stdout、stderr</h1><p><code>stdin</code>、<code>stdout</code>、<code>stderr</code>是linux命令啟動時，創建的 <strong><font color=#EB5757><code>標準數據流</code></font></strong> ，linux 在執行命令時，是像流式一樣處理數據，</p><p>命令就像外殼(shell)一樣，這個外殼有來源跟出口，也就是<code>輸入</code>跟<code>輸出</code>，當要執行指令時，需要將數據流<code>輸入</code>外殼，並告訴命令這些數據流<code>輸出</code>的流向，是要透過管道<code>|</code>傳給下一個命令處理? 還是重定向<code>&gt;</code>、<code>&gt;&gt;</code>傳遞到文件內。</p><p>在linux 當中，所有的檔案都被視為一個文件，每一個文件都會分配一個獨立的文件標示符</p><ul><li><code>stdin</code>：標準輸入，文件標示符為 0</li><li><code>stdout</code>：標準輸出，文件標示符為 1</li><li><code>stderr</code>：標準錯誤，文件標示符為 2</li></ul><h2 id="stdin"><a href="#stdin" class="headerlink" title="stdin"></a>stdin</h2><p>代表著標準輸入，以下是常見用途</p><ul><li><p><strong>用戶輸入</strong>：在命令行中獲取用戶鍵盤的輸入</p></li><li><p><strong>文件輸入</strong>：讀取文件的內容，作為其他命令的輸入</p></li></ul><h2 id="stdout"><a href="#stdout" class="headerlink" title="stdout"></a>stdout</h2><p>代表著標準輸出，以下是常見用途</p><ul><li><p><strong>終端輸出</strong>：程式運行的結果輸出到終端上</p></li><li><p><strong>重定向到文件</strong>：程式運行的結果使用<code>&gt;</code>、<code>&gt;&gt;</code>，將數據寫入到文件中</p></li></ul><h2 id="stderr"><a href="#stderr" class="headerlink" title="stderr"></a>stderr</h2><p>代表著標準錯誤，通常用於將程式執行過程中的 <strong><font color=#EB5757><code>錯誤</code></font></strong> 、警告和異常訊息輸出到終端或檔案，以下是常見用途</p><ul><li><p><strong>區分一般輸出與錯誤的輸出</strong>：將正常輸出和錯誤訊息區分開來，使得使用者能夠更容易地捕捉並處理這些不同類型的訊息。</p></li><li><p><strong>將錯誤輸出重定向到文件</strong>：使用<code>2&gt;</code> 將程式運行時遇到的錯誤輸出，寫入到文件中</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ll 2&gt; test.txt<br></code></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="https://blog.csdn.net/culinxia2707/article/details/108776303">什么是Linux上的stdin，stdout和stderr？</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>文本處理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 文本處理(1) (查看文件內容)(cat、more、less、tail、head)</title>
    <link href="/2023/08/26/linux-text-processing/"/>
    <url>/2023/08/26/linux-text-processing/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作上常需要查看文件的內容，在windows 系統上有圖形介面，點兩下文件就可以打開文件，在終端機介面也有類似功能，例如使用vi編輯器打開文件，除此之外linux還內置了許多命令，可以將文件內容直接顯示在螢幕上，或是作一些進階的操作，如關鍵字搜索等等，本文將記錄一些工作上非常實用的文本命令，建議一定要學起來，會大幅增加工作效率。</p><h1 id="cat-直接將文件內容打印在終端機上"><a href="#cat-直接將文件內容打印在終端機上" class="headerlink" title="cat (直接將文件內容打印在終端機上)"></a>cat (直接將文件內容打印在終端機上)</h1><p>可以直接將文件內容打印在終端機上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> 文件名<br></code></pre></td></tr></table></figure><p>文件內容很少時滿好用的，但內容一多可能會超過一整個螢幕不太好閱讀，這時就需要下面more、less的指令了</p><h1 id="more-一次只顯示一個畫面的內容"><a href="#more-一次只顯示一個畫面的內容" class="headerlink" title="more (一次只顯示一個畫面的內容)"></a>more (一次只顯示一個畫面的內容)</h1><p>一次只顯示一個畫面的內容，可以翻頁，在左下角還會顯示目前閱讀進度的%數</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">more 文件名 <span class="hljs-comment"># 使用後會進入交互模式</span><br></code></pre></td></tr></table></figure><p>在交互模式下可以用以下按鍵來操作</p><ul><li><code>space(空白鍵)</code>：往下一頁</li><li><code>Enter</code>：往下一行</li><li><code>b</code>：往上一頁</li><li><code>q</code>：退出交互模式</li></ul><h1 id="less-一次只顯示一個畫面的內容，more進階版"><a href="#less-一次只顯示一個畫面的內容，more進階版" class="headerlink" title="less (一次只顯示一個畫面的內容，more進階版)"></a>less (一次只顯示一個畫面的內容，more進階版)</h1><p>一次只顯示一個畫面的內容，為more 指令的進階版，基本上可以完全取代more指令，可做到更多的操作，如搜尋關鍵字</p><ul><li><p><strong>開啟文件，會進入交互模式</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">less 文件名<br></code></pre></td></tr></table></figure></li><li><p><strong>往下一頁、往上一頁：</strong></p><ul><li>往下一頁：使用空白鍵。</li><li>往上一頁：使用 <strong><font color=#EB5757><code>b</code></font></strong></li></ul></li><li><p><strong>往下一行、往上一行：(也可以使用方向上下鍵)</strong></p><ul><li>往下一行：使用 <strong><font color=#EB5757><code>j</code></font></strong></li><li>往上一行：使用 <strong><font color=#EB5757><code>k</code></font></strong></li></ul></li><li><p><strong>退出</strong></p><ul><li><strong><font color=#EB5757><code>q</code></font></strong></li></ul></li><li><p><strong>到文件開頭、文件結尾</strong></p><ul><li>跳轉到檔案開頭：使用 <strong><font color=#EB5757><code>g</code></font></strong></li><li>跳轉到檔案結尾：使用 <strong><font color=#EB5757><code>G</code></font></strong></li></ul></li><li><p><strong>搜尋文字：</strong></p><ul><li><p>向下搜尋：按 <strong><font color=#EB5757><code>/</code></font></strong> 鍵，然後輸入要搜尋的文字，按 Enter 鍵開始搜尋</p></li><li><p>向上搜尋：按 <strong><font color=#EB5757><code>?</code></font></strong> 鍵，然後輸入要搜尋的文字，按 Enter 鍵開始搜尋</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/關鍵字 <span class="hljs-comment"># 輸入Enter後就會跳到關鍵字該行</span><br></code></pre></td></tr></table></figure></li><li><p>繼續搜尋下一個匹配項目：按 <strong><font color=#EB5757><code>n</code></font></strong></p></li><li><p>返回到前一個匹配項目：按 <strong><font color=#EB5757><code>N</code></font></strong></p></li></ul></li></ul><h1 id="tail-查看文件末尾的內容"><a href="#tail-查看文件末尾的內容" class="headerlink" title="tail (查看文件末尾的內容)"></a>tail (查看文件末尾的內容)</h1><p>查看文件末尾的內容，換句話說就是最近幾筆的資料</p><h2 id="顯示文件的末尾內容-預設為10行"><a href="#顯示文件的末尾內容-預設為10行" class="headerlink" title="顯示文件的末尾內容(預設為10行)"></a><strong>顯示文件的末尾內容(預設為10行)</strong></h2><ul><li>指令  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> 文件名稱<br></code></pre></td></tr></table></figure></li></ul><h2 id="顯示指定行數-行數"><a href="#顯示指定行數-行數" class="headerlink" title="顯示指定行數(-行數)"></a><strong>顯示指定行數(-行數)</strong></h2><ul><li>指令  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -要顯示幾行 文件名稱<br></code></pre></td></tr></table></figure></li><li>從access.log檔找到最近10筆出現”status: 502”的時間  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -C4 <span class="hljs-string">&quot;status: 502&quot;</span> access.log | <span class="hljs-built_in">tail</span> -10<br></code></pre></td></tr></table></figure></li></ul><h2 id="即時監控檔案：-f-必記"><a href="#即時監控檔案：-f-必記" class="headerlink" title="即時監控檔案：(-f) !!!必記!!!"></a><strong>即時監控檔案：(-f) <font color=#EB5757>!!!必記!!!</font></strong></h2><ul><li>指令  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -f 文件名稱<br></code></pre></td></tr></table></figure></li></ul><h2 id="從第幾行開始顯示全部內容-n-行數"><a href="#從第幾行開始顯示全部內容-n-行數" class="headerlink" title="從第幾行開始顯示全部內容 (-n +行數)"></a><strong>從第幾行開始顯示全部內容 (-n +行數)</strong></h2><ul><li><p>指令</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -n +第幾行開始 文件名稱<br></code></pre></td></tr></table></figure></li><li><p>從第10行開始顯示之後的全部內容</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -n +10 文件名稱<br></code></pre></td></tr></table></figure></li></ul><h1 id="head-查看文件開頭的內容"><a href="#head-查看文件開頭的內容" class="headerlink" title="head (查看文件開頭的內容)"></a>head (查看文件開頭的內容)</h1><p>查看文件開頭的內容，換句話說就是最早幾筆資料，例如配合<code>grep</code>查看今日日誌中 http 502 最早出現的時間</p><h2 id="顯示文件的開頭內容-預設為10行"><a href="#顯示文件的開頭內容-預設為10行" class="headerlink" title="顯示文件的開頭內容(預設為10行)"></a><strong>顯示文件的開頭內容(預設為10行)</strong></h2><ul><li>指令  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">head</span> 文件名稱<br></code></pre></td></tr></table></figure></li></ul><h2 id="顯示指定行數-行數-1"><a href="#顯示指定行數-行數-1" class="headerlink" title="顯示指定行數(-行數)"></a><strong>顯示指定行數(-行數)</strong></h2><ul><li><p>顯示指定行數</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">head</span> -要顯示幾行 文件名稱<br></code></pre></td></tr></table></figure></li><li><p>顯示access.log最早出現”status: 502”的30筆</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;status: 502&quot;</span> access.log | <span class="hljs-built_in">head</span> -30<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>文本處理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 常見語法整理</title>
    <link href="/2023/08/05/markdown-syntax/"/>
    <url>/2023/08/05/markdown-syntax/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Markdown 是一種標記語言，允許使用者使用簡單的標記，就能寫出排版工整，畫面整齊俐落的文章。不用記住繁雜的語法，讓使用者可以更專注在寫作內容，而且源文件人類容易閱讀，不會被複雜格式擾亂。</p><p>Markdown檔案可以輕鬆轉變為HTML 文件在網頁上呈現，很適合用來寫部落格。這邊整理幾個常用的標記語法。</p><h1 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h1><p>使用 <code># 標題</code> (# 與 文字間需要空一個)，會對應到HTML 中 H1~H6 的標題大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 標題     (H1)</span><br><span class="hljs-comment">##  標題</span><br><span class="hljs-comment">###  標題</span><br><span class="hljs-comment">####  標題</span><br><span class="hljs-comment">#####  標題</span><br><span class="hljs-comment">###### 標題 (H6)</span><br><br></code></pre></td></tr></table></figure><h1 id="反白字體"><a href="#反白字體" class="headerlink" title="反白字體"></a>反白字體</h1><p>使用&#96;&#96; 包住文字(調成英文輸入比較方便)，就能有反白效果</p><p><code>反白文字</code></p><h1 id="項目"><a href="#項目" class="headerlink" title="項目"></a>項目</h1><p>使用 <code>- 項目</code> 或是 <code>* 項目</code> 或是 ‵<code>數字. 項目</code> (與文字間需要空一格)，還可以縮排 (使用文字編輯器時按 tab 縮排就行了)</p><ul><li>項目1</li><li>項目2</li><li>項目3</li></ul><ul><li>A</li><li>B</li><li>C</li></ul><ol><li>甲</li><li>乙</li><li>丙<ul><li>你</li><li>好</li><li>棒</li></ul></li></ol><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><p>技術文章常需要展示代碼範例，可以用 <code>```</code> 換行後包住，來表示代碼塊，支持多種程式語言</p><p><code>```程式語言</code><br><code>```</code>  </p><p>例如使用bash的語法高亮，代碼塊結果如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#  ```bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     ...程式碼內容</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  ```</span><br><br></code></pre></td></tr></table></figure><h1 id="超連結"><a href="#超連結" class="headerlink" title="超連結"></a>超連結</h1><p>使用 <code>[ ]</code> 包住顯示文字、與 <code>( )</code> 包住網址連結 </p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-name">顯示文字</span>](<span class="hljs-name">網址連結</span>)<br><br></code></pre></td></tr></table></figure><p>超連結 結果如下:</p><p><a href="https://markdown.tw/">顯示文字</a></p><h1 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h1><p>與超連結語法很像，前面多了一個 <code>!</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[圖片失效時代替文字]</span>(圖片連結)<br><br></code></pre></td></tr></table></figure><p>圖片 結果如下:<br><img src="/%E5%9C%96%E7%89%87%E9%80%A3%E7%B5%90" alt="圖片失效時代替文字"></p><h2 id="配合google-drive-裡面的圖片"><a href="#配合google-drive-裡面的圖片" class="headerlink" title="配合google drive 裡面的圖片"></a>配合google drive 裡面的圖片</h2><p>google drive 裡面圖片的連結</p><ol><li><p>google drive 裡面圖片的連結通常會是  <strong><a href="https://drive.google.com/file/d/XXXXXX/view?usp=sharing">https://drive.google.com/file/d/XXXXXX/view?usp=sharing</a></strong> 這種格式</p></li><li><p>把網址換成 <strong><a href="https://drive.google.com/u/2/uc?id=XXXXX&export=download">https://drive.google.com/u/2/uc?id=XXXXX&amp;export=download</a></strong></p></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">![圖片介紹](https:<span class="hljs-regexp">//</span>drive.google.com<span class="hljs-regexp">/u/</span><span class="hljs-number">2</span>/uc?id=XXXXX&amp;export=download)<br></code></pre></td></tr></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 列 1 </span>|<span class="hljs-string">列 2</span>|<span class="hljs-string"> 列 3 </span>|<span class="hljs-string"> 列 4 </span>|<span class="hljs-string"> 列 5 </span>|<span class="hljs-string"> 列 6 </span>|<span class="hljs-string"> 列 7 </span>|<span class="hljs-string"> 列 8 </span>|<br>|<span class="hljs-string"> ---- </span>|<span class="hljs-string">   ----   </span>|<span class="hljs-string">  ----: </span>|<span class="hljs-string"> ----  </span>|<span class="hljs-string"> ---- </span>|<span class="hljs-string"> ----  </span>|<span class="hljs-string"> ----</span>|<span class="hljs-string"> :----: </span>|<br>|<span class="hljs-string"> drwxr-xr-x. </span>|<span class="hljs-string"> 21</span>|<span class="hljs-string">rootgg</span>|<span class="hljs-string">rootgg</span>|<span class="hljs-string">4096</span>|<span class="hljs-string">Feb</span>|<span class="hljs-string">27</span>|<span class="hljs-string">13:33</span>|<br>|<span class="hljs-string"> lrwxrwxrwx. </span>|<span class="hljs-string"> 1</span>|<span class="hljs-string">root</span>|<span class="hljs-string">root</span>|<span class="hljs-string">7</span>|<span class="hljs-string">Feb</span>|<span class="hljs-string">27</span>|<span class="hljs-string">13:15</span>|<br>|<span class="hljs-string"> -rw-r-r-- </span>|<span class="hljs-string"> 1</span>|<span class="hljs-string">root</span>|<span class="hljs-string">root</span>|<span class="hljs-string">0</span>|<span class="hljs-string">Mar</span>|<span class="hljs-string">27</span>|<span class="hljs-string">13:15</span>|<br></code></pre></td></tr></table></figure><p>結果如下</p><table><thead><tr><th>列 1</th><th>列 2</th><th align="right">列 3</th><th>列 4</th><th>列 5</th><th>列 6</th><th>列 7</th><th align="center">列 8</th></tr></thead><tbody><tr><td>drwxr-xr-x.</td><td>21</td><td align="right">rootgg</td><td>rootgg</td><td>4096</td><td>Feb</td><td>27</td><td align="center">13:33</td></tr><tr><td>lrwxrwxrwx.</td><td>1</td><td align="right">root</td><td>root</td><td>7</td><td>Feb</td><td>27</td><td align="center">13:15666</td></tr><tr><td>-rw-r-r–</td><td>1</td><td align="right">root</td><td>root</td><td>0</td><td>Mar</td><td>27</td><td align="center">13:15</td></tr></tbody></table><p>排版預設向左對齊，可以調整第二行的<code>----</code>來變更</p><ul><li><code>:----</code>   左對齊</li><li><code>----:</code>    右對齊</li><li><code>:----:</code>    置中對齊</li></ul><h1 id="刪節線"><a href="#刪節線" class="headerlink" title="刪節線"></a>刪節線</h1><p>使用<code>---</code> 來表示刪節線</p><p>刪節線結果如下:</p><hr><h1 id="粗體、斜體"><a href="#粗體、斜體" class="headerlink" title="粗體、斜體"></a>粗體、斜體</h1><p><em>斜體</em><br><strong>粗體</strong><br><em><strong>粗斜體</strong></em><br><del>刪除線</del><br><u>底線</u></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-emphasis">*斜體*</span><br><span class="hljs-strong">**粗體**</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*粗斜體*</span>**</span><br>~~刪除線~~<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>底線<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="文字顏色"><a href="#文字顏色" class="headerlink" title="文字顏色"></a>文字顏色</h1><p>使用 <code>&lt;font&gt;</code>標籤包住文字，<code>&lt;font color=#EB5757&gt;字體顏色&lt;/font&gt;</code></p><p><font color=#EB5757>字體顏色</font></p><p>可以搭配反白文字、粗體等等使用<br><font color=#EB5757><code>字體顏色</code></font></p><p><font color=#EB5757><strong><code>字體顏色</code></strong></font></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs md"><br>搭配反白<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">#EB5757</span>&gt;</span></span><span class="hljs-code">`字體顏色`</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><br>搭配粗體<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">#EB5757</span>&gt;</span></span><span class="hljs-strong">**`字體顏色`**</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="箭頭"><a href="#箭頭" class="headerlink" title="箭頭"></a>箭頭</h1><ol><li>右箭頭 &rarr;</li></ol><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">&amp;rarr;<br></code></pre></td></tr></table></figure><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>使用 <code>&gt; 文字</code> (與文字間需要空一格)</p><p>結果如下</p><blockquote><p>我把妹用這招從來沒有失敗過。    - -<em>美國隊長</em></p></blockquote><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="https://sam.webspace.tw/2020/01/10/Markdown%20%E5%B8%B8%E7%94%A8%E8%AA%9E%E6%B3%95%E6%95%B4%E7%90%86/">Markdown 常用語法整理</a></p><p><a href="https://ed521.github.io/2019/08/hexo-markdown/">[教學] 撰寫 Hexo 文章 - Markdown 語法大全</a></p><p><a href="https://www.mytechgirl.com/tw/cloud/how-to-create-google-drive-online-photo-album-mtg6688.html">[實用]建立Google Drive圖床並顯示到網站上的方法</a></p><p><a href="https://theriseofdavid.github.io/2021/02/28/blog/hackmd_view_googledricePIC/">Markdown 放入 google drive 圖片</a></p><p><a href="https://blog.csdn.net/l_degege/article/details/118045751">markdown显示箭头方法</a></p>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>網頁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 用戶管理</title>
    <link href="/2023/08/03/linux-user-management/"/>
    <url>/2023/08/03/linux-user-management/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Linux是多用戶的操作系統，針對用戶的角色給予相對應的權限，對於維護系統的安全是非常重要的。在Linux中能夠以 <strong><code>分組</code></strong> 或是 <strong><code>針對個別用戶</code></strong> 的方式給予系統的使用權限，也能對密碼進行相關設定，包含要求 <strong><code>定期更換密碼</code></strong> 或是 <strong><code>密碼的有效期限</code></strong> ，減少用戶遭到盜用的風險。</p><h1 id="關於用戶相關的設定檔"><a href="#關於用戶相關的設定檔" class="headerlink" title="關於用戶相關的設定檔"></a>關於用戶相關的設定檔</h1><ul><li><p><code>/etc/passwd</code></p></li><li><p><code>/etc/group</code></p></li><li><p><code>/etc/shadow</code></p></li><li><p><code>/etc/login.defs</code></p></li></ul><h2 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="&#x2F;etc&#x2F;passwd"></a>&#x2F;etc&#x2F;passwd</h2><p>管理用戶資訊的地方，包含以下資訊<br>name、passwd、uid、groupid 、description 、家目錄、shell</p><p>密碼的部分因為是加密過所以會顯示x</p><h2 id="etc-group"><a href="#etc-group" class="headerlink" title="&#x2F;etc&#x2F;group"></a>&#x2F;etc&#x2F;group</h2><p>可以查看所有的群組，同時標註每個用戶是屬於哪個群組，包含以下資訊<br>groupname、grouppassword、groupid ..</p><h2 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="&#x2F;etc&#x2F;shadow"></a>&#x2F;etc&#x2F;shadow</h2><p>這個檔案存放加密過後密碼、密碼過期日、長度限制等等</p><p>可以使用 <code>grep 用戶名 /etc/shadow</code> 查看，會發現一串數字，最後幾個數字，沒有修改過的情況下預設大概會長這樣<code>0:99999:7:::</code></p><p>這幾個數字分別為 多少天不能改密碼、密碼多久時間內有效，時間到就需要修改密碼、修改密碼前的警告天數…</p><p>以下就整理<code>/etc/shadow</code> 檔案中 會顯示的資訊，這些資訊以<code>:</code>分隔，每一列代表一個使用者帳戶</p><ul><li><p>列 1：用戶名</p></li><li><p>列 2：經過加密過後的使用者密碼</p></li><li><p>列 3：上次修改密碼的日期</p></li><li><p>列 4：密碼過期期限，過期後，使用者需要修改密碼才能繼續使用帳戶。</p></li><li><p>列 5：密碼需要修改前的警告天數</p></li><li><p>列 6：密碼過期後帳戶的有效天數。</p></li><li><p>列 7：帳戶失效日期</p></li><li><p>列 8：保留欄位，這些欄位在一些系統中可能用於儲存其他額外的資訊。</p></li></ul><h2 id="etc-login-defs"><a href="#etc-login-defs" class="headerlink" title="&#x2F;etc&#x2F;login.defs"></a>&#x2F;etc&#x2F;login.defs</h2><p>用戶建立時預設使用的設置，如UID、密碼期限…，非常重要的檔案，關係到了整個系統的安全</p><h1 id="用戶管理"><a href="#用戶管理" class="headerlink" title="用戶管理"></a>用戶管理</h1><h2 id="新增用戶-useradd"><a href="#新增用戶-useradd" class="headerlink" title="新增用戶 (useradd)"></a>新增用戶 (useradd)</h2><p><code>useradd 用戶名</code></p><p>新增後會發現<code>/home</code> 多出了一個用戶的目錄</p><p>創建之後也會用戶預設會創建一個跟用戶名一樣的群組，用戶會在該群組內</p><h2 id="刪除用戶-userdel"><a href="#刪除用戶-userdel" class="headerlink" title="刪除用戶 (userdel)"></a>刪除用戶 (userdel)</h2><p>僅刪除用戶<br><code>userdel 用戶名</code></p><ul><li><code>-r</code> : 刪除用戶，同時也刪除家目錄 <code>userdel -r 用戶名</code></li></ul><h2 id="修改用戶-usermod"><a href="#修改用戶-usermod" class="headerlink" title="修改用戶 (usermod)"></a>修改用戶 (usermod)</h2><ul><li><p><code>-l</code> :  修改用戶名</p></li><li><p><code>-d</code> :  修改用戶家目錄。(登陸後所在的目錄)</p></li><li><p><code>-g</code> :  修改用戶所屬的群組。 (會讓家目錄的擁有群組改變)</p></li><li><p><code>-G</code> :  修改用戶所屬的附加群組。</p></li><li><p><code>-s</code> :  修改用戶登入後所使用的shell。</p></li><li><p><code>-m</code> :  如果修改了家目錄，同時移動用戶的家目錄內容。</p></li></ul><h3 id="新增用戶到群組"><a href="#新增用戶到群組" class="headerlink" title="新增用戶到群組"></a>新增用戶到群組</h3><p>只是讓用戶多加入一個群組，不會影響到原本用戶所在的群組</p><p><code>usermod -G 群組名  用戶名</code></p><p>會修改到用戶原本所在的群組</p><p><code>usermod -g 群組名  用戶名</code></p><h3 id="修改用戶名稱"><a href="#修改用戶名稱" class="headerlink" title="修改用戶名稱"></a>修改用戶名稱</h3><p>只會修改用戶名，其他如家目錄、群組都不會動到</p><p><code>sudo usermod -l 新用戶名 舊用戶名</code></p><p>例如 :<br><code>sudo usermod -l allynn ally</code></p><h3 id="修改家目錄"><a href="#修改家目錄" class="headerlink" title="修改家目錄"></a>修改家目錄</h3><p><code>sudo usermod -d 新目錄名稱 -m 用戶名</code></p><p>例如 :<br><code>sudo usermod -d /home/kiki -m ally</code></p><ul><li><p>目錄名稱儘量用<strong>絕對路徑</strong></p></li><li><p>使用 <code>-m</code> 會將原本內容換過去，如果想要新目錄是空的就不用加 <code>-m</code></p></li></ul><h3 id="自己的測試結果"><a href="#自己的測試結果" class="headerlink" title="自己的測試結果"></a>自己的測試結果</h3><ul><li><p><code>-m</code> 比較像是給家目錄改名，原檔名會直接被變成新檔名</p></li><li><p>有加 <code>-m</code> 新目錄名不能存在</p></li><li><p>不加 <code>-m</code> 則目錄必須存在</p></li><li><p>如果只是用 <code>-d</code> ，就什麼都沒差，只是修改用戶登陸後所在的目錄</p></li><li><p>該檔案如果一開始是由root 建立 也沒關係，使用 -d 後不會改變檔案擁有者， -d 很單純的是修改用戶登陸後所在的目錄</p></li></ul><h3 id="同時使用多個參數"><a href="#同時使用多個參數" class="headerlink" title="同時使用多個參數"></a>同時使用多個參數</h3><p><code>useradd -g student -s /bin/bash -c “smart guy” -d /home/jerry -m jerry</code></p><h1 id="群組管理"><a href="#群組管理" class="headerlink" title="群組管理"></a>群組管理</h1><h2 id="新增群組-groupadd"><a href="#新增群組-groupadd" class="headerlink" title="新增群組 (groupadd)"></a>新增群組 (groupadd)</h2><p><code>groupadd 群組名</code></p><h2 id="刪除群組-groupdel"><a href="#刪除群組-groupdel" class="headerlink" title="刪除群組 (groupdel)"></a>刪除群組 (groupdel)</h2><p><code>groupdel 群組名</code></p><h1 id="密碼管理-chage"><a href="#密碼管理-chage" class="headerlink" title="密碼管理 (chage)"></a>密碼管理 (chage)</h1><p><code>chage</code> 是針對個別用戶進行設定</p><p>如果想要對所有的用戶進行修改，可以修改<code>/etc/login.defs</code> 的內容</p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p><code>chage -m 3 -M 90 -W 5 -I 3 用戶名</code></p><ul><li><p><code>-m</code> : 設定變更密碼後，多少天以後才能再改密碼</p></li><li><p><code>-M</code> : 密碼的最大有效天數，時間到會請使用者改密碼</p></li><li><p><code>-W</code> : 密碼到期前幾天會提醒用戶</p></li><li><p><code>-I</code> : 密碼到期多少天 後，帳戶會禁用</p></li><li><p><code>-E</code> : 可以直接設定用戶帳戶的過期日期 ，格式為 <code>YYYY-MM-DD</code></p></li></ul><p>只會影響本地帳戶（非LDAP等遠程帳戶）的設置</p><h1 id="切換用戶-su"><a href="#切換用戶-su" class="headerlink" title="切換用戶 (su -)"></a>切換用戶 (su -)</h1><h3 id="切換到其他用戶"><a href="#切換到其他用戶" class="headerlink" title="切換到其他用戶"></a>切換到其他用戶</h3><p><code>su - 用戶名</code></p><h3 id="切換到root-帳號"><a href="#切換到root-帳號" class="headerlink" title="切換到root 帳號"></a>切換到root 帳號</h3><p><code>su -</code></p><p>切換到root 之後，如果想換到其他用戶，不用再輸入密碼</p><p>切換過去後可以使用 <code>exit</code> 登出</p><h1 id="root-權限-su-、-sudo"><a href="#root-權限-su-、-sudo" class="headerlink" title="root 權限 (su - 、 sudo)"></a>root 權限 (su - 、 sudo)</h1><p>root是整個操作系統中的超級用戶，擁有最高級的權限，說它系統內的神也不為過，神可以選擇要給哪個用戶自己部份的權力</p><h2 id="定義那些用戶可以使用sudo-etc-sudoers"><a href="#定義那些用戶可以使用sudo-etc-sudoers" class="headerlink" title="定義那些用戶可以使用sudo  (&#x2F;etc&#x2F;sudoers)"></a>定義那些用戶可以使用sudo  (&#x2F;etc&#x2F;sudoers)</h2><p>用戶是否可以使用sudo，都配置在 <strong><code>/etc/sudoers</code></strong></p><h3 id="修改用戶到-wheel群組"><a href="#修改用戶到-wheel群組" class="headerlink" title="修改用戶到 wheel群組"></a>修改用戶到 wheel群組</h3><p>找到 wheel 那行，會看到只要在wheel 這個群組內的用戶，都有root 權限 (可以使用 sudo 指令)</p><p><code>usermod -G wheel 用戶名</code></p><h3 id="定義個別用戶"><a href="#定義個別用戶" class="headerlink" title="定義個別用戶"></a>定義個別用戶</h3><p>找到root ALL(ALL)&#x3D;ALL 那行，在下一行新增個用戶名</p><p><code>用戶名 ALL(ALL)=ALL</code></p><h1 id="用戶監控-who、last、w、id-指令"><a href="#用戶監控-who、last、w、id-指令" class="headerlink" title="用戶監控 (who、last、w、id 指令)"></a>用戶監控 (who、last、w、id 指令)</h1><ul><li><code>who</code></li><li><code>last</code></li><li><code>w</code></li><li><code>pinky</code></li><li><code>id</code></li><li><code>users</code></li></ul><h3 id="who"><a href="#who" class="headerlink" title="who"></a>who</h3><p>查看那些人正在登錄中</p><ul><li>列 1：用戶名</li><li>列 2：終端（tty）名</li><li>列 3：登錄時間</li><li>列 4：來源 IP 地址或主機名</li></ul><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><p>可以查看所有登錄過系統的歷史紀錄</p><p><strong>只看登陸名</strong></p><p><code>last | awk &#39;&#123;print $1&#125;&#39;</code> </p><p><strong>只看登陸名、排序</strong></p><p><code>last | awk &#39;&#123;print $1&#125;&#39;  | sort</code></p><p><strong>只看登陸名、排序、去重複</strong></p><p><code>last | awk &#39;&#123;print $1&#125;&#39;  | sort  |  uniq</code></p><h3 id="w"><a href="#w" class="headerlink" title="w"></a>w</h3><p>比 <code>who</code> 更詳細一點的資訊，包含用戶正在使用的程序</p><ul><li>列 1：用戶名</li><li>列 2：TTY（終端）名</li><li>列 3：登錄時間</li><li>列 4：運行的命令或活動</li><li>列 5：JCPU（用戶和系統的 CPU 時間）</li><li>列 6：PCPU（僅用戶 CPU 時間）</li><li>列 7：用戶的活動狀態</li><li>列 8：登錄的來源 IP 地址或主機名</li></ul><h3 id="pinky"><a href="#pinky" class="headerlink" title="pinky"></a>pinky</h3><p>顯示有關用戶的一些基本信息，包括用戶名、真實姓名、登錄時間、空閒時間等。，較早版本可能使用<code>finger</code>指令 (centos 7 以前)</p><p>指令<br><code>pinky  用戶名</code></p><p>以下是一些可能顯示的列信息：</p><ul><li>列 1：用戶名</li><li>列 2：真實姓名</li><li>列 3：終端（tty）名</li><li>列 4：登錄時間</li><li>列 5：空閒時間</li><li>列 6：登錄 IP 地址或主機名</li></ul><p>如果未指定用戶名，它將默將當前登錄中的用戶顯示出來</p><h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>查看自己的資訊 (UID、組別….)</p><p><code>id</code> </p><p>查看特定用戶資訊 (UID、組別….)</p><p><code>id 用戶名</code></p><h2 id="users"><a href="#users" class="headerlink" title="users"></a>users</h2><p>查看當前登陸的用戶名</p><h1 id="與用戶對話"><a href="#與用戶對話" class="headerlink" title="與用戶對話"></a>與用戶對話</h1><ul><li><code>wall</code></li><li><code>write</code></li></ul><h2 id="wall"><a href="#wall" class="headerlink" title="wall"></a>wall</h2><p>跟所有當前登錄中的用戶廣播</p><p><code>wall</code><br>輸入指令後可以開始輸入要廣播的訊息，打完按 ctrl+D 送出</p><p>或是可以直接在後面接要廣播的訊息<br><code>wall your message</code></p><h2 id="write"><a href="#write" class="headerlink" title="write"></a>write</h2><p>跟指定用戶傳遞訊息</p><p><code>write 用戶名</code></p><p>打完按 ctrl+D 送出</p><p>或是可以直接在後面接要廣播的訊息<br><code>write 用戶名 your message</code></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 檔案權限</title>
    <link href="/2023/07/31/linux-file-access/"/>
    <url>/2023/07/31/linux-file-access/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Linux 是一個多用戶的操作系統，在眾多的使用場景中，每個用戶都有可能會對檔案進行增刪與修改，如果都給予用戶最高權限，勢必會出現重要的系統檔案被誤刪的情況，或者試想某個用戶遭到駭客盜用，駭客就能在系統上為所欲為，刪光所有檔案，不對檔案進行保護對於系統來說是個災難，因此對於每個檔案、用戶設定權限格外重要。</p><p>本文將會介紹Linux 系統中，針對檔案的權限如何修改及設定。</p><h1 id="檔案的所有權-所有者、群組"><a href="#檔案的所有權-所有者、群組" class="headerlink" title="檔案的所有權 (所有者、群組)"></a>檔案的所有權 (所有者、群組)</h1><p>每個檔案都有2種類型的所有權 (ownership)</p><ul><li>user  :  擁有者</li><li>group  :  擁有群組</li></ul><h2 id="修改檔案的擁有者-chown"><a href="#修改檔案的擁有者-chown" class="headerlink" title="修改檔案的擁有者 (chown)"></a>修改檔案的擁有者 (chown)</h2><p>只有文件擁有者、系統管理員帳號可以修改</p><p><code>chown 新的擁有者 檔名</code></p><p>例如 : <code>chown austin72905 test-right</code></p><p><code>chown -R</code>  :  會對該目錄裡面所有的檔案進行遞歸修改權限</p><h2 id="修改檔案的擁有群組-chgrp"><a href="#修改檔案的擁有群組-chgrp" class="headerlink" title="修改檔案的擁有群組 (chgrp)"></a>修改檔案的擁有群組 (chgrp)</h2><p>只有文件擁有者、系統管理員帳號可以修改</p><p><code>chgrp 新的擁有全組 檔名</code></p><p>例如 : <code>chown austin72905 test-right</code></p><h1 id="檔案權限"><a href="#檔案權限" class="headerlink" title="檔案權限"></a>檔案權限</h1><p>只有文件擁有者、系統管理員帳號可以修改</p><p>每個檔案有 3  種類型的權限</p><ul><li>r  :  讀，沒有此權限無法 <code>ls</code> 查看目錄裡的文件</li><li>w  :  寫，沒有此權限無法修改、刪除檔案</li><li>x  :  執行，沒有此權限無法<code>cd</code> 進入該目錄</li></ul><p>3 種權限針對不同的對象</p><ul><li>u  :  擁有者 (user)</li><li>g  :  擁有群組 (group)</li><li>o  :  其他人 (other)，系統上其他的一般使用者</li></ul><h3 id="如何查看檔案權限"><a href="#如何查看檔案權限" class="headerlink" title="如何查看檔案權限 ?"></a>如何查看檔案權限 ?</h3><p>使用<code>ls -l</code> 可以看到 類似於 <code>drwxr-xr-x</code> 的一串英文字共10個字符，把它拆成 1、3、3、3 的方式查看</p><table><thead><tr><th>檔案類型</th><th>擁有者權限</th><th>擁有群組權限</th><th>其他人權限</th></tr></thead><tbody><tr><td>d</td><td>rwx</td><td>r-x</td><td>r-x</td></tr></tbody></table><p>由上方範例可知該檔案</p><ul><li>是一個目錄</li><li>擁有者權限 : 讀、寫、執行</li><li>擁有群組權限 : 讀、執行 (-代表沒有該權限)</li><li>其他人權限 : 讀、執行 (-代表沒有該權限)</li></ul><h2 id="修改檔檔案權限-chmod"><a href="#修改檔檔案權限-chmod" class="headerlink" title="修改檔檔案權限 (chmod)"></a>修改檔檔案權限 (chmod)</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用 +-"></a>使用 +-</h3><p>針對對象<code>u、g、o</code>，加上或減少<code>+-</code>，讀寫執行權限<code>rwx</code></p><p><code>chmod (ugo)(+-)(rwx) 檔名</code></p><p>給檔案的 擁有者 去掉 <code>寫</code> 權限</p><p><code>chmod u-w 檔名</code></p><p>給檔案 的 擁有者 加上 <code>寫</code> 跟 <code>執行</code> 權限</p><p><code>chmod u+rw 檔名</code></p><p>給檔案 的 擁有者、擁有群組 加上 <code>寫</code> 跟 <code>執行</code> 權限</p><p><code>chmod ug+rw 檔名</code></p><h3 id="使用-數字"><a href="#使用-數字" class="headerlink" title="使用 數字"></a>使用 數字</h3><p>修改順序為 ugo</p><p>代表數字</p><ul><li><p>4 : r</p></li><li><p>2: w</p></li><li><p>1: u</p></li></ul><p>所以要給一個檔案的擁有者 讀+寫 權限  4+2 &#x3D; 6，給0就是關掉該權限，其他的數字都是由這三個數字相加而來</p><p><code>chmod 600 檔名</code></p><p>上面的範例 擁有者 有 讀+寫 權限 (4+2)，擁有群組、其他人完全沒有權限 (0)</p><p>還有一個常見範例，權限全開<br><code>chmod 777 檔名</code></p><p><code>chmod -R</code> :  會對該目錄裡面所有的檔案進行遞歸修改權限</p><h1 id="針對特定用戶-or-特定群組設定權限-ACL"><a href="#針對特定用戶-or-特定群組設定權限-ACL" class="headerlink" title="針對特定用戶 or 特定群組設定權限 (ACL)"></a>針對特定用戶 or 特定群組設定權限 (ACL)</h1><p>運行級別比 檔案權限還高</p><p>假設只想要給某個用戶有讀寫的權限，一般用戶只有讀權限，就可以使用ACL，給予單獨的用戶或群組設定權限</p><h2 id="設定權限-setfacl"><a href="#設定權限-setfacl" class="headerlink" title="設定權限 (setfacl)"></a>設定權限 (setfacl)</h2><p>(set file acl)</p><p><code>setfacl -m u:用戶名:權限 檔名</code></p><p><code>setfacl -m g:群組名:權限 檔名</code></p><p>例如</p><p><code>setfacl -m u:test:rw test-right</code></p><p><code>setfacl -m g:test:rw test-right</code></p><p>針對目錄和 子目錄 跟 子文件 遞歸設定</p><p><code>setfacl -Rm u:用戶名:權限 檔名</code></p><h3 id="刪除某個用戶的權限-x"><a href="#刪除某個用戶的權限-x" class="headerlink" title="刪除某個用戶的權限 (-x)"></a>刪除某個用戶的權限 (-x)</h3><p><code>setfacl -x u:用戶名 檔名</code></p><h3 id="刪除所有的acl-權限-b"><a href="#刪除所有的acl-權限-b" class="headerlink" title="刪除所有的acl 權限 (-b)"></a>刪除所有的acl 權限 (-b)</h3><p><code>setfacl -b  檔名</code></p><h2 id="獲取權限-getfacl"><a href="#獲取權限-getfacl" class="headerlink" title="獲取權限 (getfacl)"></a>獲取權限 (getfacl)</h2><p>(get file acl)</p><p><code>getfacl 檔名</code></p><h2 id="未設定前"><a href="#未設定前" class="headerlink" title="未設定前"></a>未設定前</h2><pre><code class="hljs"># file: 檔名# owner: 擁有者# group: 擁有群組user::rw-group::r--mask::r--other::r--</code></pre><hr><h2 id="設定後，會發現多個一個特別用戶的權限"><a href="#設定後，會發現多個一個特別用戶的權限" class="headerlink" title="設定後，會發現多個一個特別用戶的權限"></a>設定後，會發現多個一個特別用戶的權限</h2><pre><code class="hljs"># file: 檔名# owner: 擁有者# group: 擁有群組user::rw-user:特別用戶:rw-group::r--mask::r--other::r--</code></pre><hr><p>mask作用</p><ul><li><p>mask 表示在 ACL 中的使用者權限或群組權限的最大權限值，用於限制 ACL 權限的有效性</p></li><li><p>mask 的值在設置 ACL 時會自動計算，通常不需要手動更改。</p></li><li><p>雖然 擁有者 和群組 本來應該有讀取和寫入權限（rw-），但由於 mask 設置為 r–，所以實際有效的權限為 r–，即只有讀取權限。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 文件系統</title>
    <link href="/2023/07/30/linux-filesystem/"/>
    <url>/2023/07/30/linux-filesystem/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Linux 中每個目錄都有其各自的作用，有些目錄也有限制訪問權限，所以安裝軟體時還是別隨心所欲地亂放，記得第一次使用時安裝nginx，竟然把它放在<code>/etc</code> 目錄下，因為些權限問題而啟動時遇到困難。今天就整理一下常見目錄的作用，以及常用操作目錄及文件的指令。</p><h1 id="目錄作用"><a href="#目錄作用" class="headerlink" title="目錄作用"></a>目錄作用</h1><ul><li><p><code>/boot</code> : 存放系統開機時必要的文件</p></li><li><p><code>/root</code> : root user 的家目錄，不等同於 “&#x2F;”</p></li><li><p><code>/dev</code> : 硬體設備(keyboard、mouse)的操作文件</p></li><li><p><code>/etc</code> : 存放<font color=#EB5757>配置文件</font>(如:DNS、某個應用的配置檔)</p></li><li><p><code>/bin</code> ⇒ <code>/usr/bin</code> : 這兩個目錄都是存放常見且通用的系統命令，(如 ls（列出目錄內容）、cp（複製文件）、mv（移動文件）等)</p></li><li><p><code>/sbin</code>⇒ <code>/usr/sbin</code> : 存放系統管理員使用的系統級命令，(ifconfig（設置網絡接口）、fdisk（磁盤分割工具）、mount（掛載文件系統）等)</p></li><li><p><code>/opt</code> : (optional)用來存放第三方軟體</p></li><li><p><code>/proc</code> : 是一種虛擬文件系統，<font color=#EB5757>紀錄正在運行中的進程文件</font>，也能查看目前的硬體訊息如CPU，如果停止運行裡面文件就會消失，這些文件只存在於記憶體中</p></li><li><p><code>/lib</code> ⇒ <code>/usr/lib</code> : 所有<font color=#EB5757>C 語言的依賴包</font>都存在這裡，如使用的那些cmd 是用C 語言寫的，他的依賴包就是存在這個資料夾，可以用 strace -e open pwd  就可以看這個指令使用的依賴包有哪些</p></li><li><p><code>/tmp</code> : 檔案暫時存放區</p></li><li><p><code>/home</code> : 用戶的家目錄，裡面會有所有用戶的家目錄(除了root)</p></li><li><p><code>/var</code> : 系統的log 存放區</p></li><li><p><code>/run</code> : 它主要用於存放在系統開機期間需要在運行時創建的臨時運行時檔案（runtime files）。&#x2F;run 目錄通常用於<font color=#EB5757>存放正在運行的系統和服務的狀態資訊、進程檔案、socket 檔案</font>等。這些檔案在系統重新開機後會被清理，因為 &#x2F;run 目錄是一個暫存的文件系統，它存在於記憶體中，而不是永久存儲在硬碟上。裡面有PID 文件，用于存储进程的 PID（Process ID）信息</p></li><li><p><code>/mnt</code> : 可以用來掛載其他的文件系統</p></li><li><p><code>/media</code> : 可以用來<font color=#EB5757>掛載可移動裝置</font>，包括 USB 驅動器、光碟、SD 卡、移動硬碟等</p></li><li><p><code>/usr</code> : 存放使用者相關的應用程式和檔案，通常被稱為 “Unix System Resources” 或 “User System Resources</p><ul><li><p><code>/usr/bin</code> : 存放大部分使用者可執行的命令和應用程式，包括系統自帶的工具和第三方軟體。例如，ls、cp、mv 等常用命令就位於 &#x2F;usr&#x2F;bin 目錄下。</p></li><li><p><code>/usr/local</code> : 通常被用於<font color=#EB5757>安裝本地使用者自己編譯的軟體</font>，目錄下通常包含 bin、lib、include 等子目錄，類似於 &#x2F;usr 目錄的結構。</p></li><li><p><code>/usr/share</code> : 共享的資料檔案，例如文件、幫助檔案、圖示。</p></li><li><p><code>/usr/lib</code> : 存放系統和應用程式所使用的共享庫檔案（shared libraries）</p></li></ul></li></ul><h1 id="檔案屬性"><a href="#檔案屬性" class="headerlink" title="檔案屬性"></a>檔案屬性</h1><table><thead><tr><th>Type</th><th># of links</th><th>Owner</th><th>Group</th><th>Size</th><th>Month</th><th>Day</th><th>Time</th><th>Name</th></tr></thead><tbody><tr><td>drwxr-xr-x.</td><td>21</td><td>root</td><td>root</td><td>4096</td><td>Feb</td><td>27</td><td>13:33</td><td>var</td></tr><tr><td>lrwxrwxrwx.</td><td>1</td><td>root</td><td>root</td><td>7</td><td>Feb</td><td>27</td><td>13:15</td><td>bin</td></tr><tr><td>-rw-r-r–</td><td>1</td><td>root</td><td>root</td><td>0</td><td>Mar</td><td>27</td><td>13:15</td><td>test</td></tr></tbody></table><ul><li><code>Type</code>  :  檔案的類型 與 相關權限</li><li><code># of links</code> : 該檔案有幾個硬連結，如果是目錄，就是 (該目錄+其父目錄+其子目錄)</li><li><code>Owner</code>  :  檔案擁有者</li><li><code>Group</code>  :  檔案擁有群組</li></ul><h1 id="檔案類型"><a href="#檔案類型" class="headerlink" title="檔案類型"></a>檔案類型</h1><p>使用 <code>ls -l</code> 常可以看到文件屬性前面有一段英文字如<code>-rw-r-r--</code>，其中最前面的字母代表了該檔案的類型，分別為</p><ul><li><code>d</code> : 目錄</li><li><code>l</code> : 連結</li><li><code>-</code> :  一般文件</li><li><code>s</code> : socket</li><li><code>c</code> : 裝置文件(keyboard)</li><li><code>p</code> : Name pipe</li><li><code>b</code> : block device</li></ul><h1 id="硬連結（Hard-Link）、軟連結（Soft-Link）、inode"><a href="#硬連結（Hard-Link）、軟連結（Soft-Link）、inode" class="headerlink" title="硬連結（Hard Link）、軟連結（Soft Link）、inode"></a>硬連結（Hard Link）、軟連結（Soft Link）、inode</h1><ul><li><p>inode :  檔案在磁碟上的<code>指標</code>(實際上的物理位置)，每次檢索檔案時，磁碟都會用到這組數字</p></li><li><p>硬連結（Hard Link） :  直接連到 inode ，不經過檔案，他和檔案共享同一個數據塊，所以檔案刪除或是改名，硬連結不會被影響，不可跨文件系統，當所有硬連結和原始檔案都被刪除時，才會真正釋放檔案的磁碟空間。</p></li><li><p>軟連結（Soft Link） :  像是創建檔案的捷徑，透過檔案(他指向的只是檔案的路徑，而不是真實數據)，再連到 inode， <font color=#EB5757>檔案刪除或是改名，軟連結就GG了</font>，可以跨文件系統</p></li><li><p>指令</p><ul><li><code>ln</code> : 創建硬連結</li><li><code>ln -s</code> : 創建軟連結</li></ul></li><li><p>不要在同一個目錄下創建連結</p></li></ul><p>使用連結時需要小心，以免因刪除原始檔案或連結檔案而丟失資料或引起檔案系統的混亂。同時，避免創建過多的<code>硬連結</code>，以免在刪除硬連結時不小心刪除了原始檔案。</p><h1 id="導航目錄的位置"><a href="#導航目錄的位置" class="headerlink" title="導航目錄的位置"></a>導航目錄的位置</h1><h2 id="導航目前目錄位置-pwd"><a href="#導航目前目錄位置-pwd" class="headerlink" title="導航目前目錄位置 (pwd)"></a>導航目前目錄位置 (pwd)</h2><ul><li>顯示當前所在的目錄名稱<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="切換目錄-cd"><a href="#切換目錄-cd" class="headerlink" title="切換目錄 (cd)"></a>切換目錄 (cd)</h2><ul><li>(change directory) 切換目錄<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 目錄名<br></code></pre></td></tr></table></figure></li></ul><h2 id="打印目錄內容-ls"><a href="#打印目錄內容-ls" class="headerlink" title="打印目錄內容 (ls)"></a>打印目錄內容 (ls)</h2><p>常用參數</p><ul><li><code>-l</code>：打印詳細內容</li><li><code>-a</code>：顯示隱藏檔案</li><li><code>-t</code>：按時間排序</li><li><code>-r</code>：倒序</li><li><code>-S</code>：按文件大小排序</li><li><code>-h</code>：文件大小以人類可閱讀方式(kb、gb..)</li></ul><h3 id="打印當前目錄內容"><a href="#打印當前目錄內容" class="headerlink" title="打印當前目錄內容"></a>打印當前目錄內容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><h3 id="打印指定目錄內容"><a href="#打印指定目錄內容" class="headerlink" title="打印指定目錄內容"></a>打印指定目錄內容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /home -l<br></code></pre></td></tr></table></figure><h3 id="常用範例"><a href="#常用範例" class="headerlink" title="常用範例"></a>常用範例</h3><ul><li><p>打印目錄詳細內容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure></li><li><p>打印目錄內容，按時間排序，排序使用倒序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -ltr<br></code></pre></td></tr></table></figure></li><li><p>有些發行板因為 <code>ls -l</code> 太常用了所以可以簡寫成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ll<br></code></pre></td></tr></table></figure></li><li><p>按文件大小排序 (大到小)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lS<br></code></pre></td></tr></table></figure></li><li><p>按文件大小排序 (大到小)，文件大小以人類可閱讀格式呈現</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lhS<br></code></pre></td></tr></table></figure></li></ul><h1 id="針對文件、目錄的操作"><a href="#針對文件、目錄的操作" class="headerlink" title="針對文件、目錄的操作"></a>針對文件、目錄的操作</h1><h2 id="創建檔案"><a href="#創建檔案" class="headerlink" title="創建檔案"></a>創建檔案</h2><h3 id="創建文件-touch"><a href="#創建文件-touch" class="headerlink" title="創建文件 (touch)"></a>創建文件 (touch)</h3><p>創建單一文件 <code>touch 檔名</code></p><p>例如: <code>touch test</code></p><p>創建多個文件 <code>touch 檔名1 檔名2 檔名3</code></p><p>例如: <code>touch test1 test2 test3</code></p><p>創建多文件</p><p><code>touch abc&#123;1..9&#125;.xyz</code><br>會新增 abc1.xyz、abc2.xyz … abc9.xyz 的檔案</p><h3 id="創建目錄-mkdir"><a href="#創建目錄-mkdir" class="headerlink" title="創建目錄 (mkdir)"></a>創建目錄 (mkdir)</h3><p><code>mkdir 目錄名</code></p><p>例如: <code>mkdir test-dir</code></p><h2 id="複製檔案-cp"><a href="#複製檔案-cp" class="headerlink" title="複製檔案 (cp)"></a>複製檔案 (cp)</h2><p>常用參數</p><ul><li><code>-r</code>：遞歸，用來複製整個目錄</li><li><code>-a</code>：保留源文件的權限、屬性</li><li><code>-f</code>：強制覆蓋目標文件</li></ul><h3 id="複製文件"><a href="#複製文件" class="headerlink" title="複製文件"></a>複製文件</h3><ul><li><p>複製文件 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> 來源檔名 目標檔名<br></code></pre></td></tr></table></figure></li><li><p>如:將test 文件 複製一份，新檔名叫 test-bak</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> <span class="hljs-built_in">test</span> test-bak<br></code></pre></td></tr></table></figure></li><li><p>複製多個文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> 來源檔名1 來源檔名2 目標檔名<br></code></pre></td></tr></table></figure></li></ul><h3 id="複製目錄"><a href="#複製目錄" class="headerlink" title="複製目錄"></a>複製目錄</h3><p><code>-r</code> 代表把目錄裡面的文件也都複製一份， 他是把原目錄裡面的檔案都複製一分到新目錄名下面</p><ul><li><p>複製目錄</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -r 來源目錄 目標目錄<br></code></pre></td></tr></table></figure></li><li><p>如:將 test-dir 目錄複製一份，新目錄名叫test-dir-bak</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -r test-dir test-dir-bak<br></code></pre></td></tr></table></figure></li></ul><h2 id="尋找檔案-find、locate"><a href="#尋找檔案-find、locate" class="headerlink" title="尋找檔案 (find、locate)"></a>尋找檔案 (find、locate)</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find 查詢的起始目錄 -name <span class="hljs-string">&quot;檔名&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>從當前目錄開始尋找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -name <span class="hljs-string">&quot;test&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>從根目錄開始尋找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name <span class="hljs-string">&quot;test&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><p><code>locate 檔名</code></p><p>例如: <code>locate test</code></p><h3 id="locate-、find-差異"><a href="#locate-、find-差異" class="headerlink" title="locate 、find 差異?"></a>locate 、find 差異?</h3><ul><li><p><code>locate</code> 有維護一張表，他會直接去從表查，所以速度會比<code>find</code> 快很多，但是表如果還不是最新版本(該表是系統排程更新)，可能查詢結果不準確 (<code>updatedb</code>指令)</p></li><li><p><code>find</code> 是每次都會去文件系統查，速度較慢，但是準確</p></li></ul><h2 id="刪除檔案-rm"><a href="#刪除檔案-rm" class="headerlink" title="刪除檔案 (rm)"></a>刪除檔案 (rm)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> 文件名<br><br><span class="hljs-comment"># 刪除多個文件</span><br><span class="hljs-built_in">rm</span> 文件名1 文件名2<br></code></pre></td></tr></table></figure><p>常用參數</p><ul><li><code>-r</code>：遞歸，用來刪除整個目錄</li><li><code>-f</code>：強制刪除，忽略警告訊息，常用</li></ul><h3 id="強制刪除文件"><a href="#強制刪除文件" class="headerlink" title="強制刪除文件"></a>強制刪除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -f 文件名<br></code></pre></td></tr></table></figure><h3 id="刪除目錄"><a href="#刪除目錄" class="headerlink" title="刪除目錄"></a>刪除目錄</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf 目錄名<br></code></pre></td></tr></table></figure><ul><li>也可以使用<code>rmdir</code>，但我覺得很沒用，因為只能刪除空的目錄</li></ul><h2 id="移動檔案-or-重新命名-mv"><a href="#移動檔案-or-重新命名-mv" class="headerlink" title="移動檔案 or 重新命名 (mv)"></a>移動檔案 or 重新命名 (mv)</h2><p>重新命名 or 移動檔案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> 來源文件 目標文件<br></code></pre></td></tr></table></figure><p>常用參數</p><ul><li><code>-f</code>：強制覆蓋目標文件</li></ul><h3 id="重新命名"><a href="#重新命名" class="headerlink" title="重新命名"></a>重新命名</h3><ul><li>將 test1 重新命名為 test2<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> test1 test2<br></code></pre></td></tr></table></figure></li></ul><h3 id="移動文件"><a href="#移動文件" class="headerlink" title="移動文件"></a>移動文件</h3><ul><li><p>移動文件到目標目錄</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> test1 /root/<br></code></pre></td></tr></table></figure></li><li><p>移動文件到目標目錄，並重新命名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> test1 /root/newtest1<br></code></pre></td></tr></table></figure></li></ul><h3 id="移動目錄"><a href="#移動目錄" class="headerlink" title="移動目錄"></a>移動目錄</h3><ul><li>移動testdir&#x2F; 目錄， 到 testdir2&#x2F; 目錄裡面<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> testdir/ testdir2/<br></code></pre></td></tr></table></figure></li></ul><h1 id="通配符-WildCards"><a href="#通配符-WildCards" class="headerlink" title="通配符  (WildCards)"></a>通配符  (WildCards)</h1><p>通配符是用於匹配檔案名或目錄名的特殊字符，常用於需要批量操作一些檔名很類似， abc1、abc2、abc3…abc99，如日誌檔</p><p>可以快速搜尋符合條件的檔案，並執行相對應動作，很大的提高工作效率，常用的通配符有以下幾種</p><ul><li><p><code>*</code>  :  用來匹配0~ 多個字符，如想要找出所有的txt結尾的檔案， 可以用<code>*.txt</code>表示</p></li><li><p><code>?</code> :  匹配1個字符，如想要找出 ab1、ab2、ab3…ab9 等 ab開頭，結果只有一個字符的檔案，可以用<code>ab?</code>表示</p></li><li><p><code>[ ]</code> :  指定一個字符集合 例如含有x或y的檔名，可以用<code>*[xy]*</code>表示</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github 上實用的小技巧</title>
    <link href="/2023/07/27/awesome-skill-in-github/"/>
    <url>/2023/07/27/awesome-skill-in-github/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Github 是一個代碼的存儲庫，上面有許多優秀的開源方案，有時想要搜尋符合自己需求的專案，搜尋結果可能包含多種程式語言，或是代碼庫早已沒有維護。</p><p>就算找到了符合自己需求的代碼庫，每次想要查看他的源代碼都需要下載到本地，本次就來介紹一些實用的技巧，提高查看源代碼時的體驗。</p><h1 id="搜尋代碼庫技巧"><a href="#搜尋代碼庫技巧" class="headerlink" title="搜尋代碼庫技巧"></a>搜尋代碼庫技巧</h1><h2 id="進階搜索"><a href="#進階搜索" class="headerlink" title="進階搜索"></a>進階搜索</h2><p>可以直接搜尋 <code>https://github.com/search/advanced</code>，進入進階搜索的頁面，</p><p>也可以直接使用快捷鍵<code>s</code>，開啟github 高級搜索功能，可以自行輸入語句設定搜索條件，這邊介紹幾個常用的語法</p><h3 id="設定星星數"><a href="#設定星星數" class="headerlink" title="設定星星數"></a>設定星星數</h3><ul><li><code>mitm stars:&gt;500</code> (內容包含mitm)</li></ul><h3 id="設定語言"><a href="#設定語言" class="headerlink" title="設定語言"></a>設定語言</h3><ul><li><code>mitm language:Go</code></li><li><code>mitm language:Go language:JAVA</code>  (使用 JAVA、Go 寫的)</li></ul><h3 id="設定代碼庫更新時間，可以用來看存儲庫是否還有在維護"><a href="#設定代碼庫更新時間，可以用來看存儲庫是否還有在維護" class="headerlink" title="設定代碼庫更新時間，可以用來看存儲庫是否還有在維護"></a>設定代碼庫更新時間，可以用來看存儲庫是否還有在維護</h3><ul><li><code>mitm pushed:&gt;2020-01-01</code></li></ul><h3 id="指定欄位"><a href="#指定欄位" class="headerlink" title="指定欄位"></a>指定欄位</h3><ul><li><code>mitm in:name</code>  (指定倉庫名稱包含mitm)</li></ul><h3 id="同時設定多個條件"><a href="#同時設定多個條件" class="headerlink" title="同時設定多個條件"></a>同時設定多個條件</h3><ul><li><code>mitm in:name stars:&gt;500 language:Go  pushed:&gt;2020-01-01</code></li></ul><h1 id="代碼查看技巧"><a href="#代碼查看技巧" class="headerlink" title="代碼查看技巧"></a>代碼查看技巧</h1><h2 id="存儲庫內常用快捷鍵"><a href="#存儲庫內常用快捷鍵" class="headerlink" title="存儲庫內常用快捷鍵"></a>存儲庫內常用快捷鍵</h2><h3 id="在代碼庫搜尋文件"><a href="#在代碼庫搜尋文件" class="headerlink" title="在代碼庫搜尋文件"></a>在代碼庫搜尋文件</h3><p>使用<code>T</code>快捷鍵，可以在代碼庫進行全文件搜索，在那種目錄包很多層的代碼庫中尤其好用</p><h3 id="快速跳到某一行"><a href="#快速跳到某一行" class="headerlink" title="快速跳到某一行"></a>快速跳到某一行</h3><p>使用<code>L</code> 快捷鍵</p><h3 id="查看某文件的改動紀錄"><a href="#查看某文件的改動紀錄" class="headerlink" title="查看某文件的改動紀錄"></a>查看某文件的改動紀錄</h3><p>使用<code>B</code> 快捷鍵</p><h2 id="線上開啟vscode-編輯器"><a href="#線上開啟vscode-編輯器" class="headerlink" title="線上開啟vscode 編輯器"></a>線上開啟vscode 編輯器</h2><p>使用<code>.</code>快捷鍵，github會開啟一個線上vscode 編輯器，就不用每次都要下載源代碼到本地，還可以在線上安裝plugin，但語言的標準庫就不像本地一樣方便，可以直接查看內容</p><h3 id="使用-alt"><a href="#使用-alt" class="headerlink" title="使用 alt + &lt;- (左方向建) 可以回到上一頁"></a>使用 alt + &lt;- (左方向建) 可以回到上一頁</h3><p>這個是vscode 提供的快捷鍵功能</p><h1 id="線上運行代碼"><a href="#線上運行代碼" class="headerlink" title="線上運行代碼"></a>線上運行代碼</h1><p>在網址前墜加上 <code>gitpod.io/#</code></p><p>如<br><code>https://github.com/owner/repository</code><br>改成<br><code>https://gitpod.io/#/github.com/owner/repository</code></p><p>會開啟gitpod 線上運行環境的功能，自動安裝目前項目需要的依賴包，並可自行輸入command line，在網頁上查看代碼執行的效果，這部分我沒有嘗試，有興趣的可以自行試試看。</p><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://www.youtube.com/watch?v=yoRxfPfFOh8&t=20s">5个隐藏的GitHub神技巧，助你秒变大佬！</a><br><a href="https://zhuanlan.zhihu.com/p/347723938">21个GitHub精准搜索的神仙技巧</a><br><a href="https://docs.github.com/en/search-github/github-code-search/understanding-github-code-search-syntax">github搜尋語法官方文檔</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安裝golang (ubuntu 20.04)</title>
    <link href="/2023/07/21/install-golang/"/>
    <url>/2023/07/21/install-golang/</url>
    
    <content type="html"><![CDATA[<h2 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h2><ol><li>到官網連結安裝，(官網連結可以能會修改)，安裝的版本選 amd64</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://go.dev/dl/go1.20.6.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><ol start="2"><li>解壓縮到 <code>/usr/local</code>，解壓縮完會發現  &#96;&#x2F;usr&#x2F;local&#96;&#96; 多了一個go 目錄</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -C 解壓縮的目標目錄</span><br>sudo tar -C /usr/local -xzf go1.20.6.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><ol start="3"><li>在 <code>/etc/profile</code> 檔案 新增 go 的 環境變數</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 編輯 /etc/profile</span><br>sudo vi /etc/profile<br><br><span class="hljs-comment"># 在檔案中新增這行</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/usr/local/go/bin <br></code></pre></td></tr></table></figure><ol start="4"><li>刷新當前shell環境，獲取到&#x2F;etc&#x2F;profile最新的配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><ol start="5"><li>也可以修改~&#x2F;.profile</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi ~/.profile<br><br><span class="hljs-comment"># 在檔案中新增這行</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/usr/local/go/bin <br><br><span class="hljs-comment"># 刷新當前shell環境</span><br><span class="hljs-built_in">source</span> ~/.profile<br></code></pre></td></tr></table></figure><ol start="6"><li>檢查下是否安裝成功<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">go version<br><br><span class="hljs-comment"># 應該會出現</span><br>go version go1.20.6 linux/amd64<br></code></pre></td></tr></table></figure></li></ol><p>關掉 cmd 後可能會出現”無法找到go 指令”，可以重啟VM 試試</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="https://quietbo.com/2022/07/21/golang-%E5%AE%89%E8%A3%9D-windows-ubuntu20-04/">[Golang] 安裝 (Windows &amp; ubuntu20.04)</a></p><p><a href="https://www.linuxprobe.com/linux-source-useful.html">Linux中source命令的使用方式</a></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>將Hexo Blog 部屬到github pages 上</title>
    <link href="/2023/07/17/deploy-to-github-page/"/>
    <url>/2023/07/17/deploy-to-github-page/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>撰寫完文章後，下一步就是將網站部屬到github pages上了，github 除了可以存放代碼之外，還提供讓你免費部屬靜態網站的功能，<br>但還是有一些限制，如respository 容量只能到1G，但在初期文章數量不多時，是個好選擇。</p><p>官方提供了兩種部屬方式</p><h2 id="步驟-使用一鍵部屬"><a href="#步驟-使用一鍵部屬" class="headerlink" title="步驟 (使用一鍵部屬)"></a>步驟 (使用一鍵部屬)</h2><ol><li>創建repository，並將hexo 專案推上去，預設<code>public</code>目錄不會被推上去</li></ol><p>會有兩種域名呈現方式</p><ul><li><username>.github.io</li><li><username>.github.io&#x2F;repositoryName</li></ul><p>如果想要讓blog的域名以 <code>username</code>.github.io 呈現，那在創建repository時，repository名稱要取為 <code>username</code>.github.io ，<code>username</code>為github帳號名 如: austin72905.github.io</p><p>如果是<code>username</code>.github.io&#x2F;repositoryName呈現方式，在創建repository時，名稱任意。</p><ol start="2"><li>將<code>_config.yml</code> 修改:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:austin72905/austin72905.github.io.git</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span> <span class="hljs-comment"># 指定github pages 編譯的分支，不要使用master</span><br><br></code></pre></td></tr></table></figure><p><em><strong>branch分支不要指定master!!</strong></em><br>如果branch指定master，hexo 專案會把<code>public</code>目錄的內容推到master 上，蓋掉你原本推上去的內容，這樣其他的檔案就無法做版本控制了</p><ul><li>master : 未打包的原始碼</li><li>gh-pages : 打包過後的靜態文件</li></ul><p>github pages 編譯時針對gh-pages 上的文件進行編譯</p><ol start="3"><li>下載一鍵部屬套件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><ol start="4"><li>部屬</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>透過 hexo 一鍵部屬套件部屬後，未來更新代碼推上git後，還是需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g <span class="hljs-comment"># 生成靜態文件</span><br>hexo d <span class="hljs-comment"># 部屬</span><br></code></pre></td></tr></table></figure><p>將新代碼部屬上去。</p><p>如果要使用Github Action實現持續部屬(CD)的功能，需要使用Hexo 官方提供的另一種方式。</p><h2 id="步驟-使用Github-Action-部屬到Github-Pages-推薦"><a href="#步驟-使用Github-Action-部屬到Github-Pages-推薦" class="headerlink" title="步驟 (使用Github Action 部屬到Github Pages) (推薦)"></a>步驟 (使用Github Action 部屬到Github Pages) (推薦)</h2><ol><li>創建github repository</li></ol><p>同一鍵部屬步驟1，依照需求調整repository名稱，如: <code>username</code>.github.io</p><ol start="2"><li><p>在hexo 專案中建立<code>.github/workflows/pages.yml</code></p></li><li><p>查看你的node 版本</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node --version  <span class="hljs-comment"># 得到的結果會類似 (v16.5.3)</span><br></code></pre></td></tr></table></figure><ol start="4"><li>將以下內容貼到<code>.github/workflows/pages.yml</code>， (將 <code>16</code> 替換為上個步驟中記下的版本)</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Pages</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span>  <span class="hljs-comment"># default branch，或是master</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">pages:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">permissions:</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">write</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-comment"># If your repository depends on submodule, please see: https://github.com/actions/checkout</span><br>          <span class="hljs-attr">submodules:</span> <span class="hljs-string">recursive</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">16.</span><span class="hljs-string">x</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;16&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">NPM</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.OS</span> <span class="hljs-string">&#125;&#125;-npm-cache</span><br>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">github_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>將hexo 專案推上去，預設<code>public</code>目錄不會被推上去</p></li><li><p>在儲存庫中前往 <strong>Settings</strong> &gt; <strong>Pages</strong> &gt; <strong>Source</strong>，並將 branch 改為 gh-pages</p></li></ol><p>使用此方式，未來只要有新代碼推上去，就會自動觸發Github Action，將Github Pages 上的網站重新編驛更新。</p><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><p><a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/about-github-pages">github pages文檔</a></p><p><a href="https://hexo.io/zh-tw/docs/github-pages">在 GitHub Pages 上部署 Hexo</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 主題修改(Fluid)</title>
    <link href="/2023/07/17/hexo-theme-modify/"/>
    <url>/2023/07/17/hexo-theme-modify/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>配置完hexo 主題後，發現很多地方跟自己想要呈現的方式不太一樣，這邊就要來客製化一下了，介紹常見的修改</p><p>配置文件都在<code>themes</code> 目錄中<code>fluid/_config.yml</code>。</p><h2 id="整個頁面"><a href="#整個頁面" class="headerlink" title="整個頁面"></a>整個頁面</h2><h3 id="修改左上角，blog-的名稱"><a href="#修改左上角，blog-的名稱" class="headerlink" title="修改左上角，blog 的名稱"></a>修改左上角，blog 的名稱</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E5%8D%9A%E5%AE%A2%E6%A0%87%E9%A2%98">博客标题</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">navbar:<br>    blog_title: blog標題<br></code></pre></td></tr></table></figure><h3 id="修改右上角，巡航列的標題"><a href="#修改右上角，巡航列的標題" class="headerlink" title="修改右上角，巡航列的標題"></a>修改右上角，巡航列的標題</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95">巡航菜單</a></p><p>可以看到文檔說明<code>key</code> 用于关联有语言配置，如不存在关联则显示 key 本身的值，<br>在這邊修改key的話，在文章內頁標題的文字不會改變。</p><p>如:我想要把”歸檔”兩個字，修改為”全部文章”，當導覽到全部文章頁面時，標題也要顯示全部文章，要達成此效果<br>要直接修改<code>languages/zh-TW.yml</code><br>修改完如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">archive:</span><br>    <span class="hljs-attr">menu:</span> <span class="hljs-string">&#x27;全部文章&#x27;</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;全部文章&#x27;</span><br>    <span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;全部文章&#x27;</span><br>    <span class="hljs-attr">post_total:</span> <span class="hljs-string">&#x27;共有 %d 篇文章&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="主頁"><a href="#主頁" class="headerlink" title="主頁"></a>主頁</h2><h3 id="修改主頁的slogan"><a href="#修改主頁的slogan" class="headerlink" title="修改主頁的slogan"></a>修改主頁的slogan</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#slogan-%E6%89%93%E5%AD%97%E6%9C%BA">修改slogan</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>    <span class="hljs-attr">slogan:</span><br>        <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">text:</span> <span class="hljs-string">修改成你要的slogan</span><br></code></pre></td></tr></table></figure><h3 id="修改頁面頂部大圖"><a href="#修改頁面頂部大圖" class="headerlink" title="修改頁面頂部大圖"></a>修改頁面頂部大圖</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E9%A1%B5%E9%9D%A2%E9%A1%B6%E9%83%A8%E5%A4%A7%E5%9B%BE">修改頁面頂部大圖</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>    <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span> <span class="hljs-comment"># 修改圖片高度</span><br></code></pre></td></tr></table></figure><h2 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h2><h3 id="footer-文字"><a href="#footer-文字" class="headerlink" title="footer 文字"></a>footer 文字</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">footer:</span><br>    <span class="hljs-attr">content:</span><br>    <span class="hljs-string">`</span><br>    <span class="hljs-string">內容</span><br>    <span class="hljs-string">`</span><br><br></code></pre></td></tr></table></figure><h2 id="文章內頁"><a href="#文章內頁" class="headerlink" title="文章內頁"></a>文章內頁</h2><h3 id="文章頁顯示訊息-字數、日期"><a href="#文章頁顯示訊息-字數、日期" class="headerlink" title="文章頁顯示訊息(字數、日期..)"></a>文章頁顯示訊息(字數、日期..)</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E6%97%A5%E6%9C%9F-%E5%AD%97%E6%95%B0-%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF-%E9%98%85%E8%AF%BB%E6%95%B0">日期&#x2F;字数&#x2F;阅读时长&#x2F;阅读数</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>    <span class="hljs-attr">meta:</span><br>        <span class="hljs-attr">author:</span>  <span class="hljs-comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span><br>            <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">date:</span>  <span class="hljs-comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span><br>            <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;dddd, MMMM Do YYYY, h:mm a&quot;</span>  <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>        <span class="hljs-attr">wordcount:</span>  <span class="hljs-comment"># 字数统计</span><br>            <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 字&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>        <span class="hljs-attr">min2read:</span>  <span class="hljs-comment"># 阅读时间</span><br>            <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 分钟&quot;</span><br>        <span class="hljs-attr">views:</span>  <span class="hljs-comment"># 阅读次数</span><br>            <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>            <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span>  <span class="hljs-comment"># 统计数据来源，可选：leancloud | busuanzi   注意不蒜子会间歇抽风</span><br>            <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br></code></pre></td></tr></table></figure><h3 id="代碼塊不顯示使用語言"><a href="#代碼塊不顯示使用語言" class="headerlink" title="代碼塊不顯示使用語言"></a>代碼塊不顯示使用語言</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E4%BB%A3%E7%A0%81%E5%9D%97">代码块</a></p><p><code>fluid/_config.yml</code>搜尋”代码块的增强配置”</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">code:</span><br>    <span class="hljs-comment"># 是否开启复制代码的按钮</span><br>    <span class="hljs-comment"># Enable copy code button</span><br>    <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 代码语言</span><br><span class="hljs-comment"># Code language</span><br><span class="hljs-attr">language:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 把它關掉</span><br>    <span class="hljs-attr">default:</span> <span class="hljs-string">&quot;TEXT&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="關於"><a href="#關於" class="headerlink" title="關於"></a>關於</h2><h3 id="關於的內容"><a href="#關於的內容" class="headerlink" title="關於的內容"></a>關於的內容</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E4%BF%A1%E6%81%AF">关于信息</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">about:</span><br><span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.png</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">&quot;你的名字&quot;</span><br><span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;你的介紹&quot;</span><br><br></code></pre></td></tr></table></figure><p>至於其他的配置，日後如果有修改的需求，會再持續記錄到此文章</p><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><p><a href="https://hexo.fluid-dev.com/docs/guide/">fluid官方文檔</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 框架介紹</title>
    <link href="/2023/07/17/hexo-introduce/"/>
    <url>/2023/07/17/hexo-introduce/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo 是一個blog 框架，用於快速產生”靜態”網站，基於 node.js，使用markdown 撰寫文章<br>以下為官網連結 <a href="https://hexo.io/zh-tw/">Hexo</a></p><h1 id="安裝流程"><a href="#安裝流程" class="headerlink" title="安裝流程"></a>安裝流程</h1><ol><li><p>首先要先安裝node.js</p></li><li><p>安裝hexo cli，才能使用hexo 指令</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><ol start="3"><li>建立blog 專案</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 沒有加&lt;folder&gt;會在當前資料夾建立hexo 專案</span><br><span class="hljs-comment"># 也可以自行指定資料夾</span><br>hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure><ol start="4"><li>運行 blog 專案</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>看到專案建立起來後，接下來就可以來撰寫文章了，以下就來介紹幾個重要的文件</p><h1 id="目錄結構"><a href="#目錄結構" class="headerlink" title="目錄結構"></a>目錄結構</h1><ul><li>scaffold : 文章的範例模板</li><li>source&#x2F;_post : 文章內容所在</li><li>themes : 可以將網路上下載的主題放入此資料夾</li></ul><h1 id="文章範例"><a href="#文章範例" class="headerlink" title="文章範例"></a>文章範例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: 標題<br><span class="hljs-built_in">date</span>:  日期 <span class="hljs-comment"># 依照文章當下新增的時間，但如果之後不小心資料損毀，就無法知道確切時間，所以建議自己打日期</span><br>tags:      <span class="hljs-comment">## 如果只有單一標籤，直接寫在貿號後面就好</span><br>    -  前端<br>---<br><br><span class="hljs-comment"># 以下開始為內文</span><br><br><span class="hljs-comment"># 這會是一個超連結</span><br>[文字](http連結)<br><br><br>`此為行內程式碼`<br><br>```使用的語言，如html<br>此為段落型程式碼<br>``` <span class="hljs-comment"># 使用兩塊 ``` 包起來</span><br><br><br><br></code></pre></td></tr></table></figure><h1 id="分類與tags"><a href="#分類與tags" class="headerlink" title="分類與tags"></a>分類與tags</h1><p>有時一邊文章會設置多個tag 或是 多個 分類</p><h2 id="多個tags-的用法"><a href="#多個tags-的用法" class="headerlink" title="多個tags 的用法"></a>多個tags 的用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: Hello World<br><span class="hljs-built_in">date</span>: 2013/7/13 20:46:25<br>categories:<br>    - Diary<br>tags:<br>    - PS3<br>    - Games<br>---<br><br></code></pre></td></tr></table></figure><h2 id="多個-categories-用法"><a href="#多個-categories-用法" class="headerlink" title="多個 categories 用法"></a>多個 categories 用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: Hello World<br><span class="hljs-built_in">date</span>: 2013/7/13 20:46:25<br>categories:<br>    - [Diary]<br>    - [Life]<br>tags:<br>    - PS3<br>    - Games<br>---<br><br></code></pre></td></tr></table></figure><h2 id="同一個categories有子分類"><a href="#同一個categories有子分類" class="headerlink" title="同一個categories有子分類"></a>同一個categories有子分類</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: Hello World<br><span class="hljs-built_in">date</span>: 2013/7/13 20:46:25<br>categories:<br>    - [Diary,Eat]<br>    - [Diary,Life]<br>tags:<br>    - PS3<br>    - Games<br>---<br><br></code></pre></td></tr></table></figure><h1 id="引用自己的其他文章"><a href="#引用自己的其他文章" class="headerlink" title="引用自己的其他文章"></a>引用自己的其他文章</h1><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">post_link</span> 文章所在檔名 顯示的文字 %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"># 範例</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">post_link</span> linux-service-ssh Linux網路服務-ssh %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="部屬到線上"><a href="#部屬到線上" class="headerlink" title="部屬到線上"></a>部屬到線上</h1><ol><li>編譯 blog 專案，編譯完會出現一個public 目錄</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><ol start="2"><li>只要將生成的public 資料夾，移動到任意web server 裡面，就能夠運行起來</li></ol><h1 id="部屬到github"><a href="#部屬到github" class="headerlink" title="部屬到github"></a>部屬到github</h1><h1 id="調整themes"><a href="#調整themes" class="headerlink" title="調整themes"></a>調整themes</h1><p>到網路上搜尋喜歡的主題，按照指示操作，通常都會是以下步驟</p><ol><li><p>到github 下載該主題的原始碼，下載成zip檔較好操作</p></li><li><p>將壓縮檔解壓縮，裡面的檔案放入blog 專案中 themes 目錄，並將名稱改為<code>$&#123;主題指定的名稱&#125;</code></p></li><li><p>有時會要求額外下載套件</p></li><li><p>到blog 專案根目錄的<font color=#FF2D2D><code>_config.yml</code></font>，將<code>theme</code>屬性修改為<code>$&#123;主題指定的名稱&#125;</code></p></li></ol><h2 id="實際調整範例"><a href="#實際調整範例" class="headerlink" title="實際調整範例"></a>實際調整範例</h2><p>後來看了 <a href="https://ithelp.ithome.com.tw/articles/10242172">【Day 7】如何更換 Hexo 主題</a> 的文章，決定使用<br><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev&#x2F;hexo-theme-fluid</a> 的主題，安裝文檔及修改配置的文檔都寫得很清楚。</p><p>以下是使用文檔提供的下載方式二，<br>下載 <code>最新 release 版本</code> 解壓到 <code>themes</code> 目錄，並將解壓出的文件夾重命名為 <code>fluid</code>。</p><ol><li><p>依照上面步驟建立好blog 專案</p></li><li><p>下載 <code>最新 release 版本</code> 解壓到 <code>themes</code> 目錄，並將解壓出的文件夾重命名為 <code>fluid</code>。</p></li><li><p>修改blog 專案根目錄下<code>_config.yml</code> :</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">theme : fluid <span class="hljs-comment"># 指定主題</span><br><br>language: zh-TW <span class="hljs-comment"># 指定顯示語言</span><br></code></pre></td></tr></table></figure><ol start="4"><li>原先hexo官方是沒有關於頁的，本主題有所以需要自己添加</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>創建成功後，在blog 專案底下<code>/source/about/index.md</code>，添加<code>layout</code> 屬性。</p><p>修改後文件內容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: about<br>layout: about<br>---<br><br><span class="hljs-comment">#底下也可以寫一些內容</span><br></code></pre></td></tr></table></figure><ol start="5"><li>重新啟動後主題就會更換</li></ol><p>如果有一些配置需要更改可以<a href="https://hexo.fluid-dev.com/docs/guide/">查看此篇記錄</a></p><p>調整blog 主題配置可能一開始比較費勁，但相比於自己從零開始搞已經節省很多的時間了，也更可以專注在寫作上，感謝開發者的貢獻。<br>看到自己的blog 有美美的主題就更有動力寫作了! 希望大家寫作愉快。</p><h1 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h1><p><a href="https://www.youtube.com/watch?v=jOJI9ekTzK8">使用 Hexo 建構個人化部落格</a></p><p><a href="https://ithelp.ithome.com.tw/articles/10242172">如何更換 Hexo 主題</a></p><p><a href="https://hexo.io/zh-cn/docs/front-matter.html">Front-matter</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
